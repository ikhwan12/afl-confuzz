#line 2 "/home/klee/klee_build/stp/build/lib/Parser/lexsmt.cpp"

#line 4 "/home/klee/klee_build/stp/build/lib/Parser/lexsmt.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer smt_create_buffer
#define yy_delete_buffer smt_delete_buffer
#define yy_flex_debug smt_flex_debug
#define yy_init_buffer smt_init_buffer
#define yy_flush_buffer smt_flush_buffer
#define yy_load_buffer_state smt_load_buffer_state
#define yy_switch_to_buffer smt_switch_to_buffer
#define yyin smtin
#define yyleng smtleng
#define yylex smtlex
#define yylineno smtlineno
#define yyout smtout
#define yyrestart smtrestart
#define yytext smttext
#define yywrap smtwrap
#define yyalloc smtalloc
#define yyrealloc smtrealloc
#define yyfree smtfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE smtrestart(smtin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int smtleng;

extern FILE *smtin, *smtout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE smtlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-smtlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < smtleng; ++yyl )\
                    if ( smttext[yyl] == '\n' )\
                        --smtlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up smttext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up smttext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via smtrestart()), so that the user can continue scanning by
	 * just pointing smtin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when smttext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int smtleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow smtwrap()'s to do buffer switches
 * instead of setting up a fresh smtin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void smtrestart (FILE *input_file  );
void smt_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE smt_create_buffer (FILE *file,int size  );
void smt_delete_buffer (YY_BUFFER_STATE b  );
void smt_flush_buffer (YY_BUFFER_STATE b  );
void smtpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void smtpop_buffer_state (void );

static void smtensure_buffer_stack (void );
static void smt_load_buffer_state (void );
static void smt_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER smt_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE smt_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE smt_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE smt_scan_bytes (yyconst char *bytes,int len  );

void *smtalloc (yy_size_t  );
void *smtrealloc (void *,yy_size_t  );
void smtfree (void *  );

#define yy_new_buffer smt_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        smtensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            smt_create_buffer(smtin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        smtensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            smt_create_buffer(smtin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define smtwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *smtin = (FILE *) 0, *smtout = (FILE *) 0;

typedef int yy_state_type;

extern int smtlineno;

int smtlineno = 1;

extern char *smttext;
#define yytext_ptr smttext
static yyconst flex_int16_t yy_nxt[][49] =
    {
    {
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0
    },

    {
        9,   10,   11,   12,   13,   14,   10,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   24,   25,   10,
       26,   27,   28,   29,   30,   31,   32,   33,   24,   24,
       34,   24,   35,   24,   36,   37,   38,   24,   39,   40,
       41,   42,   24,   24,   43,   24,   44,   45,   10

    },

    {
        9,   10,   11,   12,   13,   14,   10,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   24,   25,   10,
       26,   27,   28,   29,   30,   31,   32,   33,   24,   24,
       34,   24,   35,   24,   36,   37,   38,   24,   39,   40,
       41,   42,   24,   24,   43,   24,   44,   45,   10
    },

    {
        9,   46,   46,   47,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46

    },

    {
        9,   46,   46,   47,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46
    },

    {
        9,   48,   48,   49,   50,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   51,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48

    },

    {
        9,   48,   48,   49,   50,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   51,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48
    },

    {
        9,   52,   52,   53,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   54,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   55

    },

    {
        9,   52,   52,   53,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   54,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   55
    },

    {
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9

    },

    {
        9,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10
    },

    {
        9,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11

    },

    {
        9,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12
    },

    {
        9,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13

    },

    {
        9,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14
    },

    {
        9,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15

    },

    {
        9,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16
    },

    {
        9,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,   56,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17

    },

    {
        9,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18
    },

    {
        9,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19

    },

    {
        9,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20
    },

    {
        9,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21

    },

    {
        9,  -22,  -22,  -22,  -22,  -22,   57,  -22,  -22,   57,
      -22,  -22,  -22,  -22,   57,   57,   57,   57,  -22,  -22,
      -22,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   58,   57,
       57,   57,   57,   57,   57,   57,   57,  -22,  -22
    },

    {
        9,  -23,  -23,  -23,  -23,  -23,   57,  -23,  -23,   57,
      -23,  -23,  -23,  -23,   57,   57,   57,   57,  -23,  -23,
      -23,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       59,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -23,  -23

    },

    {
        9,  -24,  -24,  -24,  -24,  -24,   57,  -24,  -24,   57,
      -24,  -24,  -24,  -24,   57,   57,   57,   57,  -24,  -24,
      -24,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -24,  -24
    },

    {
        9,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25

    },

    {
        9,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26
    },

    {
        9,  -27,  -27,  -27,  -27,  -27,   60,  -27,  -27,   60,
      -27,  -27,  -27,  -27,   60,   60,   60,   60,  -27,  -27,
      -27,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,  -27,  -27

    },

    {
        9,  -28,  -28,  -28,  -28,  -28,   57,  -28,  -28,   57,
      -28,  -28,  -28,  -28,   57,   57,   57,   57,  -28,  -28,
      -28,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   61,   57,   57,   57,   57,   62,
       57,   57,   57,   57,   63,   57,   57,  -28,  -28
    },

    {
        9,  -29,  -29,  -29,  -29,  -29,   57,  -29,  -29,   57,
      -29,  -29,  -29,  -29,   57,   57,   57,   57,  -29,  -29,
      -29,   57,   57,   57,   57,   57,   64,   57,   57,   57,
       65,   57,   57,   57,   57,   66,   57,   57,   57,   57,
       57,   57,   67,   57,   57,   57,   57,  -29,  -29

    },

    {
        9,  -30,  -30,  -30,  -30,  -30,   57,  -30,  -30,   57,
      -30,  -30,  -30,  -30,   57,   57,   57,   57,  -30,  -30,
      -30,   57,   68,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   69,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -30,  -30
    },

    {
        9,  -31,  -31,  -31,  -31,  -31,   57,  -31,  -31,   57,
      -31,  -31,  -31,  -31,   57,   57,   57,   57,  -31,  -31,
      -31,   57,   57,   57,   57,   57,   70,   57,   57,   57,
       71,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -31,  -31

    },

    {
        9,  -32,  -32,  -32,  -32,  -32,   57,  -32,  -32,   57,
      -32,  -32,  -32,  -32,   57,   57,   57,   57,  -32,  -32,
      -32,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   72,   57,   57,  -32,  -32
    },

    {
        9,  -33,  -33,  -33,  -33,  -33,   57,  -33,  -33,   57,
      -33,  -33,  -33,  -33,   57,   57,   57,   57,  -33,  -33,
      -33,   57,   73,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   74,   57,   57,   75,   57,   57,   57,   57,
       57,   76,   57,   57,   57,   57,   57,  -33,  -33

    },

    {
        9,  -34,  -34,  -34,  -34,  -34,   57,  -34,  -34,   57,
      -34,  -34,  -34,  -34,   57,   57,   57,   57,  -34,  -34,
      -34,   57,   57,   57,   57,   57,   57,   77,   57,   57,
       57,   57,   57,   78,   57,   57,   57,   57,   57,   57,
       79,   57,   57,   57,   57,   57,   57,  -34,  -34
    },

    {
        9,  -35,  -35,  -35,  -35,  -35,   57,  -35,  -35,   57,
      -35,  -35,  -35,  -35,   57,   57,   57,   57,  -35,  -35,
      -35,   57,   80,   57,   57,   57,   81,   57,   57,   57,
       57,   57,   57,   57,   57,   82,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -35,  -35

    },

    {
        9,  -36,  -36,  -36,  -36,  -36,   57,  -36,  -36,   57,
      -36,  -36,  -36,  -36,   57,   57,   57,   57,  -36,  -36,
      -36,   57,   83,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   84,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -36,  -36
    },

    {
        9,  -37,  -37,  -37,  -37,  -37,   57,  -37,  -37,   57,
      -37,  -37,  -37,  -37,   57,   57,   57,   57,  -37,  -37,
      -37,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   85,   57,
       57,   57,   57,   57,   57,   57,   57,  -37,  -37

    },

    {
        9,  -38,  -38,  -38,  -38,  -38,   57,  -38,  -38,   57,
      -38,  -38,  -38,  -38,   57,   57,   57,   57,  -38,  -38,
      -38,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   86,   57,
       57,   57,   57,   57,   57,   57,   57,  -38,  -38
    },

    {
        9,  -39,  -39,  -39,  -39,  -39,   57,  -39,  -39,   57,
      -39,  -39,  -39,  -39,   57,   57,   57,   57,  -39,  -39,
      -39,   57,   57,   57,   57,   57,   87,   57,   57,   57,
       57,   57,   57,   57,   57,   88,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -39,  -39

    },

    {
        9,  -40,  -40,  -40,  -40,  -40,   57,  -40,  -40,   57,
      -40,  -40,  -40,  -40,   57,   57,   57,   57,  -40,  -40,
      -40,   57,   89,   57,   57,   57,   90,   57,   57,   57,
       91,   57,   57,   57,   57,   92,   57,   57,   57,   57,
       93,   57,   57,   57,   57,   57,   57,  -40,  -40
    },

    {
        9,  -41,  -41,  -41,  -41,  -41,   57,  -41,  -41,   57,
      -41,  -41,  -41,  -41,   57,   57,   57,   57,  -41,  -41,
      -41,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   94,   57,
       57,   57,   57,   57,   57,   57,   57,  -41,  -41

    },

    {
        9,  -42,  -42,  -42,  -42,  -42,   57,  -42,  -42,   57,
      -42,  -42,  -42,  -42,   57,   57,   57,   57,  -42,  -42,
      -42,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   95,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -42,  -42
    },

    {
        9,  -43,  -43,  -43,  -43,  -43,   57,  -43,  -43,   57,
      -43,  -43,  -43,  -43,   57,   57,   57,   57,  -43,  -43,
      -43,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   96,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -43,  -43

    },

    {
        9,  -44,  -44,  -44,  -44,  -44,   57,  -44,  -44,   57,
      -44,  -44,  -44,  -44,   57,   57,   57,   57,  -44,  -44,
      -44,   57,   57,   57,   57,   57,   97,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -44,  -44
    },

    {
        9,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45

    },

    {
        9,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46
    },

    {
        9,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47

    },

    {
        9,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48
    },

    {
        9,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49

    },

    {
        9,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50
    },

    {
        9,   98,   98,  -51,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98

    },

    {
        9,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52
    },

    {
        9,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53

    },

    {
        9,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,   99,   99
    },

    {
        9,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55

    },

    {
        9,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,   56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56
    },

    {
        9,  -57,  -57,  -57,  -57,  -57,   57,  -57,  -57,   57,
      -57,  -57,  -57,  -57,   57,   57,   57,   57,  -57,  -57,
      -57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -57,  -57

    },

    {
        9,  -58,  -58,  -58,  -58,  -58,   57,  -58,  -58,   57,
      -58,  -58,  -58,  -58,   57,   57,   57,   57,  -58,  -58,
      -58,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  100,   57,
       57,   57,   57,   57,   57,   57,   57,  -58,  -58
    },

    {
        9,  -59,  -59,  -59,  -59,  -59,   57,  -59,  -59,   57,
      -59,  -59,  -59,  -59,   57,   57,   57,   57,  -59,  -59,
      -59,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      101,   57,   57,   57,   57,   57,   57,  -59,  -59

    },

    {
        9,  -60,  -60,  -60,  -60,  -60,   57,  -60,  -60,   57,
      -60,  -60,  -60,  -60,   57,   57,   57,   57,  -60,  -60,
      -60,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -60,  -60
    },

    {
        9,  -61,  -61,  -61,  -61,  -61,   57,  -61,  -61,   57,
      -61,  -61,  -61,  -61,   57,   57,   57,   57,  -61,  -61,
      -61,   57,   57,   57,   57,  102,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -61,  -61

    },

    {
        9,  -62,  -62,  -62,  -62,  -62,   57,  -62,  -62,   57,
      -62,  -62,  -62,  -62,   57,   57,   57,   57,  -62,  -62,
      -62,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  103,
       57,   57,   57,   57,   57,   57,   57,  -62,  -62
    },

    {
        9,  -63,  -63,  -63,  -63,  -63,   57,  -63,  -63,   57,
      -63,  -63,  -63,  -63,   57,   57,   57,   57,  -63,  -63,
      -63,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      104,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -63,  -63

    },

    {
        9,  -64,  -64,  -64,  -64,  -64,   57,  -64,  -64,   57,
      -64,  -64,  -64,  -64,   57,   57,   57,   57,  -64,  -64,
      -64,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  105,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -64,  -64
    },

    {
        9,  -65,  -65,  -65,  -65,  -65,   57,  -65,  -65,   57,
      -65,  -65,  -65,  -65,   57,   57,   57,   57,  -65,  -65,
      -65,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      106,   57,   57,   57,   57,   57,   57,  -65,  -65

    },

    {
        9,  -66,  -66,  -66,  -66,  -66,   57,  -66,  -66,   57,
      -66,  -66,  -66,  -66,   57,   57,   57,   57,  -66,  -66,
      -66,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  107,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -66,  -66
    },

    {
        9,  -67,  -67,  -67,  -67,  -67,   57,  -67,  -67,  108,
      -67,  -67,  -67,  -67,   57,   57,   57,   57,  -67,  -67,
      -67,   57,  109,   57,  110,   57,   57,   57,  111,   57,
       57,   57,  112,  113,  114,  115,   57,   57,   57,  116,
       57,  117,   57,   57,  118,   57,   57,  -67,  -67

    },

    {
        9,  -68,  -68,  -68,  -68,  -68,   57,  -68,  -68,   57,
      -68,  -68,  -68,  -68,   57,   57,   57,   57,  -68,  -68,
      -68,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      119,   57,   57,   57,   57,   57,   57,  -68,  -68
    },

    {
        9,  -69,  -69,  -69,  -69,  -69,   57,  -69,  -69,   57,
      -69,  -69,  -69,  -69,   57,   57,   57,   57,  -69,  -69,
      -69,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  120,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -69,  -69

    },

    {
        9,  -70,  -70,  -70,  -70,  -70,   57,  -70,  -70,   57,
      -70,  -70,  -70,  -70,   57,   57,   57,   57,  -70,  -70,
      -70,   57,   57,   57,   57,   57,   57,  121,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -70,  -70
    },

    {
        9,  -71,  -71,  -71,  -71,  -71,   57,  -71,  -71,   57,
      -71,  -71,  -71,  -71,   57,   57,   57,   57,  -71,  -71,
      -71,   57,   57,   57,   57,   57,   57,  122,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  123,
       57,   57,   57,   57,   57,   57,   57,  -71,  -71

    },

    {
        9,  -72,  -72,  -72,  -72,  -72,   57,  -72,  -72,   57,
      -72,  -72,  -72,  -72,   57,   57,   57,   57,  -72,  -72,
      -72,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      124,   57,   57,   57,   57,   57,   57,  -72,  -72
    },

    {
        9,  -73,  -73,  -73,  -73,  -73,   57,  -73,  -73,   57,
      -73,  -73,  -73,  -73,   57,   57,   57,   57,  -73,  -73,
      -73,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  125,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -73,  -73

    },

    {
        9,  -74,  -74,  -74,  -74,  -74,   57,  -74,  -74,   57,
      -74,  -74,  -74,  -74,   57,   57,   57,   57,  -74,  -74,
      -74,   57,   57,   57,   57,   57,  126,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -74,  -74
    },

    {
        9,  -75,  -75,  -75,  -75,  -75,   57,  -75,  -75,   57,
      -75,  -75,  -75,  -75,   57,   57,   57,   57,  -75,  -75,
      -75,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  127,   57,
       57,   57,   57,   57,   57,   57,   57,  -75,  -75

    },

    {
        9,  -76,  -76,  -76,  -76,  -76,   57,  -76,  -76,   57,
      -76,  -76,  -76,  -76,   57,   57,   57,   57,  -76,  -76,
      -76,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  128,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -76,  -76
    },

    {
        9,  -77,  -77,  -77,  -77,  -77,   57,  -77,  -77,   57,
      -77,  -77,  -77,  -77,   57,   57,   57,   57,  -77,  -77,
      -77,  129,   57,   57,   57,   57,   57,  130,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -77,  -77

    },

    {
        9,  -78,  -78,  -78,  -78,  -78,   57,  -78,  -78,   57,
      -78,  -78,  -78,  -78,   57,   57,   57,   57,  -78,  -78,
      -78,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  131,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -78,  -78
    },

    {
        9,  -79,  -79,  -79,  -79,  -79,   57,  -79,  -79,   57,
      -79,  -79,  -79,  -79,   57,   57,   57,   57,  -79,  -79,
      -79,   57,   57,   57,   57,   57,  132,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -79,  -79

    },

    {
        9,  -80,  -80,  -80,  -80,  -80,   57,  -80,  -80,   57,
      -80,  -80,  -80,  -80,   57,   57,   57,   57,  -80,  -80,
      -80,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  133,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -80,  -80
    },

    {
        9,  -81,  -81,  -81,  -81,  -81,   57,  -81,  -81,   57,
      -81,  -81,  -81,  -81,   57,   57,   57,   57,  -81,  -81,
      -81,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      134,   57,   57,   57,   57,   57,   57,  -81,  -81

    },

    {
        9,  -82,  -82,  -82,  -82,  -82,   57,  -82,  -82,   57,
      -82,  -82,  -82,  -82,   57,   57,   57,   57,  -82,  -82,
      -82,   57,   57,   57,   57,   57,   57,   57,  135,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -82,  -82
    },

    {
        9,  -83,  -83,  -83,  -83,  -83,   57,  -83,  -83,   57,
      -83,  -83,  -83,  -83,   57,   57,   57,   57,  -83,  -83,
      -83,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  136,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -83,  -83

    },

    {
        9,  -84,  -84,  -84,  -84,  -84,   57,  -84,  -84,   57,
      -84,  -84,  -84,  -84,   57,   57,   57,   57,  -84,  -84,
      -84,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  137,   57,
      138,   57,   57,   57,   57,   57,   57,  -84,  -84
    },

    {
        9,  -85,  -85,  -85,  -85,  -85,   57,  -85,  -85,   57,
      -85,  -85,  -85,  -85,   57,   57,   57,   57,  -85,  -85,
      -85,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -85,  -85

    },

    {
        9,  -86,  -86,  -86,  -86,  -86,   57,  -86,  -86,   57,
      -86,  -86,  -86,  -86,   57,   57,   57,   57,  -86,  -86,
      -86,   57,   57,   57,   57,   57,  139,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -86,  -86
    },

    {
        9,  -87,  -87,  -87,  -87,  -87,   57,  -87,  -87,   57,
      -87,  -87,  -87,  -87,   57,   57,   57,   57,  -87,  -87,
      -87,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  140,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -87,  -87

    },

    {
        9,  -88,  -88,  -88,  -88,  -88,   57,  -88,  -88,   57,
      -88,  -88,  -88,  -88,   57,   57,   57,   57,  -88,  -88,
      -88,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      141,   57,   57,   57,   57,   57,   57,  -88,  -88
    },

    {
        9,  -89,  -89,  -89,  -89,  -89,   57,  -89,  -89,   57,
      -89,  -89,  -89,  -89,   57,   57,   57,   57,  -89,  -89,
      -89,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      142,   57,   57,   57,   57,   57,   57,  -89,  -89

    },

    {
        9,  -90,  -90,  -90,  -90,  -90,   57,  -90,  -90,   57,
      -90,  -90,  -90,  -90,   57,   57,   57,   57,  -90,  -90,
      -90,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  143,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -90,  -90
    },

    {
        9,  -91,  -91,  -91,  -91,  -91,   57,  -91,  -91,   57,
      -91,  -91,  -91,  -91,   57,   57,   57,   57,  -91,  -91,
      -91,   57,   57,   57,   57,   57,   57,   57,  144,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -91,  -91

    },

    {
        9,  -92,  -92,  -92,  -92,  -92,   57,  -92,  -92,   57,
      -92,  -92,  -92,  -92,   57,   57,   57,   57,  -92,  -92,
      -92,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  145,   57,
       57,  146,   57,   57,   57,   57,   57,  -92,  -92
    },

    {
        9,  -93,  -93,  -93,  -93,  -93,   57,  -93,  -93,   57,
      -93,  -93,  -93,  -93,   57,   57,   57,   57,  -93,  -93,
      -93,   57,  147,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  148,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  -93,  -93

    },

    {
        9,  -94,  -94,  -94,  -94,  -94,   57,  -94,  -94,   57,
      -94,  -94,  -94,  -94,   57,   57,   57,   57,  -94,  -94,
      -94,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  149,   57,   57,   57,   57,   57,  -94,  -94
    },

    {
        9,  -95,  -95,  -95,  -95,  -95,   57,  -95,  -95,   57,
      -95,  -95,  -95,  -95,   57,   57,   57,   57,  -95,  -95,
      -95,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  150,   57,   57,   57,   57,   57,   57,   57,  151,
       57,   57,   57,   57,   57,   57,   57,  -95,  -95

    },

    {
        9,  -96,  -96,  -96,  -96,  -96,   57,  -96,  -96,   57,
      -96,  -96,  -96,  -96,   57,   57,   57,   57,  -96,  -96,
      -96,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  152,   57,
       57,   57,   57,   57,   57,   57,   57,  -96,  -96
    },

    {
        9,  -97,  -97,  -97,  -97,  -97,   57,  -97,  -97,   57,
      -97,  -97,  -97,  -97,   57,   57,   57,   57,  -97,  -97,
      -97,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  153,   57,
       57,   57,   57,   57,   57,   57,   57,  -97,  -97

    },

    {
        9,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98
    },

    {
        9,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99

    },

    {
        9, -100, -100, -100, -100, -100,   57, -100, -100,   57,
     -100, -100, -100, -100,   57,   57,   57,   57, -100, -100,
     -100,   57,  154,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -100, -100
    },

    {
        9, -101, -101, -101, -101, -101,   57, -101, -101,   57,
     -101, -101, -101, -101,   57,   57,   57,  155, -101, -101,
     -101,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -101, -101

    },

    {
        9, -102, -102, -102, -102, -102,   57, -102, -102,   57,
     -102, -102, -102, -102,   57,   57,   57,   57, -102, -102,
     -102,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -102, -102
    },

    {
        9, -103, -103, -103, -103, -103,   57, -103, -103,   57,
     -103, -103, -103, -103,   57,   57,   57,   57, -103, -103,
     -103,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  156,   57,   57,   57,   57,   57, -103, -103

    },

    {
        9, -104, -104, -104, -104, -104,   57, -104, -104,   57,
     -104, -104, -104, -104,   57,   57,   57,   57, -104, -104,
     -104,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  157,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -104, -104
    },

    {
        9, -105, -105, -105, -105, -105,   57, -105, -105,   57,
     -105, -105, -105, -105,   57,   57,   57,   57, -105, -105,
     -105,   57,   57,   57,  158,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -105, -105

    },

    {
        9, -106, -106, -106, -106, -106,   57, -106, -106,  159,
     -106, -106, -106, -106,   57,   57,   57,   57, -106, -106,
     -106,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -106, -106
    },

    {
        9, -107, -107, -107, -107, -107,   57, -107, -107,   57,
     -107, -107, -107, -107,   57,   57,   57,   57, -107, -107,
     -107,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  160,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -107, -107

    },

    {
        9, -108, -108, -108, -108, -108,   57, -108, -108,  108,
     -108, -108, -108, -108,   57,   57,   57,   57, -108, -108,
     -108,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -108, -108
    },

    {
        9, -109, -109, -109, -109, -109,   57, -109, -109,   57,
     -109, -109, -109, -109,   57,   57,   57,   57, -109, -109,
     -109,   57,   57,   57,   57,  161,   57,   57,   57,   57,
       57,   57,   57,   57,  162,   57,   57,   57,   57,  163,
       57,   57,   57,   57,   57,   57,   57, -109, -109

    },

    {
        9, -110, -110, -110, -110, -110,   57, -110, -110,   57,
     -110, -110, -110, -110,   57,   57,   57,   57, -110, -110,
     -110,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  164,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -110, -110
    },

    {
        9, -111, -111, -111, -111, -111,   57, -111, -111,   57,
     -111, -111, -111, -111,   57,   57,   57,   57, -111, -111,
     -111,   57,   57,   57,   57,   57,  165,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      166,   57,   57,   57,   57,   57,   57, -111, -111

    },

    {
        9, -112, -112, -112, -112, -112,   57, -112, -112,   57,
     -112, -112, -112, -112,   57,   57,   57,   57, -112, -112,
     -112,   57,   57,   57,   57,   57,  167,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  168,
      169,   57,   57,   57,   57,   57,   57, -112, -112
    },

    {
        9, -113, -113, -113, -113, -113,   57, -113, -113,   57,
     -113, -113, -113, -113,   57,   57,   57,   57, -113, -113,
     -113,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  170,   57,   57,   57,   57,   57, -113, -113

    },

    {
        9, -114, -114, -114, -114, -114,   57, -114, -114,   57,
     -114, -114, -114, -114,   57,   57,   57,   57, -114, -114,
     -114,   57,  171,   57,   57,   57,  172,   57,   57,   57,
       57,   57,   57,   57,   57,  173,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -114, -114
    },

    {
        9, -115, -115, -115, -115, -115,   57, -115, -115,   57,
     -115, -115, -115, -115,   57,   57,   57,   57, -115, -115,
     -115,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  174,   57,
       57,   57,   57,   57,   57,   57,   57, -115, -115

    },

    {
        9, -116, -116, -116, -116, -116,   57, -116, -116,   57,
     -116, -116, -116, -116,   57,   57,   57,   57, -116, -116,
     -116,   57,   57,   57,   57,  175,   57,   57,  176,  177,
       57,   57,  178,  179,   57,   57,   57,   57,  180,   57,
       57,  181,   57,   57,   57,   57,   57, -116, -116
    },

    {
        9, -117, -117, -117, -117, -117,   57, -117, -117,   57,
     -117, -117, -117, -117,   57,   57,   57,   57, -117, -117,
     -117,   57,   57,   57,   57,  182,   57,   57,  183,   57,
       57,   57,  184,   57,   57,   57,   57,   57,  185,   57,
       57,   57,   57,   57,   57,   57,   57, -117, -117

    },

    {
        9, -118, -118, -118, -118, -118,   57, -118, -118,   57,
     -118, -118, -118, -118,   57,   57,   57,   57, -118, -118,
     -118,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  186,  187,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -118, -118
    },

    {
        9, -119, -119, -119, -119, -119,   57, -119, -119,   57,
     -119, -119, -119, -119,   57,   57,   57,   57, -119, -119,
     -119,   57,   57,   57,   57,   57,  188,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -119, -119

    },

    {
        9, -120, -120, -120, -120, -120,   57, -120, -120,   57,
     -120, -120, -120, -120,   57,   57,   57,   57, -120, -120,
     -120,   57,   57,   57,  189,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -120, -120
    },

    {
        9, -121, -121, -121, -121, -121,   57, -121, -121,   57,
     -121, -121, -121, -121,   57,   57,   57,   57, -121, -121,
     -121,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      190,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -121, -121

    },

    {
        9, -122, -122, -122, -122, -122,   57, -122, -122,   57,
     -122, -122, -122, -122,   57,   57,   57,   57, -122, -122,
     -122,   57,   57,   57,   57,   57,   57,  191,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -122, -122
    },

    {
        9, -123, -123, -123, -123, -123,   57, -123, -123,   57,
     -123, -123, -123, -123,   57,   57,   57,   57, -123, -123,
     -123,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      192,   57,   57,   57,   57,   57,   57, -123, -123

    },

    {
        9, -124, -124, -124, -124, -124,   57, -124, -124,   57,
     -124, -124, -124, -124,   57,   57,   57,   57, -124, -124,
     -124,   57,   57,   57,   57,   57,  193,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  194,   57,
       57,   57,   57,   57,   57,   57,   57, -124, -124
    },

    {
        9, -125, -125, -125, -125, -125,   57, -125, -125,   57,
     -125, -125, -125, -125,   57,   57,   57,   57, -125, -125,
     -125,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  195,
       57,   57,   57,   57,   57,   57,   57, -125, -125

    },

    {
        9, -126, -126, -126, -126, -126,   57, -126, -126,   57,
     -126, -126, -126, -126,   57,   57,   57,   57, -126, -126,
     -126,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      196,   57,   57,   57,   57,   57,   57, -126, -126
    },

    {
        9, -127, -127, -127, -127, -127,   57, -127, -127,   57,
     -127, -127, -127, -127,   57,   57,   57,   57, -127, -127,
     -127,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  197,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -127, -127

    },

    {
        9, -128, -128, -128, -128, -128,   57, -128, -128,   57,
     -128, -128, -128, -128,   57,   57,   57,   57, -128, -128,
     -128,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  198,
       57,   57,   57,   57,   57,   57,   57, -128, -128
    },

    {
        9, -129, -129, -129, -129, -129,   57, -129, -129,   57,
     -129, -129, -129, -129,   57,   57,   57,   57, -129, -129,
     -129,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      199,   57,   57,   57,   57,   57,   57, -129, -129

    },

    {
        9, -130, -130, -130, -130, -130,   57, -130, -130,   57,
     -130, -130, -130, -130,   57,   57,   57,   57, -130, -130,
     -130,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -130, -130
    },

    {
        9, -131, -131, -131, -131, -131,   57, -131, -131,   57,
     -131, -131, -131, -131,   57,   57,   57,   57, -131, -131,
     -131,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  200,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -131, -131

    },

    {
        9, -132, -132, -132, -132, -132,   57, -132, -132,   57,
     -132, -132, -132, -132,   57,   57,   57,   57, -132, -132,
     -132,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -132, -132
    },

    {
        9, -133, -133, -133, -133, -133,   57, -133, -133,   57,
     -133, -133, -133, -133,   57,   57,   57,   57, -133, -133,
     -133,   57,   57,   57,   57,   57,   57,   57,  201,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -133, -133

    },

    {
        9, -134, -134, -134, -134, -134,   57, -134, -134,   57,
     -134, -134, -134, -134,   57,   57,   57,   57, -134, -134,
     -134,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -134, -134
    },

    {
        9, -135, -135, -135, -135, -135,   57, -135, -135,   57,
     -135, -135, -135, -135,   57,   57,   57,   57, -135, -135,
     -135,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      202,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -135, -135

    },

    {
        9, -136, -136, -136, -136, -136,   57, -136, -136,   57,
     -136, -136, -136, -136,   57,   57,   57,   57, -136, -136,
     -136,   57,   57,   57,   57,  203,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -136, -136
    },

    {
        9, -137, -137, -137, -137, -137,   57, -137, -137,   57,
     -137, -137, -137, -137,   57,   57,   57,   57, -137, -137,
     -137,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -137, -137

    },

    {
        9, -138, -138, -138, -138, -138,   57, -138, -138,   57,
     -138, -138, -138, -138,   57,   57,   57,   57, -138, -138,
     -138,   57,   57,   57,   57,   57,  204,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -138, -138
    },

    {
        9, -139, -139, -139, -139, -139,   57, -139, -139,   57,
     -139, -139, -139, -139,   57,   57,   57,   57, -139, -139,
     -139,   57,   57,   57,   57,  205,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -139, -139

    },

    {
        9, -140, -140, -140, -140, -140,   57, -140, -140,   57,
     -140, -140, -140, -140,   57,   57,   57,   57, -140, -140,
     -140,   57,   57,   57,   57,   57,  206,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -140, -140
    },

    {
        9, -141, -141, -141, -141, -141,   57, -141, -141,   57,
     -141, -141, -141, -141,   57,   57,   57,   57, -141, -141,
     -141,   57,  207,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -141, -141

    },

    {
        9, -142, -142, -142, -142, -142,   57, -142, -142,   57,
     -142, -142, -142, -142,   57,   57,   57,   57, -142, -142,
     -142,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -142, -142
    },

    {
        9, -143, -143, -143, -143, -143,   57, -143, -143,   57,
     -143, -143, -143, -143,   57,   57,   57,   57, -143, -143,
     -143,   57,   57,   57,   57,   57,  208,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -143, -143

    },

    {
        9, -144, -144, -144, -144, -144,   57, -144, -144,   57,
     -144, -144, -144, -144,   57,   57,   57,   57, -144, -144,
     -144,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  209,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -144, -144
    },

    {
        9, -145, -145, -145, -145, -145,   57, -145, -145,   57,
     -145, -145, -145, -145,   57,   57,   57,   57, -145, -145,
     -145,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      210,   57,   57,   57,   57,   57,   57, -145, -145

    },

    {
        9, -146, -146, -146, -146, -146,   57, -146, -146,   57,
     -146, -146, -146, -146,   57,   57,   57,   57, -146, -146,
     -146,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  211,   57,
       57,   57,   57,   57,   57,   57,   57, -146, -146
    },

    {
        9, -147, -147, -147, -147, -147,   57, -147, -147,   57,
     -147, -147, -147, -147,   57,   57,   57,   57, -147, -147,
     -147,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      212,   57,   57,   57,   57,   57,   57, -147, -147

    },

    {
        9, -148, -148, -148, -148, -148,   57, -148, -148,   57,
     -148, -148, -148, -148,   57,   57,   57,   57, -148, -148,
     -148,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  213,   57,
       57,   57,   57,   57,   57,   57,   57, -148, -148
    },

    {
        9, -149, -149, -149, -149, -149,   57, -149, -149,   57,
     -149, -149, -149, -149,   57,   57,   57,   57, -149, -149,
     -149,   57,   57,   57,   57,   57,  214,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -149, -149

    },

    {
        9, -150, -150, -150, -150, -150,   57, -150, -150,   57,
     -150, -150, -150, -150,   57,   57,   57,   57, -150, -150,
     -150,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  215,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -150, -150
    },

    {
        9, -151, -151, -151, -151, -151,   57, -151, -151,   57,
     -151, -151, -151, -151,   57,   57,   57,   57, -151, -151,
     -151,   57,  216,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -151, -151

    },

    {
        9, -152, -152, -152, -152, -152,   57, -152, -152,   57,
     -152, -152, -152, -152,   57,   57,   57,   57, -152, -152,
     -152,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -152, -152
    },

    {
        9, -153, -153, -153, -153, -153,   57, -153, -153,   57,
     -153, -153, -153, -153,   57,   57,   57,   57, -153, -153,
     -153,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  217,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -153, -153

    },

    {
        9, -154, -154, -154, -154, -154,   57, -154, -154,   57,
     -154, -154, -154, -154,   57,   57,   57,   57, -154, -154,
     -154,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  218,   57, -154, -154
    },

    {
        9, -155, -155, -155, -155, -155,   57, -155, -155,   57,
     -155, -155, -155, -155,   57,   57,   57,   57, -155, -155,
     -155,   57,   57,   57,   57,   57,  219,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -155, -155

    },

    {
        9, -156, -156, -156, -156, -156,   57, -156, -156,   57,
     -156, -156, -156, -156,   57,   57,   57,   57, -156, -156,
     -156,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  220,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -156, -156
    },

    {
        9, -157, -157, -157, -157, -157,   57, -157, -157,   57,
     -157, -157, -157, -157,   57,   57,   57,   57, -157, -157,
     -157,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  221,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -157, -157

    },

    {
        9, -158, -158, -158, -158, -158,   57, -158, -158,   57,
     -158, -158, -158, -158,   57,   57,   57,   57, -158, -158,
     -158,   57,   57,   57,   57,   57,   57,   57,   57,  222,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -158, -158
    },

    {
        9, -159, -159, -159, -159, -159,   57, -159, -159,  159,
     -159, -159, -159, -159,   57,   57,   57,   57, -159, -159,
     -159,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -159, -159

    },

    {
        9, -160, -160, -160, -160, -160,   57, -160, -160,   57,
     -160, -160, -160, -160,   57,   57,   57,   57, -160, -160,
     -160,   57,   57,  223,   57,   57,  224,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -160, -160
    },

    {
        9, -161, -161, -161, -161, -161,   57, -161, -161,   57,
     -161, -161, -161, -161,   57,   57,   57,   57, -161, -161,
     -161,   57,   57,   57,   57,  225,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -161, -161

    },

    {
        9, -162, -162, -162, -162, -162,   57, -162, -162,   57,
     -162, -162, -162, -162,   57,   57,   57,   57, -162, -162,
     -162,   57,   57,   57,   57,  226,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -162, -162
    },

    {
        9, -163, -163, -163, -163, -163,   57, -163, -163,   57,
     -163, -163, -163, -163,   57,   57,   57,   57, -163, -163,
     -163,   57,   57,   57,   57,   57,   57,   57,   57,  227,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -163, -163

    },

    {
        9, -164, -164, -164, -164, -164,   57, -164, -164,   57,
     -164, -164, -164, -164,   57,   57,   57,   57, -164, -164,
     -164,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  228,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -164, -164
    },

    {
        9, -165, -165, -165, -165, -165,   57, -165, -165,   57,
     -165, -165, -165, -165,   57,   57,   57,   57, -165, -165,
     -165,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  229,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -165, -165

    },

    {
        9, -166, -166, -166, -166, -166,   57, -166, -166,   57,
     -166, -166, -166, -166,   57,   57,   57,   57, -166, -166,
     -166,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -166, -166
    },

    {
        9, -167, -167, -167, -167, -167,   57, -167, -167,   57,
     -167, -167, -167, -167,   57,   57,   57,   57, -167, -167,
     -167,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  230,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -167, -167

    },

    {
        9, -168, -168, -168, -168, -168,   57, -168, -168,   57,
     -168, -168, -168, -168,   57,   57,   57,   57, -168, -168,
     -168,   57,   57,   57,   57,   57,   57,   57,   57,  231,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -168, -168
    },

    {
        9, -169, -169, -169, -169, -169,   57, -169, -169,   57,
     -169, -169, -169, -169,   57,   57,   57,   57, -169, -169,
     -169,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -169, -169

    },

    {
        9, -170, -170, -170, -170, -170,   57, -170, -170,   57,
     -170, -170, -170, -170,   57,   57,   57,   57, -170, -170,
     -170,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  232,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -170, -170
    },

    {
        9, -171, -171, -171, -171, -171,   57, -171, -171,   57,
     -171, -171, -171, -171,   57,   57,   57,   57, -171, -171,
     -171,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  233,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -171, -171

    },

    {
        9, -172, -172, -172, -172, -172,   57, -172, -172,   57,
     -172, -172, -172, -172,   57,   57,   57,   57, -172, -172,
     -172,   57,   57,   57,   57,   57,   57,   57,  234,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -172, -172
    },

    {
        9, -173, -173, -173, -173, -173,   57, -173, -173,   57,
     -173, -173, -173, -173,   57,   57,   57,   57, -173, -173,
     -173,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  235,   57,
      236,   57,   57,   57,   57,   57,   57, -173, -173

    },

    {
        9, -174, -174, -174, -174, -174,   57, -174, -174,   57,
     -174, -174, -174, -174,   57,   57,   57,   57, -174, -174,
     -174,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -174, -174
    },

    {
        9, -175, -175, -175, -175, -175,   57, -175, -175,   57,
     -175, -175, -175, -175,   57,   57,   57,   57, -175, -175,
     -175,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      237,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -175, -175

    },

    {
        9, -176, -176, -176, -176, -176,   57, -176, -176,   57,
     -176, -176, -176, -176,   57,   57,   57,   57, -176, -176,
     -176,   57,   57,   57,   57,   57,  238,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      239,   57,   57,   57,   57,   57,   57, -176, -176
    },

    {
        9, -177, -177, -177, -177, -177,   57, -177, -177,   57,
     -177, -177, -177, -177,   57,   57,   57,   57, -177, -177,
     -177,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  240,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -177, -177

    },

    {
        9, -178, -178, -178, -178, -178,   57, -178, -178,   57,
     -178, -178, -178, -178,   57,   57,   57,   57, -178, -178,
     -178,   57,   57,   57,   57,   57,  241,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      242,   57,   57,   57,   57,   57,   57, -178, -178
    },

    {
        9, -179, -179, -179, -179, -179,   57, -179, -179,   57,
     -179, -179, -179, -179,   57,   57,   57,   57, -179, -179,
     -179,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  243,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -179, -179

    },

    {
        9, -180, -180, -180, -180, -180,   57, -180, -180,   57,
     -180, -180, -180, -180,   57,   57,   57,   57, -180, -180,
     -180,   57,   57,   57,   57,   57,  244,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -180, -180
    },

    {
        9, -181, -181, -181, -181, -181,   57, -181, -181,   57,
     -181, -181, -181, -181,   57,   57,   57,   57, -181, -181,
     -181,   57,   57,  245,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -181, -181

    },

    {
        9, -182, -182, -182, -182, -182,   57, -182, -182,   57,
     -182, -182, -182, -182,   57,   57,   57,   57, -182, -182,
     -182,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      246,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -182, -182
    },

    {
        9, -183, -183, -183, -183, -183,   57, -183, -183,   57,
     -183, -183, -183, -183,   57,   57,   57,   57, -183, -183,
     -183,   57,   57,   57,   57,   57,  247,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      248,   57,   57,   57,   57,   57,   57, -183, -183

    },

    {
        9, -184, -184, -184, -184, -184,   57, -184, -184,   57,
     -184, -184, -184, -184,   57,   57,   57,   57, -184, -184,
     -184,   57,   57,   57,   57,   57,  249,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      250,   57,   57,   57,   57,   57,   57, -184, -184
    },

    {
        9, -185, -185, -185, -185, -185,   57, -185, -185,   57,
     -185, -185, -185, -185,   57,   57,   57,   57, -185, -185,
     -185,   57,   57,   57,   57,   57,  251,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -185, -185

    },

    {
        9, -186, -186, -186, -186, -186,   57, -186, -186,   57,
     -186, -186, -186, -186,   57,   57,   57,   57, -186, -186,
     -186,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  252,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -186, -186
    },

    {
        9, -187, -187, -187, -187, -187,   57, -187, -187,   57,
     -187, -187, -187, -187,   57,   57,   57,   57, -187, -187,
     -187,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  253,   57,
       57,   57,   57,   57,   57,   57,   57, -187, -187

    },

    {
        9, -188, -188, -188, -188, -188,   57, -188, -188,   57,
     -188, -188, -188, -188,   57,   57,   57,   57, -188, -188,
     -188,   57,   57,   57,   57,   57,   57,   57,  254,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -188, -188
    },

    {
        9, -189, -189, -189, -189, -189,   57, -189, -189,   57,
     -189, -189, -189, -189,   57,   57,   57,   57, -189, -189,
     -189,   57,  255,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -189, -189

    },

    {
        9, -190, -190, -190, -190, -190,   57, -190, -190,   57,
     -190, -190, -190, -190,   57,   57,   57,   57, -190, -190,
     -190,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  256,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -190, -190
    },

    {
        9, -191, -191, -191, -191, -191,   57, -191, -191,   57,
     -191, -191, -191, -191,   57,   57,   57,   57, -191, -191,
     -191,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      257,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -191, -191

    },

    {
        9, -192, -192, -192, -192, -192,   57, -192, -192,   57,
     -192, -192, -192, -192,   57,   57,   57,   57, -192, -192,
     -192,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      258,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -192, -192
    },

    {
        9, -193, -193, -193, -193, -193,   57, -193, -193,   57,
     -193, -193, -193, -193,   57,   57,   57,   57, -193, -193,
     -193,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  259,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -193, -193

    },

    {
        9, -194, -194, -194, -194, -194,   57, -194, -194,   57,
     -194, -194, -194, -194,   57,   57,   57,   57, -194, -194,
     -194,   57,  260,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -194, -194
    },

    {
        9, -195, -195, -195, -195, -195,   57, -195, -195,   57,
     -195, -195, -195, -195,   57,   57,   57,   57, -195, -195,
     -195,   57,   57,   57,   57,   57,  261,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -195, -195

    },

    {
        9, -196, -196, -196, -196, -196,   57, -196, -196,   57,
     -196, -196, -196, -196,   57,   57,   57,   57, -196, -196,
     -196,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -196, -196
    },

    {
        9, -197, -197, -197, -197, -197,   57, -197, -197,   57,
     -197, -197, -197, -197,   57,   57,   57,   57, -197, -197,
     -197,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  262,   57,   57,   57,   57,   57, -197, -197

    },

    {
        9, -198, -198, -198, -198, -198,   57, -198, -198,   57,
     -198, -198, -198, -198,   57,   57,   57,   57, -198, -198,
     -198,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -198, -198
    },

    {
        9, -199, -199, -199, -199, -199,   57, -199, -199,   57,
     -199, -199, -199, -199,   57,   57,   57,   57, -199, -199,
     -199,   57,   57,   57,   57,   57,   57,   57,   57,  263,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -199, -199

    },

    {
        9, -200, -200, -200, -200, -200,   57, -200, -200,   57,
     -200, -200, -200, -200,   57,   57,   57,   57, -200, -200,
     -200,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      264,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -200, -200
    },

    {
        9, -201, -201, -201, -201, -201,   57, -201, -201,   57,
     -201, -201, -201, -201,   57,   57,   57,   57, -201, -201,
     -201,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  265,   57,   57,   57,   57,   57, -201, -201

    },

    {
        9, -202, -202, -202, -202, -202,   57, -202, -202,   57,
     -202, -202, -202, -202,   57,   57,   57,   57, -202, -202,
     -202,   57,   57,   57,  266,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -202, -202
    },

    {
        9, -203, -203, -203, -203, -203,   57, -203, -203,   57,
     -203, -203, -203, -203,   57,   57,   57,   57, -203, -203,
     -203,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -203, -203

    },

    {
        9, -204, -204, -204, -204, -204,   57, -204, -204,   57,
     -204, -204, -204, -204,   57,   57,   57,   57, -204, -204,
     -204,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  267,
       57,   57,   57,   57,   57,   57,   57, -204, -204
    },

    {
        9, -205, -205, -205, -205, -205,   57, -205, -205,   57,
     -205, -205, -205, -205,   57,   57,   57,   57, -205, -205,
     -205,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  268,
       57,   57,   57,   57,   57,   57,   57, -205, -205

    },

    {
        9, -206, -206, -206, -206, -206,   57, -206, -206,   57,
     -206, -206, -206, -206,   57,   57,   57,   57, -206, -206,
     -206,   57,  269,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -206, -206
    },

    {
        9, -207, -207, -207, -207, -207,   57, -207, -207,   57,
     -207, -207, -207, -207,   57,   57,   57,   57, -207, -207,
     -207,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      270,   57,   57,   57,   57,   57,   57, -207, -207

    },

    {
        9, -208, -208, -208, -208, -208,   57, -208, -208,   57,
     -208, -208, -208, -208,   57,   57,   57,   57, -208, -208,
     -208,   57,   57,   57,  271,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -208, -208
    },

    {
        9, -209, -209, -209, -209, -209,   57, -209, -209,   57,
     -209, -209, -209, -209,   57,   57,   57,   57, -209, -209,
     -209,  272,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -209, -209

    },

    {
        9, -210, -210, -210, -210, -210,   57, -210, -210,   57,
     -210, -210, -210, -210,   57,   57,   57,   57, -210, -210,
     -210,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  273,
       57,   57,   57,   57,   57,   57,   57, -210, -210
    },

    {
        9, -211, -211, -211, -211, -211,   57, -211, -211,   57,
     -211, -211, -211, -211,   57,   57,   57,   57, -211, -211,
     -211,   57,   57,   57,  274,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -211, -211

    },

    {
        9, -212, -212, -212, -212, -212,   57, -212, -212,   57,
     -212, -212, -212, -212,   57,   57,   57,   57, -212, -212,
     -212,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  275,   57,   57,   57,   57,   57, -212, -212
    },

    {
        9, -213, -213, -213, -213, -213,   57, -213, -213,   57,
     -213, -213, -213, -213,   57,   57,   57,   57, -213, -213,
     -213,   57,   57,   57,   57,   57,  276,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -213, -213

    },

    {
        9, -214, -214, -214, -214, -214,   57, -214, -214,   57,
     -214, -214, -214, -214,   57,   57,   57,   57, -214, -214,
     -214,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -214, -214
    },

    {
        9, -215, -215, -215, -215, -215,   57, -215, -215,   57,
     -215, -215, -215, -215,   57,   57,   57,   57, -215, -215,
     -215,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  277,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -215, -215

    },

    {
        9, -216, -216, -216, -216, -216,   57, -216, -216,   57,
     -216, -216, -216, -216,   57,   57,   57,   57, -216, -216,
     -216,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      278,   57,   57,   57,   57,   57,   57, -216, -216
    },

    {
        9, -217, -217, -217, -217, -217,   57, -217, -217,   57,
     -217, -217, -217, -217,   57,   57,   57,   57, -217, -217,
     -217,  279,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -217, -217

    },

    {
        9, -218, -218, -218, -218, -218,   57, -218, -218,   57,
     -218, -218, -218, -218,   57,   57,   57,   57, -218, -218,
     -218,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -218, -218
    },

    {
        9, -219, -219, -219, -219, -219,   57, -219, -219,   57,
     -219, -219, -219, -219,   57,   57,   57,   57, -219, -219,
     -219,   57,   57,   57,  280,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -219, -219

    },

    {
        9, -220, -220, -220, -220, -220,   57, -220, -220,   57,
     -220, -220, -220, -220,   57,   57,   57,   57, -220, -220,
     -220,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  281,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -220, -220
    },

    {
        9, -221, -221, -221, -221, -221,   57, -221, -221,   57,
     -221, -221, -221, -221,   57,   57,   57,   57, -221, -221,
     -221,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  282,
       57,   57,   57,   57,   57,   57,   57, -221, -221

    },

    {
        9, -222, -222, -222, -222, -222,   57, -222, -222,   57,
     -222, -222, -222, -222,   57,   57,   57,   57, -222, -222,
     -222,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  283,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -222, -222
    },

    {
        9, -223, -223, -223, -223, -223,   57, -223, -223,   57,
     -223, -223, -223, -223,   57,   57,   57,   57, -223, -223,
     -223,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  284,   57,   57,   57,   57, -223, -223

    },

    {
        9, -224, -224, -224, -224, -224,   57, -224, -224,   57,
     -224, -224, -224, -224,   57,   57,   57,   57, -224, -224,
     -224,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  285,   57,   57, -224, -224
    },

    {
        9, -225, -225, -225, -225, -225,   57, -225, -225,   57,
     -225, -225, -225, -225,   57,   57,   57,   57, -225, -225,
     -225,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -225, -225

    },

    {
        9, -226, -226, -226, -226, -226,   57, -226, -226,   57,
     -226, -226, -226, -226,   57,   57,   57,   57, -226, -226,
     -226,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -226, -226
    },

    {
        9, -227, -227, -227, -227, -227,   57, -227, -227,   57,
     -227, -227, -227, -227,   57,   57,   57,   57, -227, -227,
     -227,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  286,   57,
       57,   57,   57,   57,   57,   57,   57, -227, -227

    },

    {
        9, -228, -228, -228, -228, -228,   57, -228, -228,   57,
     -228, -228, -228, -228,   57,   57,   57,   57, -228, -228,
     -228,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  287,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -228, -228
    },

    {
        9, -229, -229, -229, -229, -229,   57, -229, -229,   57,
     -229, -229, -229, -229,   57,   57,   57,   57, -229, -229,
     -229,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -229, -229

    },

    {
        9, -230, -230, -230, -230, -230,   57, -230, -230,   57,
     -230, -230, -230, -230,   57,   57,   57,   57, -230, -230,
     -230,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -230, -230
    },

    {
        9, -231, -231, -231, -231, -231,   57, -231, -231,   57,
     -231, -231, -231, -231,   57,   57,   57,   57, -231, -231,
     -231,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  288,   57,
       57,   57,   57,   57,   57,   57,   57, -231, -231

    },

    {
        9, -232, -232, -232, -232, -232,   57, -232, -232,   57,
     -232, -232, -232, -232,   57,   57,   57,   57, -232, -232,
     -232,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -232, -232
    },

    {
        9, -233, -233, -233, -233, -233,   57, -233, -233,   57,
     -233, -233, -233, -233,   57,   57,   57,   57, -233, -233,
     -233,   57,   57,   57,   57,  289,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -233, -233

    },

    {
        9, -234, -234, -234, -234, -234,   57, -234, -234,   57,
     -234, -234, -234, -234,   57,   57,   57,   57, -234, -234,
     -234,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -234, -234
    },

    {
        9, -235, -235, -235, -235, -235,   57, -235, -235,   57,
     -235, -235, -235, -235,   57,   57,   57,   57, -235, -235,
     -235,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -235, -235

    },

    {
        9, -236, -236, -236, -236, -236,   57, -236, -236,   57,
     -236, -236, -236, -236,   57,   57,   57,   57, -236, -236,
     -236,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -236, -236
    },

    {
        9, -237, -237, -237, -237, -237,   57, -237, -237,   57,
     -237, -237, -237, -237,   57,   57,   57,   57, -237, -237,
     -237,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  290,   57,   57,   57,   57, -237, -237

    },

    {
        9, -238, -238, -238, -238, -238,   57, -238, -238,   57,
     -238, -238, -238, -238,   57,   57,   57,   57, -238, -238,
     -238,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  291,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -238, -238
    },

    {
        9, -239, -239, -239, -239, -239,   57, -239, -239,   57,
     -239, -239, -239, -239,   57,   57,   57,   57, -239, -239,
     -239,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -239, -239

    },

    {
        9, -240, -240, -240, -240, -240,   57, -240, -240,   57,
     -240, -240, -240, -240,   57,   57,   57,   57, -240, -240,
     -240,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -240, -240
    },

    {
        9, -241, -241, -241, -241, -241,   57, -241, -241,   57,
     -241, -241, -241, -241,   57,   57,   57,   57, -241, -241,
     -241,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  292,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -241, -241

    },

    {
        9, -242, -242, -242, -242, -242,   57, -242, -242,   57,
     -242, -242, -242, -242,   57,   57,   57,   57, -242, -242,
     -242,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -242, -242
    },

    {
        9, -243, -243, -243, -243, -243,   57, -243, -243,   57,
     -243, -243, -243, -243,   57,   57,   57,   57, -243, -243,
     -243,   57,   57,   57,   57,  293,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -243, -243

    },

    {
        9, -244, -244, -244, -244, -244,   57, -244, -244,   57,
     -244, -244, -244, -244,   57,   57,   57,   57, -244, -244,
     -244,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  294,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -244, -244
    },

    {
        9, -245, -245, -245, -245, -245,   57, -245, -245,   57,
     -245, -245, -245, -245,   57,   57,   57,   57, -245, -245,
     -245,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -245, -245

    },

    {
        9, -246, -246, -246, -246, -246,   57, -246, -246,   57,
     -246, -246, -246, -246,   57,   57,   57,   57, -246, -246,
     -246,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  295,   57,   57,   57,   57, -246, -246
    },

    {
        9, -247, -247, -247, -247, -247,   57, -247, -247,   57,
     -247, -247, -247, -247,   57,   57,   57,   57, -247, -247,
     -247,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  296,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -247, -247

    },

    {
        9, -248, -248, -248, -248, -248,   57, -248, -248,   57,
     -248, -248, -248, -248,   57,   57,   57,   57, -248, -248,
     -248,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -248, -248
    },

    {
        9, -249, -249, -249, -249, -249,   57, -249, -249,   57,
     -249, -249, -249, -249,   57,   57,   57,   57, -249, -249,
     -249,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  297,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -249, -249

    },

    {
        9, -250, -250, -250, -250, -250,   57, -250, -250,   57,
     -250, -250, -250, -250,   57,   57,   57,   57, -250, -250,
     -250,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -250, -250
    },

    {
        9, -251, -251, -251, -251, -251,   57, -251, -251,   57,
     -251, -251, -251, -251,   57,   57,   57,   57, -251, -251,
     -251,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  298,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -251, -251

    },

    {
        9, -252, -252, -252, -252, -252,   57, -252, -252,   57,
     -252, -252, -252, -252,   57,   57,   57,   57, -252, -252,
     -252,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  299,   57,
       57,   57,   57,   57,   57,   57,   57, -252, -252
    },

    {
        9, -253, -253, -253, -253, -253,   57, -253, -253,   57,
     -253, -253, -253, -253,   57,   57,   57,   57, -253, -253,
     -253,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -253, -253

    },

    {
        9, -254, -254, -254, -254, -254,   57, -254, -254,   57,
     -254, -254, -254, -254,   57,   57,   57,   57, -254, -254,
     -254,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  300,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -254, -254
    },

    {
        9, -255, -255, -255, -255, -255,   57, -255, -255,   57,
     -255, -255, -255, -255,   57,   57,   57,   57, -255, -255,
     -255,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      301,   57,   57,   57,   57,   57,   57, -255, -255

    },

    {
        9, -256, -256, -256, -256, -256,   57, -256, -256,   57,
     -256, -256, -256, -256,   57,   57,   57,   57, -256, -256,
     -256,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      302,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -256, -256
    },

    {
        9, -257, -257, -257, -257, -257,   57, -257, -257,   57,
     -257, -257, -257, -257,   57,   57,   57,   57, -257, -257,
     -257,   57,   57,   57,  303,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -257, -257

    },

    {
        9, -258, -258, -258, -258, -258,   57, -258, -258,   57,
     -258, -258, -258, -258,   57,   57,   57,   57, -258, -258,
     -258,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  304,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -258, -258
    },

    {
        9, -259, -259, -259, -259, -259,   57, -259, -259,   57,
     -259, -259, -259, -259,   57,   57,   57,   57, -259, -259,
     -259,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  305,
       57,   57,   57,   57,   57,   57,   57, -259, -259

    },

    {
        9, -260, -260, -260, -260, -260,   57, -260, -260,   57,
     -260, -260, -260, -260,   57,   57,   57,   57, -260, -260,
     -260,   57,   57,   57,  306,   57,   57,  307,   57,   57,
       57,   57,   57,   57,   57,   57,  308,   57,   57,  309,
       57,   57,   57,   57,   57,   57,   57, -260, -260
    },

    {
        9, -261, -261, -261, -261, -261,   57, -261, -261,   57,
     -261, -261, -261, -261,   57,   57,   57,   57, -261, -261,
     -261,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -261, -261

    },

    {
        9, -262, -262, -262, -262, -262,   57, -262, -262,   57,
     -262, -262, -262, -262,   57,   57,   57,   57, -262, -262,
     -262,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  310,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -262, -262
    },

    {
        9, -263, -263, -263, -263, -263,   57, -263, -263,   57,
     -263, -263, -263, -263,   57,   57,   57,   57, -263, -263,
     -263,   57,   57,   57,   57,   57,  311,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -263, -263

    },

    {
        9, -264, -264, -264, -264, -264,   57, -264, -264,   57,
     -264, -264, -264, -264,   57,   57,   57,   57, -264, -264,
     -264,   57,   57,   57,   57,   57,  312,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -264, -264
    },

    {
        9, -265, -265, -265, -265, -265,   57, -265, -265,   57,
     -265, -265, -265, -265,   57,   57,   57,   57, -265, -265,
     -265,   57,  313,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -265, -265

    },

    {
        9, -266, -266, -266, -266, -266,   57, -266, -266,   57,
     -266, -266, -266, -266,   57,   57,   57,   57, -266, -266,
     -266,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -266, -266
    },

    {
        9, -267, -267, -267, -267, -267,   57, -267, -267,   57,
     -267, -267, -267, -267,   57,   57,   57,   57, -267, -267,
     -267,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -267, -267

    },

    {
        9, -268, -268, -268, -268, -268,   57, -268, -268,   57,
     -268, -268, -268, -268,   57,   57,   57,   57, -268, -268,
     -268,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -268, -268
    },

    {
        9, -269, -269, -269, -269, -269,   57, -269, -269,   57,
     -269, -269, -269, -269,   57,   57,   57,   57, -269, -269,
     -269,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      314,   57,   57,   57,   57,   57,   57, -269, -269

    },

    {
        9, -270, -270, -270, -270, -270,   57, -270, -270,   57,
     -270, -270, -270, -270,   57,   57,   57,   57, -270, -270,
     -270,   57,   57,   57,   57,   57,  315,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -270, -270
    },

    {
        9, -271, -271, -271, -271, -271,   57, -271, -271,   57,
     -271, -271, -271, -271,   57,   57,   57,   57, -271, -271,
     -271,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      316,   57,   57,   57,   57,   57,   57, -271, -271

    },

    {
        9, -272, -272, -272, -272, -272,   57, -272, -272,   57,
     -272, -272, -272, -272,   57,   57,   57,   57, -272, -272,
     -272,   57,   57,   57,   57,   57,  317,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -272, -272
    },

    {
        9, -273, -273, -273, -273, -273,   57, -273, -273,   57,
     -273, -273, -273, -273,   57,   57,   57,   57, -273, -273,
     -273,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -273, -273

    },

    {
        9, -274, -274, -274, -274, -274,   57, -274, -274,   57,
     -274, -274, -274, -274,   57,   57,   57,   57, -274, -274,
     -274,   57,   57,   57,   57,   57,  318,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -274, -274
    },

    {
        9, -275, -275, -275, -275, -275,   57, -275, -275,   57,
     -275, -275, -275, -275,   57,   57,   57,   57, -275, -275,
     -275,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  319,
       57,   57,   57,   57,   57,   57,   57, -275, -275

    },

    {
        9, -276, -276, -276, -276, -276,   57, -276, -276,   57,
     -276, -276, -276, -276,   57,   57,   57,   57, -276, -276,
     -276,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -276, -276
    },

    {
        9, -277, -277, -277, -277, -277,   57, -277, -277,   57,
     -277, -277, -277, -277,   57,   57,   57,   57, -277, -277,
     -277,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  320,   57,   57,   57, -277, -277

    },

    {
        9, -278, -278, -278, -278, -278,   57, -278, -278,   57,
     -278, -278, -278, -278,   57,   57,   57,   57, -278, -278,
     -278,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -278, -278
    },

    {
        9, -279, -279, -279, -279, -279,   57, -279, -279,   57,
     -279, -279, -279, -279,   57,   57,   57,   57, -279, -279,
     -279,   57,   57,   57,   57,   57,  321,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -279, -279

    },

    {
        9, -280, -280, -280, -280, -280,   57, -280, -280,   57,
     -280, -280, -280, -280,   57,   57,   57,   57, -280, -280,
     -280,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -280, -280
    },

    {
        9, -281, -281, -281, -281, -281,   57, -281, -281,   57,
     -281, -281, -281, -281,   57,   57,   57,   57, -281, -281,
     -281,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      322,   57,   57,   57,   57,   57,   57, -281, -281

    },

    {
        9, -282, -282, -282, -282, -282,   57, -282, -282,   57,
     -282, -282, -282, -282,   57,   57,   57,   57, -282, -282,
     -282,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -282, -282
    },

    {
        9, -283, -283, -283, -283, -283,   57, -283, -283,   57,
     -283, -283, -283, -283,   57,   57,   57,   57, -283, -283,
     -283,   57,  323,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -283, -283

    },

    {
        9, -284, -284, -284, -284, -284,   57, -284, -284,   57,
     -284, -284, -284, -284,   57,   57,   57,   57, -284, -284,
     -284,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -284, -284
    },

    {
        9, -285, -285, -285, -285, -285,   57, -285, -285,   57,
     -285, -285, -285, -285,   57,   57,   57,   57, -285, -285,
     -285,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      324,   57,   57,   57,   57,   57,   57, -285, -285

    },

    {
        9, -286, -286, -286, -286, -286,   57, -286, -286,   57,
     -286, -286, -286, -286,   57,   57,   57,   57, -286, -286,
     -286,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -286, -286
    },

    {
        9, -287, -287, -287, -287, -287,   57, -287, -287,   57,
     -287, -287, -287, -287,   57,   57,   57,   57, -287, -287,
     -287,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -287, -287

    },

    {
        9, -288, -288, -288, -288, -288,   57, -288, -288,   57,
     -288, -288, -288, -288,   57,   57,   57,   57, -288, -288,
     -288,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -288, -288
    },

    {
        9, -289, -289, -289, -289, -289,   57, -289, -289,   57,
     -289, -289, -289, -289,   57,   57,   57,   57, -289, -289,
     -289,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -289, -289

    },

    {
        9, -290, -290, -290, -290, -290,   57, -290, -290,   57,
     -290, -290, -290, -290,   57,   57,   57,   57, -290, -290,
     -290,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -290, -290
    },

    {
        9, -291, -291, -291, -291, -291,   57, -291, -291,   57,
     -291, -291, -291, -291,   57,   57,   57,   57, -291, -291,
     -291,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -291, -291

    },

    {
        9, -292, -292, -292, -292, -292,   57, -292, -292,   57,
     -292, -292, -292, -292,   57,   57,   57,   57, -292, -292,
     -292,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -292, -292
    },

    {
        9, -293, -293, -293, -293, -293,   57, -293, -293,   57,
     -293, -293, -293, -293,   57,   57,   57,   57, -293, -293,
     -293,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -293, -293

    },

    {
        9, -294, -294, -294, -294, -294,   57, -294, -294,   57,
     -294, -294, -294, -294,   57,   57,   57,   57, -294, -294,
     -294,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -294, -294
    },

    {
        9, -295, -295, -295, -295, -295,   57, -295, -295,   57,
     -295, -295, -295, -295,   57,   57,   57,   57, -295, -295,
     -295,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -295, -295

    },

    {
        9, -296, -296, -296, -296, -296,   57, -296, -296,   57,
     -296, -296, -296, -296,   57,   57,   57,   57, -296, -296,
     -296,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -296, -296
    },

    {
        9, -297, -297, -297, -297, -297,   57, -297, -297,   57,
     -297, -297, -297, -297,   57,   57,   57,   57, -297, -297,
     -297,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -297, -297

    },

    {
        9, -298, -298, -298, -298, -298,   57, -298, -298,   57,
     -298, -298, -298, -298,   57,   57,   57,   57, -298, -298,
     -298,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -298, -298
    },

    {
        9, -299, -299, -299, -299, -299,   57, -299, -299,   57,
     -299, -299, -299, -299,   57,   57,   57,   57, -299, -299,
     -299,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -299, -299

    },

    {
        9, -300, -300, -300, -300, -300,   57, -300, -300,   57,
     -300, -300, -300, -300,   57,   57,   57,   57, -300, -300,
     -300,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  325,   57,
       57,   57,   57,   57,   57,   57,   57, -300, -300
    },

    {
        9, -301, -301, -301, -301, -301,   57, -301, -301,   57,
     -301, -301, -301, -301,   57,   57,   57,   57, -301, -301,
     -301,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -301, -301

    },

    {
        9, -302, -302, -302, -302, -302,   57, -302, -302,   57,
     -302, -302, -302, -302,   57,   57,   57,   57, -302, -302,
     -302,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      326,   57,   57,   57,   57,   57,   57, -302, -302
    },

    {
        9, -303, -303, -303, -303, -303,   57, -303, -303,   57,
     -303, -303, -303, -303,   57,   57,   57,   57, -303, -303,
     -303,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  327,   57,   57,   57,   57,   57, -303, -303

    },

    {
        9, -304, -304, -304, -304, -304,   57, -304, -304,   57,
     -304, -304, -304, -304,   57,   57,   57,   57, -304, -304,
     -304,   57,   57,   57,  328,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -304, -304
    },

    {
        9, -305, -305, -305, -305, -305,   57, -305, -305,   57,
     -305, -305, -305, -305,   57,   57,   57,   57, -305, -305,
     -305,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      329,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -305, -305

    },

    {
        9, -306, -306, -306, -306, -306,   57, -306, -306,   57,
     -306, -306, -306, -306,   57,   57,   57,   57, -306, -306,
     -306,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      330,   57,   57,   57,   57,   57,   57, -306, -306
    },

    {
        9, -307, -307, -307, -307, -307,   57, -307, -307,   57,
     -307, -307, -307, -307,   57,   57,   57,   57, -307, -307,
     -307,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  331,   57,   57,   57,   57,   57, -307, -307

    },

    {
        9, -308, -308, -308, -308, -308,   57, -308, -308,   57,
     -308, -308, -308, -308,   57,   57,   57,   57, -308, -308,
     -308,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  332,   57,
       57,   57,   57,   57,   57,   57,   57, -308, -308
    },

    {
        9, -309, -309, -309, -309, -309,   57, -309, -309,   57,
     -309, -309, -309, -309,   57,   57,   57,   57, -309, -309,
     -309,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  333,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -309, -309

    },

    {
        9, -310, -310, -310, -310, -310,   57, -310, -310,   57,
     -310, -310, -310, -310,   57,   57,   57,   57, -310, -310,
     -310,   57,  334,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -310, -310
    },

    {
        9, -311, -311, -311, -311, -311,   57, -311, -311,   57,
     -311, -311, -311, -311,   57,   57,   57,   57, -311, -311,
     -311,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  335,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -311, -311

    },

    {
        9, -312, -312, -312, -312, -312,   57, -312, -312,   57,
     -312, -312, -312, -312,   57,   57,   57,   57, -312, -312,
     -312,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  336,
       57,   57,   57,   57,   57,   57,   57, -312, -312
    },

    {
        9, -313, -313, -313, -313, -313,   57, -313, -313,   57,
     -313, -313, -313, -313,   57,   57,   57,   57, -313, -313,
     -313,   57,   57,   57,   57,   57,   57,   57,  337,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -313, -313

    },

    {
        9, -314, -314, -314, -314, -314,   57, -314, -314,   57,
     -314, -314, -314, -314,   57,   57,   57,   57, -314, -314,
     -314,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -314, -314
    },

    {
        9, -315, -315, -315, -315, -315,   57, -315, -315,   57,
     -315, -315, -315, -315,   57,   57,   57,   57, -315, -315,
     -315,  338,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -315, -315

    },

    {
        9, -316, -316, -316, -316, -316,   57, -316, -316,   57,
     -316, -316, -316, -316,   57,   57,   57,   57, -316, -316,
     -316,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -316, -316
    },

    {
        9, -317, -317, -317, -317, -317,   57, -317, -317,   57,
     -317, -317, -317, -317,   57,   57,   57,   57, -317, -317,
     -317,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  339,   57,   57, -317, -317

    },

    {
        9, -318, -318, -318, -318, -318,   57, -318, -318,   57,
     -318, -318, -318, -318,   57,   57,   57,   57, -318, -318,
     -318,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -318, -318
    },

    {
        9, -319, -319, -319, -319, -319,   57, -319, -319,   57,
     -319, -319, -319, -319,   57,   57,   57,   57, -319, -319,
     -319,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -319, -319

    },

    {
        9, -320, -320, -320, -320, -320,   57, -320, -320,   57,
     -320, -320, -320, -320,   57,   57,   57,   57, -320, -320,
     -320,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  340,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -320, -320
    },

    {
        9, -321, -321, -321, -321, -321,   57, -321, -321,   57,
     -321, -321, -321, -321,   57,   57,   57,   57, -321, -321,
     -321,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  341,   57,   57, -321, -321

    },

    {
        9, -322, -322, -322, -322, -322,   57, -322, -322,   57,
     -322, -322, -322, -322,   57,   57,   57,   57, -322, -322,
     -322,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      342,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -322, -322
    },

    {
        9, -323, -323, -323, -323, -323,   57, -323, -323,   57,
     -323, -323, -323, -323,   57,   57,   57,   57, -323, -323,
     -323,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  343,   57,
       57,   57,   57,   57,   57,   57,   57, -323, -323

    },

    {
        9, -324, -324, -324, -324, -324,   57, -324, -324,   57,
     -324, -324, -324, -324,   57,   57,   57,   57, -324, -324,
     -324,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  344,   57,
       57,   57,   57,   57,   57,   57,   57, -324, -324
    },

    {
        9, -325, -325, -325, -325, -325,   57, -325, -325,   57,
     -325, -325, -325, -325,   57,   57,   57,   57, -325, -325,
     -325,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  345,   57, -325, -325

    },

    {
        9, -326, -326, -326, -326, -326,   57, -326, -326,   57,
     -326, -326, -326, -326,   57,   57,   57,   57, -326, -326,
     -326,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      346,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -326, -326
    },

    {
        9, -327, -327, -327, -327, -327,   57, -327, -327,   57,
     -327, -327, -327, -327,   57,   57,   57,   57, -327, -327,
     -327,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  347,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -327, -327

    },

    {
        9, -328, -328, -328, -328, -328,   57, -328, -328,   57,
     -328, -328, -328, -328,   57,   57,   57,   57, -328, -328,
     -328,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      348,   57,   57,   57,   57,   57,   57, -328, -328
    },

    {
        9, -329, -329, -329, -329, -329,   57, -329, -329,   57,
     -329, -329, -329, -329,   57,   57,   57,   57, -329, -329,
     -329,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  349,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -329, -329

    },

    {
        9, -330, -330, -330, -330, -330,   57, -330, -330,   57,
     -330, -330, -330, -330,   57,   57,   57,   57, -330, -330,
     -330,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -330, -330
    },

    {
        9, -331, -331, -331, -331, -331,   57, -331, -331,   57,
     -331, -331, -331, -331,   57,   57,   57,   57, -331, -331,
     -331,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  350,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -331, -331

    },

    {
        9, -332, -332, -332, -332, -332,   57, -332, -332,   57,
     -332, -332, -332, -332,   57,   57,   57,   57, -332, -332,
     -332,   57,   57,   57,   57,   57,  351,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -332, -332
    },

    {
        9, -333, -333, -333, -333, -333,   57, -333, -333,   57,
     -333, -333, -333, -333,   57,   57,   57,   57, -333, -333,
     -333,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  352,   57,
       57,   57,   57,   57,   57,   57,   57, -333, -333

    },

    {
        9, -334, -334, -334, -334, -334,   57, -334, -334,   57,
     -334, -334, -334, -334,   57,   57,   57,   57, -334, -334,
     -334,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -334, -334
    },

    {
        9, -335, -335, -335, -335, -335,   57, -335, -335,   57,
     -335, -335, -335, -335,   57,   57,   57,   57, -335, -335,
     -335,  353,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -335, -335

    },

    {
        9, -336, -336, -336, -336, -336,   57, -336, -336,   57,
     -336, -336, -336, -336,   57,   57,   57,   57, -336, -336,
     -336,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -336, -336
    },

    {
        9, -337, -337, -337, -337, -337,   57, -337, -337,   57,
     -337, -337, -337, -337,   57,   57,   57,   57, -337, -337,
     -337,   57,   57,   57,   57,   57,  354,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -337, -337

    },

    {
        9, -338, -338, -338, -338, -338,   57, -338, -338,   57,
     -338, -338, -338, -338,   57,   57,   57,   57, -338, -338,
     -338,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  355,   57,   57,   57,   57,   57,  356,   57,
       57,   57,   57,   57,   57,   57,   57, -338, -338
    },

    {
        9, -339, -339, -339, -339, -339,   57, -339, -339,   57,
     -339, -339, -339, -339,   57,   57,   57,   57, -339, -339,
     -339,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      357,   57,   57,   57,   57,   57,   57, -339, -339

    },

    {
        9, -340, -340, -340, -340, -340,   57, -340, -340,   57,
     -340, -340, -340, -340,   57,   57,   57,   57, -340, -340,
     -340,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -340, -340
    },

    {
        9, -341, -341, -341, -341, -341,   57, -341, -341,   57,
     -341, -341, -341, -341,   57,   57,   57,   57, -341, -341,
     -341,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      358,   57,   57,   57,   57,   57,   57, -341, -341

    },

    {
        9, -342, -342, -342, -342, -342,   57, -342, -342,   57,
     -342, -342, -342, -342,   57,   57,   57,   57, -342, -342,
     -342,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  359,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -342, -342
    },

    {
        9, -343, -343, -343, -343, -343,   57, -343, -343,   57,
     -343, -343, -343, -343,   57,   57,   57,   57, -343, -343,
     -343,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  360,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -343, -343

    },

    {
        9, -344, -344, -344, -344, -344,   57, -344, -344,   57,
     -344, -344, -344, -344,   57,   57,   57,   57, -344, -344,
     -344,   57,  361,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -344, -344
    },

    {
        9, -345, -345, -345, -345, -345,   57, -345, -345,   57,
     -345, -345, -345, -345,   57,   57,   57,   57, -345, -345,
     -345,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -345, -345

    },

    {
        9, -346, -346, -346, -346, -346,   57, -346, -346,   57,
     -346, -346, -346, -346,   57,   57,   57,   57, -346, -346,
     -346,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  362,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -346, -346
    },

    {
        9, -347, -347, -347, -347, -347,   57, -347, -347,   57,
     -347, -347, -347, -347,   57,   57,   57,   57, -347, -347,
     -347,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      363,   57,   57,   57,   57,   57,   57, -347, -347

    },

    {
        9, -348, -348, -348, -348, -348,   57, -348, -348,   57,
     -348, -348, -348, -348,   57,   57,   57,   57, -348, -348,
     -348,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -348, -348
    },

    {
        9, -349, -349, -349, -349, -349,   57, -349, -349,   57,
     -349, -349, -349, -349,   57,   57,   57,   57, -349, -349,
     -349,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  364,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -349, -349

    },

    {
        9, -350, -350, -350, -350, -350,   57, -350, -350,   57,
     -350, -350, -350, -350,   57,   57,   57,   57, -350, -350,
     -350,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  365,
       57,   57,   57,   57,   57,   57,   57, -350, -350
    },

    {
        9, -351, -351, -351, -351, -351,   57, -351, -351,   57,
     -351, -351, -351, -351,   57,   57,   57,   57, -351, -351,
     -351,   57,   57,   57,   57,  366,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -351, -351

    },

    {
        9, -352, -352, -352, -352, -352,   57, -352, -352,   57,
     -352, -352, -352, -352,   57,   57,   57,   57, -352, -352,
     -352,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      367,   57,   57,   57,   57,   57,   57, -352, -352
    },

    {
        9, -353, -353, -353, -353, -353,   57, -353, -353,   57,
     -353, -353, -353, -353,   57,   57,   57,   57, -353, -353,
     -353,   57,   57,   57,   57,   57,  368,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -353, -353

    },

    {
        9, -354, -354, -354, -354, -354,   57, -354, -354,   57,
     -354, -354, -354, -354,   57,   57,   57,   57, -354, -354,
     -354,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -354, -354
    },

    {
        9, -355, -355, -355, -355, -355,   57, -355, -355,   57,
     -355, -355, -355, -355,   57,   57,   57,   57, -355, -355,
     -355,   57,   57,   57,   57,   57,  369,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -355, -355

    },

    {
        9, -356, -356, -356, -356, -356,   57, -356, -356,   57,
     -356, -356, -356, -356,   57,   57,   57,   57, -356, -356,
     -356,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      370,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -356, -356
    },

    {
        9, -357, -357, -357, -357, -357,   57, -357, -357,   57,
     -357, -357, -357, -357,   57,   57,   57,   57, -357, -357,
     -357,   57,   57,   57,   57,   57,  371,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -357, -357

    },

    {
        9, -358, -358, -358, -358, -358,   57, -358, -358,   57,
     -358, -358, -358, -358,   57,   57,   57,   57, -358, -358,
     -358,   57,   57,   57,   57,   57,  372,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -358, -358
    },

    {
        9, -359, -359, -359, -359, -359,   57, -359, -359,   57,
     -359, -359, -359, -359,   57,   57,   57,   57, -359, -359,
     -359,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  373,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -359, -359

    },

    {
        9, -360, -360, -360, -360, -360,   57, -360, -360,   57,
     -360, -360, -360, -360,   57,   57,   57,   57, -360, -360,
     -360,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -360, -360
    },

    {
        9, -361, -361, -361, -361, -361,   57, -361, -361,   57,
     -361, -361, -361, -361,   57,   57,   57,   57, -361, -361,
     -361,   57,   57,   57,  374,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -361, -361

    },

    {
        9, -362, -362, -362, -362, -362,   57, -362, -362,   57,
     -362, -362, -362, -362,   57,   57,   57,   57, -362, -362,
     -362,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  375,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -362, -362
    },

    {
        9, -363, -363, -363, -363, -363,   57, -363, -363,   57,
     -363, -363, -363, -363,   57,   57,   57,   57, -363, -363,
     -363,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  376,   57, -363, -363

    },

    {
        9, -364, -364, -364, -364, -364,   57, -364, -364,   57,
     -364, -364, -364, -364,   57,   57,   57,   57, -364, -364,
     -364,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  377,
       57,   57,   57,   57,   57,   57,   57, -364, -364
    },

    {
        9, -365, -365, -365, -365, -365,   57, -365, -365,   57,
     -365, -365, -365, -365,   57,   57,   57,   57, -365, -365,
     -365,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -365, -365

    },

    {
        9, -366, -366, -366, -366, -366,   57, -366, -366,   57,
     -366, -366, -366, -366,   57,   57,   57,   57, -366, -366,
     -366,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  378,
       57,   57,   57,   57,   57,   57,   57, -366, -366
    },

    {
        9, -367, -367, -367, -367, -367,   57, -367, -367,   57,
     -367, -367, -367, -367,   57,   57,   57,   57, -367, -367,
     -367,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  379,
       57,   57,   57,   57,   57,   57,   57, -367, -367

    },

    {
        9, -368, -368, -368, -368, -368,   57, -368, -368,   57,
     -368, -368, -368, -368,   57,   57,   57,   57, -368, -368,
     -368,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  380,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -368, -368
    },

    {
        9, -369, -369, -369, -369, -369,   57, -369, -369,   57,
     -369, -369, -369, -369,   57,   57,   57,   57, -369, -369,
     -369,   57,   57,   57,   57,   57,   57,  381,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -369, -369

    },

    {
        9, -370, -370, -370, -370, -370,   57, -370, -370,   57,
     -370, -370, -370, -370,   57,   57,   57,   57, -370, -370,
     -370,   57,   57,   57,   57,   57,   57,   57,  382,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -370, -370
    },

    {
        9, -371, -371, -371, -371, -371,   57, -371, -371,   57,
     -371, -371, -371, -371,   57,   57,   57,   57, -371, -371,
     -371,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  383,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -371, -371

    },

    {
        9, -372, -372, -372, -372, -372,   57, -372, -372,   57,
     -372, -372, -372, -372,   57,   57,   57,   57, -372, -372,
     -372,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  384,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -372, -372
    },

    {
        9, -373, -373, -373, -373, -373,   57, -373, -373,   57,
     -373, -373, -373, -373,   57,   57,   57,   57, -373, -373,
     -373,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -373, -373

    },

    {
        9, -374, -374, -374, -374, -374,   57, -374, -374,   57,
     -374, -374, -374, -374,   57,   57,   57,   57, -374, -374,
     -374,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      385,   57,   57,   57,   57,   57,   57, -374, -374
    },

    {
        9, -375, -375, -375, -375, -375,   57, -375, -375,   57,
     -375, -375, -375, -375,   57,   57,   57,   57, -375, -375,
     -375,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -375, -375

    },

    {
        9, -376, -376, -376, -376, -376,   57, -376, -376,   57,
     -376, -376, -376, -376,   57,   57,   57,   57, -376, -376,
     -376,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -376, -376
    },

    {
        9, -377, -377, -377, -377, -377,   57, -377, -377,   57,
     -377, -377, -377, -377,   57,   57,   57,   57, -377, -377,
     -377,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -377, -377

    },

    {
        9, -378, -378, -378, -378, -378,   57, -378, -378,   57,
     -378, -378, -378, -378,   57,   57,   57,   57, -378, -378,
     -378,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -378, -378
    },

    {
        9, -379, -379, -379, -379, -379,   57, -379, -379,   57,
     -379, -379, -379, -379,   57,   57,   57,   57, -379, -379,
     -379,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -379, -379

    },

    {
        9, -380, -380, -380, -380, -380,   57, -380, -380,   57,
     -380, -380, -380, -380,   57,   57,   57,   57, -380, -380,
     -380,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  386,
       57,   57,   57,   57,   57,   57,   57, -380, -380
    },

    {
        9, -381, -381, -381, -381, -381,   57, -381, -381,   57,
     -381, -381, -381, -381,   57,   57,   57,   57, -381, -381,
     -381,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      387,   57,   57,   57,   57,   57,   57, -381, -381

    },

    {
        9, -382, -382, -382, -382, -382,   57, -382, -382,   57,
     -382, -382, -382, -382,   57,   57,   57,   57, -382, -382,
     -382,   57,   57,   57,   57,   57,   57,   57,   57,  388,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -382, -382
    },

    {
        9, -383, -383, -383, -383, -383,   57, -383, -383,   57,
     -383, -383, -383, -383,   57,   57,   57,   57, -383, -383,
     -383,   57,   57,   57,   57,  389,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -383, -383

    },

    {
        9, -384, -384, -384, -384, -384,   57, -384, -384,   57,
     -384, -384, -384, -384,   57,   57,   57,   57, -384, -384,
     -384,   57,   57,   57,   57,  390,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -384, -384
    },

    {
        9, -385, -385, -385, -385, -385,   57, -385, -385,   57,
     -385, -385, -385, -385,   57,   57,   57,   57, -385, -385,
     -385,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -385, -385

    },

    {
        9, -386, -386, -386, -386, -386,   57, -386, -386,   57,
     -386, -386, -386, -386,   57,   57,   57,   57, -386, -386,
     -386,   57,   57,   57,   57,   57,  391,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -386, -386
    },

    {
        9, -387, -387, -387, -387, -387,   57, -387, -387,   57,
     -387, -387, -387, -387,   57,   57,   57,   57, -387, -387,
     -387,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -387, -387

    },

    {
        9, -388, -388, -388, -388, -388,   57, -388, -388,   57,
     -388, -388, -388, -388,   57,   57,   57,   57, -388, -388,
     -388,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      392,   57,   57,   57,   57,   57,   57, -388, -388
    },

    {
        9, -389, -389, -389, -389, -389,   57, -389, -389,   57,
     -389, -389, -389, -389,   57,   57,   57,   57, -389, -389,
     -389,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -389, -389

    },

    {
        9, -390, -390, -390, -390, -390,   57, -390, -390,   57,
     -390, -390, -390, -390,   57,   57,   57,   57, -390, -390,
     -390,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -390, -390
    },

    {
        9, -391, -391, -391, -391, -391,   57, -391, -391,   57,
     -391, -391, -391, -391,   57,   57,   57,   57, -391, -391,
     -391,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -391, -391

    },

    {
        9, -392, -392, -392, -392, -392,   57, -392, -392,   57,
     -392, -392, -392, -392,   57,   57,   57,   57, -392, -392,
     -392,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, -392, -392
    },

    } ;

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up smttext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	smtleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 113
#define YY_END_OF_BUFFER 114
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[393] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,  114,  112,
        1,    1,    8,   61,   59,   60,    2,   56,    5,   63,
       62,  111,  111,  111,   57,   58,  112,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,   12,    7,    6,   11,  113,   10,
       11,   16,   15,   16,   14,    2,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,   26,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,    9,   13,  111,

      111,   25,  111,  111,  111,  111,  111,    3,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,   28,
      111,   23,  111,   29,  111,  111,   65,   21,  111,  111,
      111,   39,  111,  111,  111,  111,  111,  111,  111,  111,
      111,   27,  111,  111,  111,  111,  111,  111,    4,  111,
      111,  111,  111,  111,  111,   88,  111,  111,   87,  111,
      111,  111,  111,   80,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   30,  111,   33,  111,  111,

      111,  111,   64,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,   19,  111,  111,  111,   18,  111,  111,
      111,  111,  111,  111,   69,   79,  111,  111,   90,   89,
      111,   72,  111,   78,   83,   71,  111,  102,   98,   66,
      101,   97,  111,  111,   70,  111,   96,   92,   95,   91,
      111,  111,   81,  111,  111,  111,  111,  111,  111,  111,
       20,  111,  111,  111,  111,   38,   31,   34,  111,  111,
      111,  111,   32,  111,  111,   55,  111,   40,  111,   17,
      111,   37,  111,  110,  111,   68,  103,   67,   82,   74,
      100,   99,   77,   76,   73,   94,   93,   75,   84,  111,

       85,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  106,  111,   54,  111,   47,   44,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,   86,
      111,  111,  111,   43,  111,   22,  111,  111,  111,   41,
      111,  111,  111,  111,   48,  111,  111,   53,  111,  111,
      111,  111,  111,   52,  111,  111,  111,  111,  111,   46,
      111,  111,  111,  111,   50,  111,  111,  111,  111,  111,
      111,  111,   42,  111,   36,   45,   35,   51,   49,  111,
      111,  111,  111,  111,  109,  111,  107,  111,  105,  104,
       24,  108

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    1,    1,    6,    7,
        8,    1,    1,    1,    1,    6,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,    1,
       12,    1,   13,    1,   14,   15,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   17,   16,   16,   16,   16,
       18,   19,   20,    1,   21,    1,   22,   23,   24,   25,

       26,   27,   28,   29,   30,   16,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[114] =
    {   0,
1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

extern int smt_flex_debug;
int smt_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *smttext;
#line 1 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
#line 2 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
  /********************************************************************
   * AUTHORS: Vijay Ganesh, David L. Dill, Trevor Hansen
   *
   * BEGIN DATE: July, 2006
   *
   * This file is modified version of the CVCL's smtlib.lex file. Please
   * see CVCL license below
   ********************************************************************/
   
  /********************************************************************
   * \file smtlib.lex
   * 
   * Author: Sergey Berezin, Clark Barrett
   * 
   * Created: Apr 30 2005
   *
   * <hr>
   * Copyright (C) 2004 by the Board of Trustees of Leland Stanford
   * Junior University and by New York University. 
   *
   * License to use, copy, modify, sell and/or distribute this software
   * and its documentation for any purpose is hereby granted without
   * royalty, subject to the terms and conditions defined in the \ref
   * LICENSE file provided with this distribution.  In particular:
   *
   * - The above copyright notice and this permission notice must appear
   * in all copies of the software and related documentation.
   *
   * - THE SOFTWARE IS PROVIDED "AS-IS", WITHOUT ANY WARRANTIES,
   * EXPRESSED OR IMPLIED.  USE IT AT YOUR OWN RISK.
   * 
   * <hr>
   ********************************************************************/
#include <iostream>
#include "stp/Parser/parser.h"
#include "parsesmt.hpp"
#include "stp/cpp_interface.h"

  using namespace std;
  using namespace stp;
  
  extern char *smttext;
  extern int smterror (const char *msg);

  // File-static (local to this file) variables and functions
  static std::string _string_lit;  
  static char escapeChar(char c) {
    switch(c) {
    case 'n': return '\n';
    case 't': return '\t';
    default: return c;
    }
  }      



#line 3919 "/home/klee/klee_build/stp/build/lib/Parser/lexsmt.cpp"

#define INITIAL 0
#define COMMENT 1
#define STRING_LITERAL 2
#define USER_VALUE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int smtlex_destroy (void );

int smtget_debug (void );

void smtset_debug (int debug_flag  );

YY_EXTRA_TYPE smtget_extra (void );

void smtset_extra (YY_EXTRA_TYPE user_defined  );

FILE *smtget_in (void );

void smtset_in  (FILE * in_str  );

FILE *smtget_out (void );

void smtset_out  (FILE * out_str  );

int smtget_leng (void );

char *smtget_text (void );

int smtget_lineno (void );

void smtset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int smtwrap (void );
#else
extern int smtwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( smttext, smtleng, 1, smtout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( smtin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( smtin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, smtin))==0 && ferror(smtin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(smtin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int smtlex (void);

#define YY_DECL int smtlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after smttext and smtleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 73 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"

#line 4109 "/home/klee/klee_build/stp/build/lib/Parser/lexsmt.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! smtin )
			smtin = stdin;

		if ( ! smtout )
			smtout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			smtensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				smt_create_buffer(smtin,YY_BUF_SIZE );
		}

		smt_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of smttext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		while ( (yy_current_state = yy_nxt[yy_current_state][ yy_ec[YY_SC_TO_UI(*yy_cp)]  ]) > 0 )
			++yy_cp;

		yy_current_state = -yy_current_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < smtleng; ++yyl )
				if ( smttext[yyl] == '\n' )
					   
    smtlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 74 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ /* sk'ip whitespace */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 75 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ smtlval.uintval = strtoul(smttext, NULL, 10); return NUMERAL_TOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ smtlval.str = new std::string(smttext+2); return BVCONST_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 80 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{
  		   char c = smttext[3];
		   if (c == '1') {
		     smtlval.node = new stp::ASTNode(GlobalParserInterface->CreateOneConst(1));
		   }
		   else {
		     smtlval.node = new stp::ASTNode(GlobalParserInterface->CreateZeroConst(1));
		   }
		   return BITCONST_TOK;
		};
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 92 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ BEGIN COMMENT; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 93 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ BEGIN INITIAL; /* return to normal mode */}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 94 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ /* stay in comment mode */ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 96 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ BEGIN STRING_LITERAL;
                          _string_lit.erase(_string_lit.begin(),
                                            _string_lit.end()); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 99 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ /* escape characters (like \n or \") */
                          _string_lit.insert(_string_lit.end(),
                                             escapeChar(smttext[1])); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 102 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ BEGIN INITIAL; /* return to normal mode */
			  smtlval.str = new std::string(_string_lit);
                          return STRING_TOK; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 105 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ _string_lit.insert(_string_lit.end(),*smttext); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 108 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ BEGIN USER_VALUE;
                          _string_lit.erase(_string_lit.begin(),
                                            _string_lit.end()); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ /* escape characters */
                          _string_lit.insert(_string_lit.end(),smttext[1]); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 114 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ BEGIN INITIAL; /* return to normal mode */
			  smtlval.str = new std::string(_string_lit);
                          return USER_VAL_TOK; }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 117 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ _string_lit.insert(_string_lit.end(),'\n');}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 118 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ _string_lit.insert(_string_lit.end(),*smttext); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 120 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BITVEC_TOK;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 121 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return ARRAY_TOK;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 122 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return TRUE_TOK; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 123 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return FALSE_TOK; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 124 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return NOT_TOK; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 125 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return IMPLIES_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 126 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return ITE_TOK;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 127 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return ITE_TOK;} // This is in the SMTLIB benchmarks.
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 128 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return AND_TOK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 129 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return OR_TOK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 130 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return XOR_TOK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 131 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return IFF_TOK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 132 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return LET_TOK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 133 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return FLET_TOK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 134 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return NOTES_TOK; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 135 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return SORTS_TOK; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 136 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return FUNS_TOK; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 137 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return PREDS_TOK; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 138 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return EXTENSIONS_TOK; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 139 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return DEFINITION_TOK; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 140 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return AXIOMS_TOK; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 141 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return LOGIC_TOK; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 142 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return SAT_TOK; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 143 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return UNSAT_TOK; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 144 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return UNKNOWN_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 145 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return ASSUMPTION_TOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 146 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return FORMULA_TOK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 147 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return STATUS_TOK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 148 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return DIFFICULTY_TOK; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 149 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BENCHMARK_TOK; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 150 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return SOURCE_TOK;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 151 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return CATEGORY_TOK;} 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 152 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return EXTRASORTS_TOK; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 153 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return EXTRAFUNS_TOK; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 154 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return EXTRAPREDS_TOK; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 155 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return LANGUAGE_TOK; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 156 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return DISTINCT_TOK; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 157 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return SELECT_TOK; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 158 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return STORE_TOK; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 159 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return COLON_TOK; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 160 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return LBRACKET_TOK; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 161 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return RBRACKET_TOK; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 162 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return LPAREN_TOK; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 163 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return RPAREN_TOK; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 164 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return DOLLAR_TOK; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 165 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return QUESTION_TOK; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 166 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{return EQ_TOK;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 168 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return NAND_TOK;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 169 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return NOR_TOK;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 170 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVLEFTSHIFT_1_TOK;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 171 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVRIGHTSHIFT_1_TOK;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 172 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVARITHRIGHTSHIFT_TOK;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 173 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVPLUS_TOK;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 174 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVSUB_TOK;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 175 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVNOT_TOK;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 176 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVMULT_TOK;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 177 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVDIV_TOK;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 178 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return SBVDIV_TOK;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 179 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVMOD_TOK;} 
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 180 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return SBVREM_TOK;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 181 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return SBVMOD_TOK;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 182 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVNEG_TOK;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 183 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVAND_TOK;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 184 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVOR_TOK;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 185 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVXOR_TOK;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 186 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVNAND_TOK;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 187 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVNOR_TOK;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 188 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVXNOR_TOK;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 189 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVCONCAT_TOK;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 190 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVEXTRACT_TOK;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 191 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVLT_TOK;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 192 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVGT_TOK;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 193 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVLE_TOK;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 194 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVGE_TOK;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 195 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVLT_TOK;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 196 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVGT_TOK;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 197 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVLE_TOK;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 198 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVGE_TOK;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 199 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVLE_TOK;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 200 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVGE_TOK;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 202 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVSLT_TOK;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 203 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVSGT_TOK;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 204 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVSLE_TOK;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 205 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVSGE_TOK;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 206 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVSLE_TOK;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 207 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVSGE_TOK;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 209 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVCOMP_TOK;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 212 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVZX_TOK;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 213 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVSX_TOK;} 
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 214 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVREPEAT_TOK;} 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 216 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVROTATE_LEFT_TOK;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 217 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BVROTATE_RIGHT_TOK;} 
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 219 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BOOLEXTRACT_TOK;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 220 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ return BOOL_TO_BV_TOK;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 222 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{
  string str(smttext);
   bool found = false;
   ASTNode nptr;
   
  if (stp::GlobalParserInterface->isSymbolAlreadyDeclared(str)) // it's a symbol.
    {
    	nptr= stp::GlobalParserInterface->LookupOrCreateSymbol(str);
    	found = true;
    }
    else if (stp::GlobalParserInterface->letMgr->isLetDeclared(str)) // a let.
    {
    	nptr= stp::GlobalParserInterface->letMgr->resolveLet(str);
    	found = true;
    }

	if (found)
	{
	  smtlval.node = stp::GlobalParserInterface->newNode(nptr);
	  if ((smtlval.node)->GetType() == stp::BOOLEAN_TYPE)
	    return FORMID_TOK;
	  else 
	    return TERMID_TOK;
	   }
	   
    // It hasn't been found. So it's not already declared.
    // it has not been seen before.
	smtlval.str = new std::string(str);
	return STRING_TOK;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 252 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
{ smterror("Illegal input character."); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 253 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"
ECHO;
	YY_BREAK
#line 4792 "/home/klee/klee_build/stp/build/lib/Parser/lexsmt.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(STRING_LITERAL):
			case YY_STATE_EOF(USER_VALUE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed smtin at a new source and called
			 * smtlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = smtin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( smtwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * smttext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of smtlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					smtrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			smtrestart(smtin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) smtrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state = yy_nxt[yy_current_state][(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	yy_current_state = yy_nxt[yy_current_state][1];
	yy_is_jam = (yy_current_state <= 0);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					smtrestart(smtin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( smtwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve smttext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    smtlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void smtrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        smtensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            smt_create_buffer(smtin,YY_BUF_SIZE );
	}

	smt_init_buffer(YY_CURRENT_BUFFER,input_file );
	smt_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void smt_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		smtpop_buffer_state();
	 *		smtpush_buffer_state(new_buffer);
     */
	smtensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	smt_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (smtwrap()) processing, but the only time this flag
	 * is looked at is after smtwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void smt_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	smtin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE smt_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) smtalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in smt_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) smtalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in smt_create_buffer()" );

	b->yy_is_our_buffer = 1;

	smt_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with smt_create_buffer()
 * 
 */
    void smt_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		smtfree((void *) b->yy_ch_buf  );

	smtfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a smtrestart() or at EOF.
 */
    static void smt_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	smt_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then smt_init_buffer was _probably_
     * called from smtrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void smt_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		smt_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void smtpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	smtensure_buffer_stack();

	/* This block is copied from smt_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from smt_switch_to_buffer. */
	smt_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void smtpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	smt_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		smt_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void smtensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)smtalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in smtensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)smtrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in smtensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE smt_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) smtalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in smt_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	smt_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to smtlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       smt_scan_bytes() instead.
 */
YY_BUFFER_STATE smt_scan_string (yyconst char * yystr )
{
    
	return smt_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to smtlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE smt_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) smtalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in smt_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = smt_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in smt_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up smttext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		smttext[smtleng] = (yy_hold_char); \
		(yy_c_buf_p) = smttext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		smtleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int smtget_lineno  (void)
{
        
    return smtlineno;
}

/** Get the input stream.
 * 
 */
FILE *smtget_in  (void)
{
        return smtin;
}

/** Get the output stream.
 * 
 */
FILE *smtget_out  (void)
{
        return smtout;
}

/** Get the length of the current token.
 * 
 */
int smtget_leng  (void)
{
        return smtleng;
}

/** Get the current token.
 * 
 */

char *smtget_text  (void)
{
        return smttext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void smtset_lineno (int  line_number )
{
    
    smtlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see smt_switch_to_buffer
 */
void smtset_in (FILE *  in_str )
{
        smtin = in_str ;
}

void smtset_out (FILE *  out_str )
{
        smtout = out_str ;
}

int smtget_debug  (void)
{
        return smt_flex_debug;
}

void smtset_debug (int  bdebug )
{
        smt_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from smtlex_destroy(), so don't allocate here.
     */

    /* We do not touch smtlineno unless the option is enabled. */
    smtlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    smtin = stdin;
    smtout = stdout;
#else
    smtin = (FILE *) 0;
    smtout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * smtlex_init()
     */
    return 0;
}

/* smtlex_destroy is for both reentrant and non-reentrant scanners. */
int smtlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		smt_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		smtpop_buffer_state();
	}

	/* Destroy the stack itself. */
	smtfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * smtlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *smtalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *smtrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void smtfree (void * ptr )
{
	free( (char *) ptr );	/* see smtrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 253 "/home/klee/klee_build/stp/src/lib/Parser/smt.lex"



