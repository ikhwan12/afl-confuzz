#line 2 "/home/klee/klee_build/stp/build/lib/Parser/lexcvc.cpp"

#line 4 "/home/klee/klee_build/stp/build/lib/Parser/lexcvc.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc_create_buffer
#define yy_delete_buffer cvc_delete_buffer
#define yy_flex_debug cvc_flex_debug
#define yy_init_buffer cvc_init_buffer
#define yy_flush_buffer cvc_flush_buffer
#define yy_load_buffer_state cvc_load_buffer_state
#define yy_switch_to_buffer cvc_switch_to_buffer
#define yyin cvcin
#define yyleng cvcleng
#define yylex cvclex
#define yylineno cvclineno
#define yyout cvcout
#define yyrestart cvcrestart
#define yytext cvctext
#define yywrap cvcwrap
#define yyalloc cvcalloc
#define yyrealloc cvcrealloc
#define yyfree cvcfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvcrestart(cvcin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int cvcleng;

extern FILE *cvcin, *cvcout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE cvclex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-cvclineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < cvcleng; ++yyl )\
                    if ( cvctext[yyl] == '\n' )\
                        --cvclineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvcrestart()), so that the user can continue scanning by
	 * just pointing cvcin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvctext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int cvcleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvcwrap()'s to do buffer switches
 * instead of setting up a fresh cvcin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvcrestart (FILE *input_file  );
void cvc_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc_create_buffer (FILE *file,int size  );
void cvc_delete_buffer (YY_BUFFER_STATE b  );
void cvc_flush_buffer (YY_BUFFER_STATE b  );
void cvcpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvcpop_buffer_state (void );

static void cvcensure_buffer_stack (void );
static void cvc_load_buffer_state (void );
static void cvc_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc_scan_bytes (yyconst char *bytes,int len  );

void *cvcalloc (yy_size_t  );
void *cvcrealloc (void *,yy_size_t  );
void cvcfree (void *  );

#define yy_new_buffer cvc_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvcensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc_create_buffer(cvcin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvcensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc_create_buffer(cvcin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define cvcwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *cvcin = (FILE *) 0, *cvcout = (FILE *) 0;

typedef int yy_state_type;

extern int cvclineno;

int cvclineno = 1;

extern char *cvctext;
#define yytext_ptr cvctext
static yyconst flex_int16_t yy_nxt[][55] =
    {
    {
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0
    },

    {
        7,    8,    9,   10,   11,    8,   12,   13,   14,   15,
       16,   17,   17,   18,   19,   20,   21,   11,   22,   23,
       24,   25,   26,   27,   28,   26,   26,   29,   26,   30,
       26,   31,   32,   33,   34,   26,   35,   36,   26,   26,

       37,   38,   26,   39,   40,   26,   26,   26,   26,   26,
       26,   26,   26,   41,   42
    },

    {
        7,    8,    9,   10,   11,    8,   12,   13,   14,   15,
       16,   17,   17,   18,   19,   20,   21,   11,   22,   23,
       24,   25,   26,   27,   28,   26,   26,   29,   26,   30,
       26,   31,   32,   33,   34,   26,   35,   36,   26,   26,
       37,   38,   26,   39,   40,   26,   26,   26,   26,   26,
       26,   26,   26,   41,   42
    },

    {
        7,   43,   43,   44,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43
    },

    {
        7,   43,   43,   44,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43

    },

    {
        7,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45
    },

    {
        7,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45
    },

    {
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7
    },

    {
        7,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,

       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8
    },

    {
        7,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9

    },

    {
        7,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10
    },

    {
        7,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,

      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11
    },

    {
        7,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12
    },

    {
        7,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,

      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13
    },

    {
        7,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,   46,   47,  -14,   48,
      -14,  -14,  -14,  -14,  -14

    },

    {
        7,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,   49,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15
    },

    {
        7,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
       50,   50,   50,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,

      -16,  -16,  -16,  -16,  -16,  -16,   51,  -16,  -16,   52,
      -16,  -16,   53,  -16,  -16
    },

    {
        7,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
       50,   50,   50,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17
    },

    {
        7,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,   54,  -18,  -18,  -18,  -18,

      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18
    },

    {
        7,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,   55,   56,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19

    },

    {
        7,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,   57,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20
    },

    {
        7,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,   58,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,

      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21
    },

    {
        7,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22
    },

    {
        7,  -23,  -23,  -23,  -23,   59,  -23,  -23,   59,  -23,
       59,   59,   59,  -23,  -23,  -23,  -23,   59,  -23,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   60,   59,   59,   59,   61,   62,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -23,  -23
    },

    {
        7,  -24,  -24,  -24,  -24,   59,  -24,  -24,   59,  -24,
       59,   59,   59,  -24,  -24,  -24,  -24,   59,  -24,   59,
       59,   59,   59,   59,   59,   59,   59,   63,   59,   59,
       59,   59,   64,   59,   59,   59,   59,   59,   59,   65,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -24,  -24

    },

    {
        7,  -25,  -25,  -25,  -25,   59,  -25,  -25,   59,  -25,
       59,   59,   59,  -25,  -25,  -25,  -25,   59,  -25,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   66,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -25,  -25
    },

    {
        7,  -26,  -26,  -26,  -26,   59,  -26,  -26,   59,  -26,
       59,   59,   59,  -26,  -26,  -26,  -26,   59,  -26,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -26,  -26
    },

    {
        7,  -27,  -27,  -27,  -27,   59,  -27,  -27,   59,  -27,
       59,   59,   59,  -27,  -27,  -27,  -27,   59,  -27,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   67,
       59,   68,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   69,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -27,  -27
    },

    {
        7,  -28,  -28,  -28,  -28,   59,  -28,  -28,   59,  -28,
       59,   59,   59,  -28,  -28,  -28,  -28,   59,  -28,   70,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -28,  -28
    },

    {
        7,  -29,  -29,  -29,  -29,   59,  -29,  -29,   59,  -29,
       59,   59,   59,  -29,  -29,  -29,  -29,   59,  -29,   59,
       59,   59,   59,   59,   71,   59,   59,   59,   59,   59,
       59,   72,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -29,  -29

    },

    {
        7,  -30,  -30,  -30,  -30,   59,  -30,  -30,   59,  -30,
       59,   59,   59,  -30,  -30,  -30,  -30,   59,  -30,   59,
       59,   59,   59,   73,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -30,  -30
    },

    {
        7,  -31,  -31,  -31,  -31,   59,  -31,  -31,   59,  -31,
       59,   59,   59,  -31,  -31,  -31,  -31,   59,  -31,   74,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   75,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -31,  -31
    },

    {
        7,  -32,  -32,  -32,  -32,   59,  -32,  -32,   59,  -32,
       59,   59,   59,  -32,  -32,  -32,  -32,   59,  -32,   59,
       59,   59,   59,   59,   76,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   77,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -32,  -32
    },

    {
        7,  -33,  -33,  -33,  -33,   59,  -33,  -33,   59,  -33,
       59,   59,   59,  -33,  -33,  -33,  -33,   59,  -33,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   78,   59,   59,   59,   59,   59,   79,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -33,  -33
    },

    {
        7,  -34,  -34,  -34,  -34,   59,  -34,  -34,   59,  -34,
       59,   59,   59,  -34,  -34,  -34,  -34,   59,  -34,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   80,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -34,  -34

    },

    {
        7,  -35,  -35,  -35,  -35,   59,  -35,  -35,   59,  -35,
       59,   59,   59,  -35,  -35,  -35,  -35,   59,  -35,   59,
       81,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   82,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -35,  -35
    },

    {
        7,  -36,  -36,  -36,  -36,   59,  -36,  -36,   59,  -36,
       59,   59,   59,  -36,  -36,  -36,  -36,   59,  -36,   59,
       59,   59,   59,   59,   59,   59,   83,   59,   59,   59,
       59,   59,   59,   59,   59,   84,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -36,  -36
    },

    {
        7,  -37,  -37,  -37,  -37,   59,  -37,  -37,   59,  -37,
       59,   59,   59,  -37,  -37,  -37,  -37,   59,  -37,   59,
       59,   59,   59,   59,   59,   59,   59,   85,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -37,  -37
    },

    {
        7,  -38,  -38,  -38,  -38,   59,  -38,  -38,   59,  -38,
       59,   59,   59,  -38,  -38,  -38,  -38,   59,  -38,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   86,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -38,  -38
    },

    {
        7,  -39,  -39,  -39,  -39,   59,  -39,  -39,   59,  -39,
       59,   59,   59,  -39,  -39,  -39,  -39,   59,  -39,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   87,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -39,  -39

    },

    {
        7,  -40,  -40,  -40,  -40,   88,  -40,  -40,   88,  -40,
       88,   88,   88,  -40,  -40,  -40,  -40,   88,  -40,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,  -40,  -40
    },

    {
        7,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,

      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41
    },

    {
        7,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42
    },

    {
        7,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,

      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43
    },

    {
        7,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44

    },

    {
        7,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45
    },

    {
        7,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
       89,   89,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,

      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46
    },

    {
        7,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
       90,   90,   90,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47
    },

    {
        7,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
       91,   91,   91,  -48,  -48,  -48,  -48,  -48,  -48,   91,

       91,   91,   91,   91,   91,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,   91,   91,   91,   91,  -48,
      -48,  -48,  -48,  -48,  -48
    },

    {
        7,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49

    },

    {
        7,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
       50,   50,   50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50
    },

    {
        7,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
       92,   92,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,

      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
       93,  -51,  -51,  -51,  -51
    },

    {
        7,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
       94,   94,   94,  -52,  -52,  -52,  -52,  -52,  -52,   94,
       94,   94,   94,   94,   94,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,   94,   94,   94,   95,  -52,
      -52,  -52,  -52,  -52,  -52
    },

    {
        7,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
       96,   96,   96,  -53,  -53,  -53,  -53,  -53,  -53,   96,

       96,   96,   96,   96,   96,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,   96,   96,   96,   96,  -53,
      -53,  -53,  -53,  -53,  -53
    },

    {
        7,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54

    },

    {
        7,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55
    },

    {
        7,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,   97,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,

      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56
    },

    {
        7,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57
    },

    {
        7,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,

      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58
    },

    {
        7,  -59,  -59,  -59,  -59,   59,  -59,  -59,   59,  -59,
       59,   59,   59,  -59,  -59,  -59,  -59,   59,  -59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -59,  -59

    },

    {
        7,  -60,  -60,  -60,  -60,   59,  -60,  -60,   59,  -60,
       59,   59,   59,  -60,  -60,  -60,  -60,   59,  -60,   59,
       59,   59,   98,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -60,  -60
    },

    {
        7,  -61,  -61,  -61,  -61,   59,  -61,  -61,   59,  -61,
       59,   59,   59,  -61,  -61,  -61,  -61,   59,  -61,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   99,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -61,  -61
    },

    {
        7,  -62,  -62,  -62,  -62,   59,  -62,  -62,   59,  -62,
       59,   59,   59,  -62,  -62,  -62,  -62,   59,  -62,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  100,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -62,  -62
    },

    {
        7,  -63,  -63,  -63,  -63,   59,  -63,  -63,   59,  -63,
       59,   59,   59,  -63,  -63,  -63,  -63,   59,  -63,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  101,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -63,  -63
    },

    {
        7,  -64,  -64,  -64,  -64,   59,  -64,  -64,   59,  -64,
       59,   59,   59,  -64,  -64,  -64,  -64,   59,  -64,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,  102,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -64,  -64

    },

    {
        7,  -65,  -65,  -65,  -65,   59,  -65,  -65,   59,  -65,
       59,   59,   59,  -65,  -65,  -65,  -65,   59,  -65,  103,
       59,   59,  104,   59,   59,  105,   59,   59,   59,  106,
      107,  108,   59,  109,   59,   59,  110,   59,  111,   59,
       59,  112,   59,  113,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -65,  -65
    },

    {
        7,  -66,  -66,  -66,  -66,   59,  -66,  -66,   59,  -66,
       59,   59,   59,  -66,  -66,  -66,  -66,   59,  -66,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,  114,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -66,  -66
    },

    {
        7,  -67,  -67,  -67,  -67,   59,  -67,  -67,   59,  -67,
       59,   59,   59,  -67,  -67,  -67,  -67,   59,  -67,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  115,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -67,  -67
    },

    {
        7,  -68,  -68,  -68,  -68,   59,  -68,  -68,   59,  -68,
       59,   59,   59,  -68,  -68,  -68,  -68,   59,  -68,   59,

       59,   59,  116,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -68,  -68
    },

    {
        7,  -69,  -69,  -69,  -69,   59,  -69,  -69,   59,  -69,
       59,   59,   59,  -69,  -69,  -69,  -69,   59,  -69,   59,
       59,  117,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -69,  -69

    },

    {
        7,  -70,  -70,  -70,  -70,   59,  -70,  -70,   59,  -70,
       59,   59,   59,  -70,  -70,  -70,  -70,   59,  -70,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  118,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -70,  -70
    },

    {
        7,  -71,  -71,  -71,  -71,   59,  -71,  -71,   59,  -71,
       59,   59,   59,  -71,  -71,  -71,  -71,   59,  -71,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -71,  -71
    },

    {
        7,  -72,  -72,  -72,  -72,   59,  -72,  -72,   59,  -72,
       59,   59,   59,  -72,  -72,  -72,  -72,   59,  -72,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -72,  -72
    },

    {
        7,  -73,  -73,  -73,  -73,   59,  -73,  -73,   59,  -73,
       59,   59,   59,  -73,  -73,  -73,  -73,   59,  -73,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  119,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -73,  -73
    },

    {
        7,  -74,  -74,  -74,  -74,   59,  -74,  -74,   59,  -74,
       59,   59,   59,  -74,  -74,  -74,  -74,   59,  -74,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  120,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -74,  -74

    },

    {
        7,  -75,  -75,  -75,  -75,   59,  -75,  -75,   59,  -75,
       59,   59,   59,  -75,  -75,  -75,  -75,   59,  -75,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  121,   59,  122,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -75,  -75
    },

    {
        7,  -76,  -76,  -76,  -76,   59,  -76,  -76,   59,  -76,
       59,   59,   59,  -76,  -76,  -76,  -76,   59,  -76,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -76,  -76
    },

    {
        7,  -77,  -77,  -77,  -77,   59,  -77,  -77,   59,  -77,
       59,   59,   59,  -77,  -77,  -77,  -77,   59,  -77,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -77,  -77
    },

    {
        7,  -78,  -78,  -78,  -78,   59,  -78,  -78,   59,  -78,
       59,   59,   59,  -78,  -78,  -78,  -78,   59,  -78,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  123,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -78,  -78
    },

    {
        7,  -79,  -79,  -79,  -79,   59,  -79,  -79,   59,  -79,
       59,   59,   59,  -79,  -79,  -79,  -79,   59,  -79,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  124,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -79,  -79

    },

    {
        7,  -80,  -80,  -80,  -80,   59,  -80,  -80,   59,  -80,
       59,   59,   59,  -80,  -80,  -80,  -80,   59,  -80,   59,
       59,   59,   59,  125,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -80,  -80
    },

    {
        7,  -81,  -81,  -81,  -81,   59,  -81,  -81,   59,  -81,
       59,   59,   59,  -81,  -81,  -81,  -81,   59,  -81,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  126,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -81,  -81
    },

    {
        7,  -82,  -82,  -82,  -82,   59,  -82,  -82,   59,  -82,
       59,   59,   59,  -82,  -82,  -82,  -82,   59,  -82,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -82,  -82
    },

    {
        7,  -83,  -83,  -83,  -83,   59,  -83,  -83,   59,  -83,
       59,   59,   59,  -83,  -83,  -83,  -83,   59,  -83,   59,

       59,   59,   59,  127,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -83,  -83
    },

    {
        7,  -84,  -84,  -84,  -84,   59,  -84,  -84,   59,  -84,
       59,   59,   59,  -84,  -84,  -84,  -84,   59,  -84,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,  128,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -84,  -84

    },

    {
        7,  -85,  -85,  -85,  -85,   59,  -85,  -85,   59,  -85,
       59,   59,   59,  -85,  -85,  -85,  -85,   59,  -85,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  129,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -85,  -85
    },

    {
        7,  -86,  -86,  -86,  -86,   59,  -86,  -86,   59,  -86,
       59,   59,   59,  -86,  -86,  -86,  -86,   59,  -86,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  130,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -86,  -86
    },

    {
        7,  -87,  -87,  -87,  -87,   59,  -87,  -87,   59,  -87,
       59,   59,   59,  -87,  -87,  -87,  -87,   59,  -87,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -87,  -87
    },

    {
        7,  -88,  -88,  -88,  -88,   59,  -88,  -88,   59,  -88,
       59,   59,   59,  -88,  -88,  -88,  -88,   59,  -88,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -88,  -88
    },

    {
        7,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
       89,   89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89

    },

    {
        7,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
       90,   90,   90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90
    },

    {
        7,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
       91,   91,   91,  -91,  -91,  -91,  -91,  -91,  -91,   91,
       91,   91,   91,   91,   91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,

      -91,  -91,  -91,  -91,  -91,   91,   91,   91,   91,  -91,
      -91,  -91,  -91,  -91,  -91
    },

    {
        7,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
       92,   92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92
    },

    {
        7,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,

      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  131,  -93,  -93,  -93
    },

    {
        7,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
       94,   94,   94,  -94,  -94,  -94,  -94,  -94,  -94,   94,
       94,   94,   94,   94,   94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,   94,   94,   94,   94,  -94,
      -94,  -94,  -94,  -94,  -94

    },

    {
        7,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
       94,   94,   94,  -95,  -95,  -95,  -95,  -95,  -95,   94,
       94,   94,   94,   94,   94,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,   94,   94,   94,   94,  -95,
      -95,  -95,  132,  -95,  -95
    },

    {
        7,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
       96,   96,   96,  -96,  -96,  -96,  -96,  -96,  -96,   96,
       96,   96,   96,   96,   96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,

      -96,  -96,  -96,  -96,  -96,   96,   96,   96,   96,  -96,
      -96,  -96,  -96,  -96,  -96
    },

    {
        7,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97
    },

    {
        7,  -98,  -98,  -98,  -98,   59,  -98,  -98,   59,  -98,
       59,   59,   59,  -98,  -98,  -98,  -98,   59,  -98,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -98,  -98
    },

    {
        7,  -99,  -99,  -99,  -99,   59,  -99,  -99,   59,  -99,
       59,   59,   59,  -99,  -99,  -99,  -99,   59,  -99,  133,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  -99,  -99

    },

    {
        7, -100, -100, -100, -100,   59, -100, -100,   59, -100,
       59,   59,   59, -100, -100, -100, -100,   59, -100,   59,
       59,   59,   59,  134,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -100, -100
    },

    {
        7, -101, -101, -101, -101,   59, -101, -101,   59, -101,
       59,   59,   59, -101, -101, -101, -101,   59, -101,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  135,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -101, -101
    },

    {
        7, -102, -102, -102, -102,   59, -102, -102,   59, -102,
       59,   59,   59, -102, -102, -102, -102,   59, -102,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  136,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -102, -102
    },

    {
        7, -103, -103, -103, -103,   59, -103, -103,   59, -103,
       59,   59,   59, -103, -103, -103, -103,   59, -103,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  137,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -103, -103
    },

    {
        7, -104, -104, -104, -104,   59, -104, -104,   59, -104,
       59,   59,   59, -104, -104, -104, -104,   59, -104,   59,
       59,   59,   59,   59,   59,   59,   59,  138,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -104, -104

    },

    {
        7, -105, -105, -105, -105,   59, -105, -105,   59, -105,
       59,   59,   59, -105, -105, -105, -105,   59, -105,   59,
       59,   59,   59,  139,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  140,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -105, -105
    },

    {
        7, -106, -106, -106, -106,   59, -106, -106,   59, -106,
       59,   59,   59, -106, -106, -106, -106,   59, -106,   59,
       59,   59,   59,  141,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  142,  143,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -106, -106
    },

    {
        7, -107, -107, -107, -107,   59, -107, -107,   59, -107,
       59,   59,   59, -107, -107, -107, -107,   59, -107,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,  144,   59,   59,   59,   59,   59,  145,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -107, -107
    },

    {
        7, -108, -108, -108, -108,   59, -108, -108,   59, -108,
       59,   59,   59, -108, -108, -108, -108,   59, -108,  146,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,  147,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -108, -108
    },

    {
        7, -109, -109, -109, -109,   59, -109, -109,   59, -109,
       59,   59,   59, -109, -109, -109, -109,   59, -109,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  148,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -109, -109

    },

    {
        7, -110, -110, -110, -110,   59, -110, -110,   59, -110,
       59,   59,   59, -110, -110, -110, -110,   59, -110,   59,
       59,   59,   59,   59,   59,  149,  150,   59,   59,  151,
       59,   59,   59,   59,   59,   59,   59,   59,  152,   59,
       59,  153,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -110, -110
    },

    {
        7, -111, -111, -111, -111,   59, -111, -111,   59, -111,
       59,   59,   59, -111, -111, -111, -111,   59, -111,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
      154,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -111, -111
    },

    {
        7, -112, -112, -112, -112,   59, -112, -112,   59, -112,
       59,   59,   59, -112, -112, -112, -112,   59, -112,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  155,  156,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -112, -112
    },

    {
        7, -113, -113, -113, -113,   59, -113, -113,   59, -113,
       59,   59,   59, -113, -113, -113, -113,   59, -113,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  157,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -113, -113
    },

    {
        7, -114, -114, -114, -114,   59, -114, -114,   59, -114,
       59,   59,   59, -114, -114, -114, -114,   59, -114,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  158,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -114, -114

    },

    {
        7, -115, -115, -115, -115,   59, -115, -115,   59, -115,
       59,   59,   59, -115, -115, -115, -115,   59, -115,   59,
       59,   59,   59,  159,   59,   59,   59,  160,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -115, -115
    },

    {
        7, -116, -116, -116, -116,   59, -116, -116,   59, -116,
       59,   59,   59, -116, -116, -116, -116,   59, -116,   59,
       59,   59,   59,   59,   59,   59,   59,  161,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -116, -116
    },

    {
        7, -117, -117, -117, -117,   59, -117, -117,   59, -117,
       59,   59,   59, -117, -117, -117, -117,   59, -117,   59,
       59,   59,   59,  162,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -117, -117
    },

    {
        7, -118, -118, -118, -118,   59, -118, -118,   59, -118,
       59,   59,   59, -118, -118, -118, -118,   59, -118,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  163,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -118, -118
    },

    {
        7, -119, -119, -119, -119,   59, -119, -119,   59, -119,
       59,   59,   59, -119, -119, -119, -119,   59, -119,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -119, -119

    },

    {
        7, -120, -120, -120, -120,   59, -120, -120,   59, -120,
       59,   59,   59, -120, -120, -120, -120,   59, -120,   59,
       59,   59,  164,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -120, -120
    },

    {
        7, -121, -121, -121, -121,   59, -121, -121,   59, -121,
       59,   59,   59, -121, -121, -121, -121,   59, -121,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -121, -121
    },

    {
        7, -122, -122, -122, -122,   59, -122, -122,   59, -122,
       59,   59,   59, -122, -122, -122, -122,   59, -122,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -122, -122
    },

    {
        7, -123, -123, -123, -123,   59, -123, -123,   59, -123,
       59,   59,   59, -123, -123, -123, -123,   59, -123,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -123, -123
    },

    {
        7, -124, -124, -124, -124,   59, -124, -124,   59, -124,
       59,   59,   59, -124, -124, -124, -124,   59, -124,   59,
       59,   59,   59,   59,   59,   59,  165,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -124, -124

    },

    {
        7, -125, -125, -125, -125,   59, -125, -125,   59, -125,
       59,   59,   59, -125, -125, -125, -125,   59, -125,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  166,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -125, -125
    },

    {
        7, -126, -126, -126, -126,   59, -126, -126,   59, -126,
       59,   59,   59, -126, -126, -126, -126,   59, -126,   59,
       59,   59,  167,   59,   59,  168,   59,   59,   59,  169,
      170,   59,   59,   59,   59,  171,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -126, -126
    },

    {
        7, -127, -127, -127, -127,   59, -127, -127,   59, -127,
       59,   59,   59, -127, -127, -127, -127,   59, -127,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  172,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -127, -127
    },

    {
        7, -128, -128, -128, -128,   59, -128, -128,   59, -128,
       59,   59,   59, -128, -128, -128, -128,   59, -128,   59,

       59,   59,   59,  173,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -128, -128
    },

    {
        7, -129, -129, -129, -129,   59, -129, -129,   59, -129,
       59,   59,   59, -129, -129, -129, -129,   59, -129,   59,
       59,   59,   59,   59,   59,   59,  174,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -129, -129

    },

    {
        7, -130, -130, -130, -130,   59, -130, -130,   59, -130,
       59,   59,   59, -130, -130, -130, -130,   59, -130,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -130, -130
    },

    {
        7, -131, -131, -131, -131, -131, -131, -131, -131, -131,
      175,  175, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131, -131, -131, -131, -131, -131, -131,

     -131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131, -131
    },

    {
        7, -132, -132, -132, -132, -132, -132, -132, -132, -132,
      176,  176,  176, -132, -132, -132, -132, -132, -132,  176,
      176,  176,  176,  176,  176, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132,  176,  176,  176,  176, -132,
     -132, -132, -132, -132, -132
    },

    {
        7, -133, -133, -133, -133,   59, -133, -133,   59, -133,
       59,   59,   59, -133, -133, -133, -133,   59, -133,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,  177,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -133, -133
    },

    {
        7, -134, -134, -134, -134,   59, -134, -134,   59, -134,
       59,   59,   59, -134, -134, -134, -134,   59, -134,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  178,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -134, -134

    },

    {
        7, -135, -135, -135, -135,   59, -135, -135,   59, -135,
       59,   59,   59, -135, -135, -135, -135,   59, -135,   59,
       59,   59,   59,  179,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -135, -135
    },

    {
        7, -136, -136, -136, -136,   59, -136, -136,   59, -136,
       59,   59,   59, -136, -136, -136, -136,   59, -136,   59,
      180,   59,   59,  181,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -136, -136
    },

    {
        7, -137, -137, -137, -137,   59, -137, -137,   59, -137,
       59,   59,   59, -137, -137, -137, -137,   59, -137,   59,
       59,   59,   59,   59,   59,   59,  182,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -137, -137
    },

    {
        7, -138, -138, -138, -138,   59, -138, -138,   59, -138,
       59,   59,   59, -138, -138, -138, -138,   59, -138,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  183,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -138, -138
    },

    {
        7, -139, -139, -139, -139,   59, -139, -139,   59, -139,
       59,   59,   59, -139, -139, -139, -139,   59, -139,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -139, -139

    },

    {
        7, -140, -140, -140, -140,   59, -140, -140,   59, -140,
       59,   59,   59, -140, -140, -140, -140,   59, -140,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -140, -140
    },

    {
        7, -141, -141, -141, -141,   59, -141, -141,   59, -141,
       59,   59,   59, -141, -141, -141, -141,   59, -141,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -141, -141
    },

    {
        7, -142, -142, -142, -142,   59, -142, -142,   59, -142,
       59,   59,   59, -142, -142, -142, -142,   59, -142,   59,
       59,   59,   59,   59,   59,   59,  184,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -142, -142
    },

    {
        7, -143, -143, -143, -143,   59, -143, -143,   59, -143,
       59,   59,   59, -143, -143, -143, -143,   59, -143,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -143, -143
    },

    {
        7, -144, -144, -144, -144,   59, -144, -144,   59, -144,
       59,   59,   59, -144, -144, -144, -144,   59, -144,   59,
       59,   59,  185,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -144, -144

    },

    {
        7, -145, -145, -145, -145,   59, -145, -145,   59, -145,
       59,   59,   59, -145, -145, -145, -145,   59, -145,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  186,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -145, -145
    },

    {
        7, -146, -146, -146, -146,   59, -146, -146,   59, -146,
       59,   59,   59, -146, -146, -146, -146,   59, -146,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  187,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -146, -146
    },

    {
        7, -147, -147, -147, -147,   59, -147, -147,   59, -147,
       59,   59,   59, -147, -147, -147, -147,   59, -147,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  188,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -147, -147
    },

    {
        7, -148, -148, -148, -148,   59, -148, -148,   59, -148,
       59,   59,   59, -148, -148, -148, -148,   59, -148,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,  189,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -148, -148
    },

    {
        7, -149, -149, -149, -149,   59, -149, -149,   59, -149,
       59,   59,   59, -149, -149, -149, -149,   59, -149,   59,
       59,   59,   59,  190,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  191,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -149, -149

    },

    {
        7, -150, -150, -150, -150,   59, -150, -150,   59, -150,
       59,   59,   59, -150, -150, -150, -150,   59, -150,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  192,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -150, -150
    },

    {
        7, -151, -151, -151, -151,   59, -151, -151,   59, -151,
       59,   59,   59, -151, -151, -151, -151,   59, -151,   59,
       59,   59,   59,  193,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  194,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -151, -151
    },

    {
        7, -152, -152, -152, -152,   59, -152, -152,   59, -152,
       59,   59,   59, -152, -152, -152, -152,   59, -152,   59,
      195,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -152, -152
    },

    {
        7, -153, -153, -153, -153,   59, -153, -153,   59, -153,
       59,   59,   59, -153, -153, -153, -153,   59, -153,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -153, -153
    },

    {
        7, -154, -154, -154, -154,   59, -154, -154,   59, -154,
       59,   59,   59, -154, -154, -154, -154,   59, -154,   59,
       59,   59,   59,   59,   59,   59,   59,  196,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -154, -154

    },

    {
        7, -155, -155, -155, -155,   59, -155, -155,   59, -155,
       59,   59,   59, -155, -155, -155, -155,   59, -155,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,  197,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -155, -155
    },

    {
        7, -156, -156, -156, -156,   59, -156, -156,   59, -156,
       59,   59,   59, -156, -156, -156, -156,   59, -156,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  198,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -156, -156
    },

    {
        7, -157, -157, -157, -157,   59, -157, -157,   59, -157,
       59,   59,   59, -157, -157, -157, -157,   59, -157,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -157, -157
    },

    {
        7, -158, -158, -158, -158,   59, -158, -158,   59, -158,
       59,   59,   59, -158, -158, -158, -158,   59, -158,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  199,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -158, -158
    },

    {
        7, -159, -159, -159, -159,   59, -159, -159,   59, -159,
       59,   59,   59, -159, -159, -159, -159,   59, -159,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -159, -159

    },

    {
        7, -160, -160, -160, -160,   59, -160, -160,   59, -160,
       59,   59,   59, -160, -160, -160, -160,   59, -160,   59,
       59,   59,   59,   59,  200,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -160, -160
    },

    {
        7, -161, -161, -161, -161,   59, -161, -161,   59, -161,
       59,   59,   59, -161, -161, -161, -161,   59, -161,   59,
       59,   59,   59,   59,  201,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -161, -161
    },

    {
        7, -162, -162, -162, -162,   59, -162, -162,   59, -162,
       59,   59,   59, -162, -162, -162, -162,   59, -162,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  202,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -162, -162
    },

    {
        7, -163, -163, -163, -163,   59, -163, -163,   59, -163,
       59,   59,   59, -163, -163, -163, -163,   59, -163,   59,

       59,   59,   59,  203,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -163, -163
    },

    {
        7, -164, -164, -164, -164,   59, -164, -164,   59, -164,
       59,   59,   59, -164, -164, -164, -164,   59, -164,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -164, -164

    },

    {
        7, -165, -165, -165, -165,   59, -165, -165,   59, -165,
       59,   59,   59, -165, -165, -165, -165,   59, -165,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -165, -165
    },

    {
        7, -166, -166, -166, -166,   59, -166, -166,   59, -166,
       59,   59,   59, -166, -166, -166, -166,   59, -166,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,  204,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -166, -166
    },

    {
        7, -167, -167, -167, -167,   59, -167, -167,   59, -167,
       59,   59,   59, -167, -167, -167, -167,   59, -167,   59,
       59,   59,   59,   59,   59,   59,   59,  205,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -167, -167
    },

    {
        7, -168, -168, -168, -168,   59, -168, -168,   59, -168,
       59,   59,   59, -168, -168, -168, -168,   59, -168,   59,

       59,   59,   59,  206,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  207,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -168, -168
    },

    {
        7, -169, -169, -169, -169,   59, -169, -169,   59, -169,
       59,   59,   59, -169, -169, -169, -169,   59, -169,   59,
       59,   59,   59,  208,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  209,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -169, -169

    },

    {
        7, -170, -170, -170, -170,   59, -170, -170,   59, -170,
       59,   59,   59, -170, -170, -170, -170,   59, -170,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,  210,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -170, -170
    },

    {
        7, -171, -171, -171, -171,   59, -171, -171,   59, -171,
       59,   59,   59, -171, -171, -171, -171,   59, -171,   59,
       59,   59,   59,  211,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -171, -171
    },

    {
        7, -172, -172, -172, -172,   59, -172, -172,   59, -172,
       59,   59,   59, -172, -172, -172, -172,   59, -172,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -172, -172
    },

    {
        7, -173, -173, -173, -173,   59, -173, -173,   59, -173,
       59,   59,   59, -173, -173, -173, -173,   59, -173,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -173, -173
    },

    {
        7, -174, -174, -174, -174,   59, -174, -174,   59, -174,
       59,   59,   59, -174, -174, -174, -174,   59, -174,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -174, -174

    },

    {
        7, -175, -175, -175, -175, -175, -175, -175, -175, -175,
      175,  175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175
    },

    {
        7, -176, -176, -176, -176, -176, -176, -176, -176, -176,
      176,  176,  176, -176, -176, -176, -176, -176, -176,  176,
      176,  176,  176,  176,  176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,

     -176, -176, -176, -176, -176,  176,  176,  176,  176, -176,
     -176, -176, -176, -176, -176
    },

    {
        7, -177, -177, -177, -177,   59, -177, -177,   59, -177,
       59,   59,   59, -177, -177, -177, -177,   59, -177,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -177, -177
    },

    {
        7, -178, -178, -178, -178,   59, -178, -178,   59, -178,
       59,   59,   59, -178, -178, -178, -178,   59, -178,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  212,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -178, -178
    },

    {
        7, -179, -179, -179, -179,   59, -179, -179,   59, -179,
       59,   59,   59, -179, -179, -179, -179,   59, -179,   59,
       59,  213,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -179, -179

    },

    {
        7, -180, -180, -180, -180,   59, -180, -180,   59, -180,
       59,   59,   59, -180, -180, -180, -180,   59, -180,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  214,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -180, -180
    },

    {
        7, -181, -181, -181, -181,   59, -181, -181,   59, -181,
       59,   59,   59, -181, -181, -181, -181,   59, -181,  215,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,  216,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -181, -181
    },

    {
        7, -182, -182, -182, -182,   59, -182, -182,   59, -182,
       59,   59,   59, -182, -182, -182, -182,   59, -182,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  217,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -182, -182
    },

    {
        7, -183, -183, -183, -183,   59, -183, -183,   59, -183,
       59,   59,   59, -183, -183, -183, -183,   59, -183,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -183, -183
    },

    {
        7, -184, -184, -184, -184,   59, -184, -184,   59, -184,
       59,   59,   59, -184, -184, -184, -184,   59, -184,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  218,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -184, -184

    },

    {
        7, -185, -185, -185, -185,   59, -185, -185,   59, -185,
       59,   59,   59, -185, -185, -185, -185,   59, -185,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -185, -185
    },

    {
        7, -186, -186, -186, -186,   59, -186, -186,   59, -186,
       59,   59,   59, -186, -186, -186, -186,   59, -186,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  219,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -186, -186
    },

    {
        7, -187, -187, -187, -187,   59, -187, -187,   59, -187,
       59,   59,   59, -187, -187, -187, -187,   59, -187,   59,
       59,   59,  220,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -187, -187
    },

    {
        7, -188, -188, -188, -188,   59, -188, -188,   59, -188,
       59,   59,   59, -188, -188, -188, -188,   59, -188,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -188, -188
    },

    {
        7, -189, -189, -189, -189,   59, -189, -189,   59, -189,
       59,   59,   59, -189, -189, -189, -189,   59, -189,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  221,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -189, -189

    },

    {
        7, -190, -190, -190, -190,   59, -190, -190,   59, -190,
       59,   59,   59, -190, -190, -190, -190,   59, -190,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -190, -190
    },

    {
        7, -191, -191, -191, -191,   59, -191, -191,   59, -191,
       59,   59,   59, -191, -191, -191, -191,   59, -191,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -191, -191
    },

    {
        7, -192, -192, -192, -192,   59, -192, -192,   59, -192,
       59,   59,   59, -192, -192, -192, -192,   59, -192,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -192, -192
    },

    {
        7, -193, -193, -193, -193,   59, -193, -193,   59, -193,
       59,   59,   59, -193, -193, -193, -193,   59, -193,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -193, -193
    },

    {
        7, -194, -194, -194, -194,   59, -194, -194,   59, -194,
       59,   59,   59, -194, -194, -194, -194,   59, -194,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -194, -194

    },

    {
        7, -195, -195, -195, -195,   59, -195, -195,   59, -195,
       59,   59,   59, -195, -195, -195, -195,   59, -195,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -195, -195
    },

    {
        7, -196, -196, -196, -196,   59, -196, -196,   59, -196,
       59,   59,   59, -196, -196, -196, -196,   59, -196,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  222,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -196, -196
    },

    {
        7, -197, -197, -197, -197,   59, -197, -197,   59, -197,
       59,   59,   59, -197, -197, -197, -197,   59, -197,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  223,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -197, -197
    },

    {
        7, -198, -198, -198, -198,   59, -198, -198,   59, -198,
       59,   59,   59, -198, -198, -198, -198,   59, -198,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -198, -198
    },

    {
        7, -199, -199, -199, -199,   59, -199, -199,   59, -199,
       59,   59,   59, -199, -199, -199, -199,   59, -199,   59,
       59,   59,   59,  224,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -199, -199

    },

    {
        7, -200, -200, -200, -200,   59, -200, -200,   59, -200,
       59,   59,   59, -200, -200, -200, -200,   59, -200,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -200, -200
    },

    {
        7, -201, -201, -201, -201,   59, -201, -201,   59, -201,
       59,   59,   59, -201, -201, -201, -201,   59, -201,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -201, -201
    },

    {
        7, -202, -202, -202, -202,   59, -202, -202,   59, -202,
       59,   59,   59, -202, -202, -202, -202,   59, -202,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  225,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -202, -202
    },

    {
        7, -203, -203, -203, -203,   59, -203, -203,   59, -203,
       59,   59,   59, -203, -203, -203, -203,   59, -203,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -203, -203
    },

    {
        7, -204, -204, -204, -204,   59, -204, -204,   59, -204,
       59,   59,   59, -204, -204, -204, -204,   59, -204,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -204, -204

    },

    {
        7, -205, -205, -205, -205,   59, -205, -205,   59, -205,
       59,   59,   59, -205, -205, -205, -205,   59, -205,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  226,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -205, -205
    },

    {
        7, -206, -206, -206, -206,   59, -206, -206,   59, -206,
       59,   59,   59, -206, -206, -206, -206,   59, -206,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -206, -206
    },

    {
        7, -207, -207, -207, -207,   59, -207, -207,   59, -207,
       59,   59,   59, -207, -207, -207, -207,   59, -207,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -207, -207
    },

    {
        7, -208, -208, -208, -208,   59, -208, -208,   59, -208,
       59,   59,   59, -208, -208, -208, -208,   59, -208,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -208, -208
    },

    {
        7, -209, -209, -209, -209,   59, -209, -209,   59, -209,
       59,   59,   59, -209, -209, -209, -209,   59, -209,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -209, -209

    },

    {
        7, -210, -210, -210, -210,   59, -210, -210,   59, -210,
       59,   59,   59, -210, -210, -210, -210,   59, -210,   59,
       59,   59,  227,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -210, -210
    },

    {
        7, -211, -211, -211, -211,   59, -211, -211,   59, -211,
       59,   59,   59, -211, -211, -211, -211,   59, -211,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
      228,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -211, -211
    },

    {
        7, -212, -212, -212, -212,   59, -212, -212,   59, -212,
       59,   59,   59, -212, -212, -212, -212,   59, -212,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -212, -212
    },

    {
        7, -213, -213, -213, -213,   59, -213, -213,   59, -213,
       59,   59,   59, -213, -213, -213, -213,   59, -213,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  229,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -213, -213
    },

    {
        7, -214, -214, -214, -214,   59, -214, -214,   59, -214,
       59,   59,   59, -214, -214, -214, -214,   59, -214,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -214, -214

    },

    {
        7, -215, -215, -215, -215,   59, -215, -215,   59, -215,
       59,   59,   59, -215, -215, -215, -215,   59, -215,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  230,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -215, -215
    },

    {
        7, -216, -216, -216, -216,   59, -216, -216,   59, -216,
       59,   59,   59, -216, -216, -216, -216,   59, -216,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  231,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -216, -216
    },

    {
        7, -217, -217, -217, -217,   59, -217, -217,   59, -217,
       59,   59,   59, -217, -217, -217, -217,   59, -217,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -217, -217
    },

    {
        7, -218, -218, -218, -218,   59, -218, -218,   59, -218,
       59,   59,   59, -218, -218, -218, -218,   59, -218,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -218, -218
    },

    {
        7, -219, -219, -219, -219,   59, -219, -219,   59, -219,
       59,   59,   59, -219, -219, -219, -219,   59, -219,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -219, -219

    },

    {
        7, -220, -220, -220, -220,   59, -220, -220,   59, -220,
       59,   59,   59, -220, -220, -220, -220,   59, -220,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -220, -220
    },

    {
        7, -221, -221, -221, -221,   59, -221, -221,   59, -221,
       59,   59,   59, -221, -221, -221, -221,   59, -221,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -221, -221
    },

    {
        7, -222, -222, -222, -222,   59, -222, -222,   59, -222,
       59,   59,   59, -222, -222, -222, -222,   59, -222,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,  232,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -222, -222
    },

    {
        7, -223, -223, -223, -223,   59, -223, -223,   59, -223,
       59,   59,   59, -223, -223, -223, -223,   59, -223,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -223, -223
    },

    {
        7, -224, -224, -224, -224,   59, -224, -224,   59, -224,
       59,   59,   59, -224, -224, -224, -224,   59, -224,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  233,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -224, -224

    },

    {
        7, -225, -225, -225, -225,   59, -225, -225,   59, -225,
       59,   59,   59, -225, -225, -225, -225,   59, -225,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -225, -225
    },

    {
        7, -226, -226, -226, -226,   59, -226, -226,   59, -226,
       59,   59,   59, -226, -226, -226, -226,   59, -226,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -226, -226
    },

    {
        7, -227, -227, -227, -227,   59, -227, -227,   59, -227,
       59,   59,   59, -227, -227, -227, -227,   59, -227,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -227, -227
    },

    {
        7, -228, -228, -228, -228,   59, -228, -228,   59, -228,
       59,   59,   59, -228, -228, -228, -228,   59, -228,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -228, -228
    },

    {
        7, -229, -229, -229, -229,   59, -229, -229,   59, -229,
       59,   59,   59, -229, -229, -229, -229,   59, -229,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,  234,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -229, -229

    },

    {
        7, -230, -230, -230, -230,   59, -230, -230,   59, -230,
       59,   59,   59, -230, -230, -230, -230,   59, -230,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -230, -230
    },

    {
        7, -231, -231, -231, -231,   59, -231, -231,   59, -231,
       59,   59,   59, -231, -231, -231, -231,   59, -231,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  235,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -231, -231
    },

    {
        7, -232, -232, -232, -232,   59, -232, -232,   59, -232,
       59,   59,   59, -232, -232, -232, -232,   59, -232,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  236,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -232, -232
    },

    {
        7, -233, -233, -233, -233,   59, -233, -233,   59, -233,
       59,   59,   59, -233, -233, -233, -233,   59, -233,   59,

       59,   59,   59,  237,   59,   59,   59,   59,   59,   59,
      238,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -233, -233
    },

    {
        7, -234, -234, -234, -234,   59, -234, -234,   59, -234,
       59,   59,   59, -234, -234, -234, -234,   59, -234,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  239,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -234, -234

    },

    {
        7, -235, -235, -235, -235,   59, -235, -235,   59, -235,
       59,   59,   59, -235, -235, -235, -235,   59, -235,  240,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -235, -235
    },

    {
        7, -236, -236, -236, -236,   59, -236, -236,   59, -236,
       59,   59,   59, -236, -236, -236, -236,   59, -236,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -236, -236
    },

    {
        7, -237, -237, -237, -237,   59, -237, -237,   59, -237,
       59,   59,   59, -237, -237, -237, -237,   59, -237,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  241,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -237, -237
    },

    {
        7, -238, -238, -238, -238,   59, -238, -238,   59, -238,
       59,   59,   59, -238, -238, -238, -238,   59, -238,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,  242,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -238, -238
    },

    {
        7, -239, -239, -239, -239,   59, -239, -239,   59, -239,
       59,   59,   59, -239, -239, -239, -239,   59, -239,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -239, -239

    },

    {
        7, -240, -240, -240, -240,   59, -240, -240,   59, -240,
       59,   59,   59, -240, -240, -240, -240,   59, -240,   59,
       59,  243,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -240, -240
    },

    {
        7, -241, -241, -241, -241,   59, -241, -241,   59, -241,
       59,   59,   59, -241, -241, -241, -241,   59, -241,  244,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -241, -241
    },

    {
        7, -242, -242, -242, -242,   59, -242, -242,   59, -242,
       59,   59,   59, -242, -242, -242, -242,   59, -242,   59,
       59,   59,  245,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -242, -242
    },

    {
        7, -243, -243, -243, -243,   59, -243, -243,   59, -243,
       59,   59,   59, -243, -243, -243, -243,   59, -243,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  246,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -243, -243
    },

    {
        7, -244, -244, -244, -244,   59, -244, -244,   59, -244,
       59,   59,   59, -244, -244, -244, -244,   59, -244,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
      247,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -244, -244

    },

    {
        7, -245, -245, -245, -245,   59, -245, -245,   59, -245,
       59,   59,   59, -245, -245, -245, -245,   59, -245,   59,
       59,   59,   59,  248,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -245, -245
    },

    {
        7, -246, -246, -246, -246,   59, -246, -246,   59, -246,
       59,   59,   59, -246, -246, -246, -246,   59, -246,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -246, -246
    },

    {
        7, -247, -247, -247, -247,   59, -247, -247,   59, -247,
       59,   59,   59, -247, -247, -247, -247,   59, -247,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,  249,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -247, -247
    },

    {
        7, -248, -248, -248, -248,   59, -248, -248,   59, -248,
       59,   59,   59, -248, -248, -248, -248,   59, -248,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,  250,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -248, -248
    },

    {
        7, -249, -249, -249, -249,   59, -249, -249,   59, -249,
       59,   59,   59, -249, -249, -249, -249,   59, -249,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  251,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -249, -249

    },

    {
        7, -250, -250, -250, -250,   59, -250, -250,   59, -250,
       59,   59,   59, -250, -250, -250, -250,   59, -250,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -250, -250
    },

    {
        7, -251, -251, -251, -251,   59, -251, -251,   59, -251,
       59,   59,   59, -251, -251, -251, -251,   59, -251,   59,
       59,   59,   59,  252,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -251, -251
    },

    {
        7, -252, -252, -252, -252,   59, -252, -252,   59, -252,
       59,   59,   59, -252, -252, -252, -252,   59, -252,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59, -252, -252
    },

    } ;

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvcleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[253] =
    {   0,
        0,    0,    0,    0,    0,    0,   92,   90,    3,    2,
        1,   13,   54,    1,   90,    9,    9,    1,   90,    1,
       90,   60,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,    1,
       55,   53,   15,   14,   91,    0,    0,    0,   25,    9,
        0,    0,    0,   26,   39,    0,   27,   40,   89,   89,
       89,   89,   89,   89,   36,   89,   89,   89,   89,   89,
       30,   83,   89,   89,   89,   17,   24,   89,   89,   89,
       89,   75,   89,   89,   89,   89,   76,   89,   10,   11,
       12,    4,    0,    7,    7,    6,   28,   19,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   34,   89,   89,   84,   89,
       21,   22,   88,   89,   89,   89,   89,   89,   89,   29,
        0,    0,   89,   89,   89,   89,   89,   89,   64,   62,
       63,   89,   61,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   69,   89,   89,   89,   70,   89,   32,   89,
       89,   89,   89,   20,   87,   89,   89,   89,   89,   89,
       89,   31,   82,   18,    5,    8,   16,   89,   89,   89,
       89,   89,   48,   89,   49,   89,   89,   58,   89,   68,
       66,   41,   67,   65,   45,   89,   89,   56,   89,   33,

       35,   89,   81,   80,   89,   74,   72,   73,   71,   89,
       89,   79,   89,   78,   89,   89,   43,   42,   47,   57,
       44,   89,   59,   89,   23,   50,   51,   52,   89,   38,
       89,   89,   89,   89,   89,   46,   89,   89,   37,   89,
       89,   89,   89,   89,   89,   77,   89,   89,   89,   86,
       89,   85
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    4,    5,    6,    7,    8,    4,
        4,    1,    1,    4,    1,    4,    9,   10,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    4,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        4,    1,    4,    1,   44,    1,   45,   46,   45,   47,

       48,   45,   28,   49,   50,   28,   28,   28,   28,   51,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   52,
       28,   28,    4,   53,    4,   54,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[92] =
    {   0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc_flex_debug;
int cvc_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvctext;
#line 1 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
#line 2 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
/********************************************************************
 * AUTHORS: Vijay Ganesh
 *
 * BEGIN DATE: November, 2005
 *
 * LICENSE: Please view LICENSE file in the home dir of this Program
 ********************************************************************/

#include <iostream>
#include "stp/Parser/parser.h"
#include "parsecvc.hpp"
#include "stp/cpp_interface.h"

  using namespace std;
  using namespace stp;
  extern char *cvctext;
  extern int cvcerror (const char *msg);


#line 2956 "/home/klee/klee_build/stp/build/lib/Parser/lexcvc.cpp"

#define INITIAL 0
#define COMMENT 1
#define STRING_LITERAL 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvclex_destroy (void );

int cvcget_debug (void );

void cvcset_debug (int debug_flag  );

YY_EXTRA_TYPE cvcget_extra (void );

void cvcset_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvcget_in (void );

void cvcset_in  (FILE * in_str  );

FILE *cvcget_out (void );

void cvcset_out  (FILE * out_str  );

int cvcget_leng (void );

char *cvcget_text (void );

int cvcget_lineno (void );

void cvcset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvcwrap (void );
#else
extern int cvcwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvctext, cvcleng, 1, cvcout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvcin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvcin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cvcin))==0 && ferror(cvcin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvcin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvclex (void);

#define YY_DECL int cvclex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvctext and cvcleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 35 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"


#line 3146 "/home/klee/klee_build/stp/build/lib/Parser/lexcvc.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvcin )
			cvcin = stdin;

		if ( ! cvcout )
			cvcout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvcensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc_create_buffer(cvcin,YY_BUF_SIZE );
		}

		cvc_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		while ( (yy_current_state = yy_nxt[yy_current_state][ yy_ec[YY_SC_TO_UI(*yy_cp)]  ]) > 0 )
			{
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}

			++yy_cp;
			}

		yy_current_state = -yy_current_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < cvcleng; ++yyl )
				if ( cvctext[yyl] == '\n' )
					   
    cvclineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 37 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return cvctext[0];}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 39 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ /*Skip new line */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 40 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ /* skip whitespace */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 41 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ cvclval.node = new ASTNode(GlobalParserBM->CreateBVConst(cvctext+2,  2)); return BVCONST_TOK;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 42 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ cvclval.node = new ASTNode(GlobalParserBM->CreateBVConst(cvctext+4,  2)); return BVCONST_TOK;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 43 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ cvclval.node = new ASTNode(GlobalParserBM->CreateBVConst(cvctext+2, 16)); return BVCONST_TOK;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 44 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ cvclval.node = new ASTNode(GlobalParserBM->CreateBVConst(cvctext+2, 16)); return BVCONST_TOK;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 45 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ cvclval.node = new ASTNode(GlobalParserBM->CreateBVConst(cvctext+4, 16)); return BVCONST_TOK;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 46 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ cvclval.uintval = strtoul(cvctext, NULL, 10); return NUMERAL_TOK;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 47 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ cvclval.str = strdup(cvctext+2); return BIN_BASED_NUMBER;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 48 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ cvclval.str = strdup(cvctext+2); return DEC_BASED_NUMBER;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 49 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ cvclval.str = strdup(cvctext+2); return HEX_BASED_NUMBER;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ BEGIN COMMENT;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 52 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ BEGIN INITIAL; /* return to normal mode */}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ /* stay in comment mode */}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 55 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return ARRAY_TOK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 56 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return OF_TOK; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 57 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return WITH_TOK; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 58 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return AND_TOK;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 59 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return NAND_TOK;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 60 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return NOR_TOK;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 61 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return NOT_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 62 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return EXCEPT_TOK; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 63 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return OR_TOK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 64 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return NEQ_TOK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 65 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return ASSIGN_TOK;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 66 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return IMPLIES_TOK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 67 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return IFF_TOK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 68 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return XOR_TOK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 69 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return IF_TOK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 70 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return THEN_TOK; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 71 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return ELSE_TOK; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 72 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return ELSIF_TOK; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 73 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return END_TOK; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 74 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return ENDIF_TOK; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 75 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BV_TOK;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 76 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BV_TOK;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 77 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BOOLEAN_TOK;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 78 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVLEFTSHIFT_TOK;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 79 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVRIGHTSHIFT_TOK;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 80 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSHL_TOK;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 81 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVLSHR_TOK;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 82 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVASHR_TOK;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 83 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVPLUS_TOK;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 84 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSUB_TOK;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 85 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVUMINUS_TOK;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 86 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVMULT_TOK;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 87 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVDIV_TOK;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 88 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVMOD_TOK;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 89 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return SBVDIV_TOK;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 90 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return SBVREM_TOK;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 91 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return SBVREM_TOK;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 92 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVNEG_TOK;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 93 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVAND_TOK;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 94 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVOR_TOK;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 95 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVXOR_TOK;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 96 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVNAND_TOK;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 97 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVNOR_TOK;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 98 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVXNOR_TOK;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 99 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVCONCAT_TOK;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 100 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVLT_TOK;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 101 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVGT_TOK;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 102 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVLE_TOK;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 103 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVGE_TOK;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 104 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSLT_TOK;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 105 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSGT_TOK;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 106 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSLE_TOK;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 107 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSGE_TOK;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 108 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSX_TOK;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 109 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVZX_TOK;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 110 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSLT_TOK;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 111 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSGT_TOK;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 112 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSLE_TOK;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 113 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSGE_TOK;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 114 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVSX_TOK;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 115 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BVZX_TOK;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 116 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BOOLEXTRACT_TOK;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 117 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return BOOL_TO_BV_TOK;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 118 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return ASSERT_TOK; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 119 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return QUERY_TOK; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 120 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return FALSELIT_TOK;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 121 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return TRUELIT_TOK;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 122 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return IN_TOK;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 123 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return LET_TOK;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 124 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return COUNTEREXAMPLE_TOK;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 125 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return COUNTEREXAMPLE_TOK;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 126 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return PUSH_TOK;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 127 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ return POP_TOK;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 129 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{
  ASTNode nptr;
  if (GlobalParserInterface->LookupSymbol(cvctext,nptr)) // it's a symbol.
  {
   cvclval.node = GlobalParserInterface->newNode(nptr);
   if ((cvclval.node)->GetType() == BOOLEAN_TYPE)
     return FORMID_TOK;
   else
     return TERMID_TOK;
   }

   // Making 4.4M strings took 1B instructions. So I split out the above case
   // which occurs >90% of the time (so avoiding turning the char* into a string).
   string str(cvctext);
   if (GlobalParserInterface->letMgr->isLetDeclared(str)) // a let.
   {
     nptr= GlobalParserInterface->letMgr->resolveLet(str);
     cvclval.node = GlobalParserInterface->newNode(nptr);

     if ((cvclval.node)->GetType() == BOOLEAN_TYPE)
       return FORMID_TOK;
     else
       return TERMID_TOK;
   }

   // It hasn't been found. So it's not already declared.
   // it has not been seen before.
   cvclval.str = strdup(cvctext);
   return STRING_TOK;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 160 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
{ cvcerror("Illegal input character."); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 161 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"
ECHO;
	YY_BREAK
#line 3713 "/home/klee/klee_build/stp/build/lib/Parser/lexcvc.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STRING_LITERAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvcin at a new source and called
			 * cvclex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvcin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvcwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cvclex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvcrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvcrestart(cvcin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvcrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state = yy_nxt[yy_current_state][(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)];
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	yy_current_state = yy_nxt[yy_current_state][1];
	yy_is_jam = (yy_current_state <= 0);

	if ( ! yy_is_jam )
		{
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvcrestart(cvcin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvcwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    cvclineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvcrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvcensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc_create_buffer(cvcin,YY_BUF_SIZE );
	}

	cvc_init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvcpop_buffer_state();
	 *		cvcpush_buffer_state(new_buffer);
     */
	cvcensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvcwrap()) processing, but the only time this flag
	 * is looked at is after cvcwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvcin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvcalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvcalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc_create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc_create_buffer()
 * 
 */
    void cvc_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvcfree((void *) b->yy_ch_buf  );

	cvcfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvcrestart() or at EOF.
 */
    static void cvc_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc_init_buffer was _probably_
     * called from cvcrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvcpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvcensure_buffer_stack();

	/* This block is copied from cvc_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc_switch_to_buffer. */
	cvc_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvcpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvcensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvcalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvcensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvcrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvcensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvcalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvclex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc_scan_bytes() instead.
 */
YY_BUFFER_STATE cvc_scan_string (yyconst char * yystr )
{
    
	return cvc_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvclex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvcalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvctext[cvcleng] = (yy_hold_char); \
		(yy_c_buf_p) = cvctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvcleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvcget_lineno  (void)
{
        
    return cvclineno;
}

/** Get the input stream.
 * 
 */
FILE *cvcget_in  (void)
{
        return cvcin;
}

/** Get the output stream.
 * 
 */
FILE *cvcget_out  (void)
{
        return cvcout;
}

/** Get the length of the current token.
 * 
 */
int cvcget_leng  (void)
{
        return cvcleng;
}

/** Get the current token.
 * 
 */

char *cvcget_text  (void)
{
        return cvctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvcset_lineno (int  line_number )
{
    
    cvclineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc_switch_to_buffer
 */
void cvcset_in (FILE *  in_str )
{
        cvcin = in_str ;
}

void cvcset_out (FILE *  out_str )
{
        cvcout = out_str ;
}

int cvcget_debug  (void)
{
        return cvc_flex_debug;
}

void cvcset_debug (int  bdebug )
{
        cvc_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvclex_destroy(), so don't allocate here.
     */

    /* We do not touch cvclineno unless the option is enabled. */
    cvclineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvcin = stdin;
    cvcout = stdout;
#else
    cvcin = (FILE *) 0;
    cvcout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvclex_init()
     */
    return 0;
}

/* cvclex_destroy is for both reentrant and non-reentrant scanners. */
int cvclex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvcpop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvcfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvclex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvcalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvcrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvcfree (void * ptr )
{
	free( (char *) ptr );	/* see cvcrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 161 "/home/klee/klee_build/stp/src/lib/Parser/cvc.lex"



