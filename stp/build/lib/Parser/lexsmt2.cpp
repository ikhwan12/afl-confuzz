#line 2 "/home/klee/klee_build/stp/build/lib/Parser/lexsmt2.cpp"

#line 4 "/home/klee/klee_build/stp/build/lib/Parser/lexsmt2.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer smt2_create_buffer
#define yy_delete_buffer smt2_delete_buffer
#define yy_flex_debug smt2_flex_debug
#define yy_init_buffer smt2_init_buffer
#define yy_flush_buffer smt2_flush_buffer
#define yy_load_buffer_state smt2_load_buffer_state
#define yy_switch_to_buffer smt2_switch_to_buffer
#define yyin smt2in
#define yyleng smt2leng
#define yylex smt2lex
#define yylineno smt2lineno
#define yyout smt2out
#define yyrestart smt2restart
#define yytext smt2text
#define yywrap smt2wrap
#define yyalloc smt2alloc
#define yyrealloc smt2realloc
#define yyfree smt2free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE smt2restart(smt2in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int smt2leng;

extern FILE *smt2in, *smt2out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE smt2lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-smt2lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < smt2leng; ++yyl )\
                    if ( smt2text[yyl] == '\n' )\
                        --smt2lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up smt2text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up smt2text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via smt2restart()), so that the user can continue scanning by
	 * just pointing smt2in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when smt2text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int smt2leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow smt2wrap()'s to do buffer switches
 * instead of setting up a fresh smt2in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void smt2restart (FILE *input_file  );
void smt2_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE smt2_create_buffer (FILE *file,int size  );
void smt2_delete_buffer (YY_BUFFER_STATE b  );
void smt2_flush_buffer (YY_BUFFER_STATE b  );
void smt2push_buffer_state (YY_BUFFER_STATE new_buffer  );
void smt2pop_buffer_state (void );

static void smt2ensure_buffer_stack (void );
static void smt2_load_buffer_state (void );
static void smt2_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER smt2_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE smt2_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE smt2_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE smt2_scan_bytes (yyconst char *bytes,int len  );

void *smt2alloc (yy_size_t  );
void *smt2realloc (void *,yy_size_t  );
void smt2free (void *  );

#define yy_new_buffer smt2_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        smt2ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            smt2_create_buffer(smt2in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        smt2ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            smt2_create_buffer(smt2in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define smt2wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *smt2in = (FILE *) 0, *smt2out = (FILE *) 0;

typedef int yy_state_type;

extern int smt2lineno;

int smt2lineno = 1;

extern char *smt2text;
#define yytext_ptr smt2text
static yyconst flex_int16_t yy_nxt[][47] =
    {
    {
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    },

    {
        9,   10,   11,   12,   13,   14,   15,   16,   17,   13,
       13,   18,   19,   20,   21,   13,   22,   23,   13,   13,
       13,   10,   24,   25,   26,   27,   28,   29,   30,   13,
       13,   31,   13,   32,   13,   33,   34,   35,   36,   37,
       38,   13,   13,   39,   13,   40,   41

    },

    {
        9,   10,   11,   12,   13,   14,   15,   16,   17,   13,
       13,   18,   19,   20,   21,   13,   22,   23,   13,   13,
       13,   10,   24,   25,   26,   27,   28,   29,   30,   13,
       13,   31,   13,   32,   13,   33,   34,   35,   36,   37,
       38,   13,   13,   39,   13,   40,   41
    },

    {
        9,   42,   42,   43,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42

    },

    {
        9,   42,   42,   43,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42
    },

    {
        9,   44,   44,   45,   44,   46,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   47,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44

    },

    {
        9,   44,   44,   45,   44,   46,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   47,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44
    },

    {
        9,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48

    },

    {
        9,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48
    },

    {
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9

    },

    {
        9,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10
    },

    {
        9,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11

    },

    {
        9,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12
    },

    {
        9,  -13,  -13,  -13,   49,  -13,  -13,  -13,  -13,   49,
       49,   49,  -13,  -13,   49,   49,   49,   49,   49,   49,
       49,  -13,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -13

    },

    {
        9,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14
    },

    {
        9,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,   50,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,   51,  -15,  -15,  -15

    },

    {
        9,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16
    },

    {
        9,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17

    },

    {
        9,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
       52,   53,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18
    },

    {
        9,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,   54,   55,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,   56,  -19,   57,
      -19,  -19,  -19,  -19,  -19,  -19,  -19

    },

    {
        9,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20
    },

    {
        9,  -21,  -21,  -21,   49,  -21,  -21,  -21,  -21,   49,
       49,   49,  -21,  -21,   49,   58,   49,   49,   49,   49,
       49,  -21,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -21

    },

    {
        9,  -22,  -22,  -22,   49,  -22,  -22,  -22,  -22,   49,
       49,   49,  -22,  -22,   49,   49,   49,   49,   49,   49,
       49,  -22,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   59,   49,
       49,   49,   49,   49,   49,   49,  -22
    },

    {
        9,  -23,  -23,  -23,   49,  -23,  -23,  -23,  -23,   49,
       49,   49,  -23,  -23,   49,   49,   49,   49,   49,   49,
       49,  -23,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   60,   49,   49,   49,   49,   61,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -23

    },

    {
        9,  -24,  -24,  -24,   49,  -24,  -24,  -24,  -24,   49,
       49,   49,  -24,  -24,   49,   49,   49,   49,   49,   49,
       49,  -24,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -24
    },

    {
        9,  -25,  -25,  -25,   49,  -25,  -25,  -25,  -25,   49,
       49,   49,  -25,  -25,   49,   49,   49,   49,   49,   49,
       49,  -25,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   62,   49,   49,   49,   63,
       49,   49,   49,   49,   49,   49,  -25

    },

    {
        9,  -26,  -26,  -26,   49,  -26,  -26,  -26,  -26,   49,
       49,   49,  -26,  -26,   49,   49,   49,   49,   49,   49,
       49,  -26,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   64,   49,   49,   49,  -26
    },

    {
        9,  -27,  -27,  -27,   49,  -27,  -27,  -27,  -27,   49,
       49,   49,  -27,  -27,   49,   49,   49,   49,   49,   49,
       49,  -27,   49,   49,   49,   49,   49,   49,   49,   49,
       65,   49,   49,   49,   49,   49,   66,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -27

    },

    {
        9,  -28,  -28,  -28,   49,  -28,  -28,  -28,  -28,   49,
       49,   49,  -28,  -28,   49,   49,   49,   49,   49,   49,
       49,  -28,   49,   49,   49,   49,   49,   67,   49,   49,
       49,   68,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -28
    },

    {
        9,  -29,  -29,  -29,   49,  -29,  -29,  -29,  -29,   49,
       49,   49,  -29,  -29,   49,   49,   49,   49,   49,   49,
       49,  -29,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   69,   49,   49,  -29

    },

    {
        9,  -30,  -30,  -30,   49,  -30,  -30,  -30,  -30,   49,
       49,   49,  -30,  -30,   49,   49,   49,   49,   49,   49,
       49,  -30,   49,   70,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -30
    },

    {
        9,  -31,  -31,  -31,   49,  -31,  -31,  -31,  -31,   49,
       49,   49,  -31,  -31,   49,   49,   49,   49,   49,   49,
       49,  -31,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       71,   49,   49,   49,   49,   49,  -31

    },

    {
        9,  -32,  -32,  -32,   49,  -32,  -32,  -32,  -32,   49,
       49,   49,  -32,  -32,   49,   49,   49,   49,   49,   49,
       49,  -32,   49,   49,   49,   49,   49,   72,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -32
    },

    {
        9,  -33,  -33,  -33,   49,  -33,  -33,  -33,  -33,   49,
       49,   49,  -33,  -33,   49,   49,   49,   49,   49,   49,
       49,  -33,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   73,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -33

    },

    {
        9,  -34,  -34,  -34,   49,  -34,  -34,  -34,  -34,   49,
       49,   49,  -34,  -34,   49,   49,   49,   49,   49,   49,
       49,  -34,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   74,   49,
       49,   49,   49,   49,   49,   49,  -34
    },

    {
        9,  -35,  -35,  -35,   49,  -35,  -35,  -35,  -35,   49,
       49,   49,  -35,  -35,   49,   49,   49,   49,   49,   49,
       49,  -35,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   75,   49,   49,   49,
       49,   76,   49,   49,   49,   49,  -35

    },

    {
        9,  -36,  -36,  -36,   49,  -36,  -36,  -36,  -36,   49,
       49,   49,  -36,  -36,   49,   49,   49,   49,   49,   49,
       49,  -36,   49,   49,   49,   49,   49,   77,   49,   49,
       49,   49,   49,   49,   49,   49,   78,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -36
    },

    {
        9,  -37,  -37,  -37,   49,  -37,  -37,  -37,  -37,   49,
       49,   49,  -37,  -37,   49,   49,   49,   49,   49,   49,
       49,  -37,   49,   49,   49,   49,   49,   79,   49,   49,
       49,   80,   49,   49,   49,   49,   49,   49,   49,   49,
       81,   49,   49,   49,   49,   49,  -37

    },

    {
        9,  -38,  -38,  -38,   49,  -38,  -38,  -38,  -38,   49,
       49,   49,  -38,  -38,   49,   49,   49,   49,   49,   49,
       49,  -38,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   82,   49,
       49,   49,   49,   49,   49,   49,  -38
    },

    {
        9,  -39,  -39,  -39,   49,  -39,  -39,  -39,  -39,   49,
       49,   49,  -39,  -39,   49,   49,   49,   49,   49,   49,
       49,  -39,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   83,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -39

    },

    {
        9,  -40,  -40,  -40,   49,  -40,  -40,  -40,  -40,   49,
       49,   49,  -40,  -40,   49,   49,   49,   49,   49,   49,
       49,  -40,   49,   49,   49,   49,   49,   84,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -40
    },

    {
        9,   85,   85,   86,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   87

    },

    {
        9,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42
    },

    {
        9,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43

    },

    {
        9,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44
    },

    {
        9,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45

    },

    {
        9,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46
    },

    {
        9,   88,   88,  -47,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88

    },

    {
        9,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48
    },

    {
        9,  -49,  -49,  -49,   49,  -49,  -49,  -49,  -49,   49,
       49,   49,  -49,  -49,   49,   49,   49,   49,   49,   49,
       49,  -49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -49

    },

    {
        9,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,   89,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50
    },

    {
        9,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,   90,  -51,  -51,  -51,  -51,   90,   90,   90,  -51,
      -51,  -51,  -51,   90,   90,   90,   90,   90,   90,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51

    },

    {
        9,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,   91,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52
    },

    {
        9,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
       52,   53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53

    },

    {
        9,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,   92,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54
    },

    {
        9,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,   93,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55

    },

    {
        9,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,   94,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56
    },

    {
        9,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,   95,  -57,   96,  -57,  -57,  -57,
       97,  -57,  -57,  -57,  -57,  -57,  -57

    },

    {
        9,  -58,  -58,  -58,   49,  -58,  -58,  -58,  -58,   49,
       49,   49,  -58,  -58,   49,   49,   49,   49,   49,   49,
       49,  -58,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -58
    },

    {
        9,  -59,  -59,  -59,   49,  -59,  -59,  -59,  -59,   49,
       49,   49,  -59,  -59,   49,   49,   49,   49,   49,   49,
       49,  -59,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   98,   49,
       49,   49,   49,   49,   49,   49,  -59

    },

    {
        9,  -60,  -60,  -60,   49,  -60,  -60,  -60,  -60,   49,
       49,   49,  -60,  -60,   49,   49,   49,   49,   49,   49,
       49,  -60,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       99,   49,   49,   49,   49,   49,  -60
    },

    {
        9,  -61,  -61,  -61,   49,  -61,  -61,  -61,  -61,   49,
       49,   49,  -61,  -61,   49,   49,   49,   49,   49,   49,
       49,  -61,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  100,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -61

    },

    {
        9,  -62,  -62,  -62,   49,  -62,  -62,  -62,  -62,   49,
       49,   49,  -62,  -62,   49,   49,   49,   49,   49,   49,
       49,  -62,   49,   49,   49,   49,  101,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -62
    },

    {
        9,  -63,  -63,  -63,   49,  -63,  -63,  -63,  -63,   49,
       49,   49,  -63,  -63,   49,   49,   49,   49,   49,   49,
       49,  -63,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,  102,
       49,   49,   49,   49,   49,   49,  -63

    },

    {
        9,  -64,  -64,  -64,   49,  -64,  -64,  -64,  -64,   49,
       49,  103,  -64,  -64,   49,   49,   49,   49,   49,   49,
       49,  -64,   49,  104,   49,  105,   49,   49,   49,   49,
       49,   49,   49,  106,  107,  108,  109,   49,   49,  110,
       49,  111,   49,  112,   49,   49,  -64
    },

    {
        9,  -65,  -65,  -65,   49,  -65,  -65,  -65,  -65,   49,
       49,   49,  -65,  -65,   49,   49,   49,   49,   49,   49,
       49,  -65,   49,   49,   49,   49,   49,  113,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -65

    },

    {
        9,  -66,  -66,  -66,   49,  -66,  -66,  -66,  -66,   49,
       49,   49,  -66,  -66,   49,   49,   49,   49,   49,   49,
       49,  -66,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  114,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -66
    },

    {
        9,  -67,  -67,  -67,   49,  -67,  -67,  -67,  -67,   49,
       49,   49,  -67,  -67,   49,   49,   49,   49,   49,   49,
       49,  -67,   49,   49,   49,  115,   49,   49,  116,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -67

    },

    {
        9,  -68,  -68,  -68,   49,  -68,  -68,  -68,  -68,   49,
       49,   49,  -68,  -68,   49,   49,   49,   49,   49,   49,
       49,  -68,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,  117,
       49,   49,   49,   49,   49,   49,  -68
    },

    {
        9,  -69,  -69,  -69,   49,  -69,  -69,  -69,  -69,   49,
       49,   49,  -69,  -69,   49,   49,   49,   49,   49,   49,
       49,  -69,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  118,   49,   49,   49,   49,   49,   49,   49,   49,
      119,   49,   49,   49,   49,   49,  -69

    },

    {
        9,  -70,  -70,  -70,   49,  -70,  -70,  -70,  -70,   49,
       49,   49,  -70,  -70,   49,   49,   49,   49,   49,   49,
       49,  -70,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,  120,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -70
    },

    {
        9,  -71,  -71,  -71,   49,  -71,  -71,  -71,  -71,   49,
       49,   49,  -71,  -71,   49,   49,   49,   49,   49,   49,
       49,  -71,   49,   49,   49,   49,   49,  121,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -71

    },

    {
        9,  -72,  -72,  -72,   49,  -72,  -72,  -72,  -72,   49,
       49,   49,  -72,  -72,   49,   49,   49,   49,   49,   49,
       49,  -72,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      122,   49,   49,   49,   49,   49,  -72
    },

    {
        9,  -73,  -73,  -73,   49,  -73,  -73,  -73,  -73,   49,
       49,   49,  -73,  -73,   49,   49,   49,   49,   49,   49,
       49,  -73,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      123,   49,   49,   49,   49,   49,  -73

    },

    {
        9,  -74,  -74,  -74,   49,  -74,  -74,  -74,  -74,   49,
       49,   49,  -74,  -74,   49,   49,   49,   49,   49,   49,
       49,  -74,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -74
    },

    {
        9,  -75,  -75,  -75,   49,  -75,  -75,  -75,  -75,   49,
       49,   49,  -75,  -75,   49,   49,   49,   49,   49,   49,
       49,  -75,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,  124,   49,   49,
       49,   49,   49,   49,   49,   49,  -75

    },

    {
        9,  -76,  -76,  -76,   49,  -76,  -76,  -76,  -76,   49,
       49,   49,  -76,  -76,   49,   49,   49,   49,   49,   49,
       49,  -76,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,  125,
       49,   49,   49,   49,   49,   49,  -76
    },

    {
        9,  -77,  -77,  -77,   49,  -77,  -77,  -77,  -77,   49,
       49,   49,  -77,  -77,   49,   49,   49,   49,   49,   49,
       49,  -77,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,  126,   49,   49,
       49,   49,   49,   49,   49,   49,  -77

    },

    {
        9,  -78,  -78,  -78,   49,  -78,  -78,  -78,  -78,   49,
       49,   49,  -78,  -78,   49,   49,   49,   49,   49,   49,
       49,  -78,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      127,   49,   49,   49,   49,   49,  -78
    },

    {
        9,  -79,  -79,  -79,   49,  -79,  -79,  -79,  -79,   49,
       49,   49,  -79,  -79,   49,   49,   49,   49,   49,   49,
       49,  -79,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,  128,   49,   49,   49,   49,   49,   49,
      129,   49,   49,   49,   49,   49,  -79

    },

    {
        9,  -80,  -80,  -80,   49,  -80,  -80,  -80,  -80,   49,
       49,   49,  -80,  -80,   49,   49,   49,   49,   49,   49,
       49,  -80,   49,   49,   49,   49,   49,   49,   49,  130,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -80
    },

    {
        9,  -81,  -81,  -81,   49,  -81,  -81,  -81,  -81,   49,
       49,   49,  -81,  -81,   49,   49,   49,   49,   49,   49,
       49,  -81,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  131,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -81

    },

    {
        9,  -82,  -82,  -82,   49,  -82,  -82,  -82,  -82,   49,
       49,   49,  -82,  -82,   49,   49,   49,   49,   49,   49,
       49,  -82,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  132,   49,   49,   49,   49,  -82
    },

    {
        9,  -83,  -83,  -83,   49,  -83,  -83,  -83,  -83,   49,
       49,   49,  -83,  -83,   49,   49,   49,   49,   49,   49,
       49,  -83,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  133,   49,
       49,   49,   49,   49,   49,   49,  -83

    },

    {
        9,  -84,  -84,  -84,   49,  -84,  -84,  -84,  -84,   49,
       49,   49,  -84,  -84,   49,   49,   49,   49,   49,   49,
       49,  -84,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  134,   49,
       49,   49,   49,   49,   49,   49,  -84
    },

    {
        9,   85,   85,   86,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   87

    },

    {
        9,   85,   85,   86,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   87
    },

    {
        9,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87

    },

    {
        9,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88
    },

    {
        9,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,   89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89

    },

    {
        9,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,   90,  -90,  -90,  -90,  -90,   90,   90,   90,  -90,
      -90,  -90,  -90,   90,   90,   90,   90,   90,   90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90
    },

    {
        9,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,   91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,  -91,  -91,  -91

    },

    {
        9,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      135,  -92,  -92,  -92,  -92,  -92,  -92
    },

    {
        9,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  136,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93

    },

    {
        9,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  137,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94
    },

    {
        9,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      138,  -95,  -95,  -95,  -95,  -95,  -95

    },

    {
        9,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  139,  -96,  -96,  -96,  -96,  -96
    },

    {
        9,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  140,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97

    },

    {
        9,  -98,  -98,  -98,   49,  -98,  -98,  -98,  -98,   49,
       49,   49,  -98,  -98,   49,   49,   49,   49,   49,   49,
       49,  -98,   49,  141,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -98
    },

    {
        9,  -99,  -99,  -99,   49,  -99,  -99,  -99,  -99,   49,
       49,   49,  -99,  -99,   49,   49,   49,   49,   49,   49,
      142,  -99,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  -99

    },

    {
        9, -100, -100, -100,   49, -100, -100, -100, -100,   49,
       49,   49, -100, -100,   49,   49,   49,   49,   49,   49,
       49, -100,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,  143,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -100
    },

    {
        9, -101, -101, -101,   49, -101, -101, -101, -101,   49,
       49,   49, -101, -101,   49,   49,   49,   49,   49,   49,
       49, -101,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -101

    },

    {
        9, -102, -102, -102,   49, -102, -102, -102, -102,   49,
       49,   49, -102, -102,   49,   49,   49,   49,   49,   49,
       49, -102,   49,   49,   49,   49,   49,  144,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -102
    },

    {
        9, -103, -103, -103,   49, -103, -103, -103, -103,   49,
       49,  103, -103, -103,   49,   49,   49,   49,   49,   49,
       49, -103,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -103

    },

    {
        9, -104, -104, -104,   49, -104, -104, -104, -104,   49,
       49,   49, -104, -104,   49,   49,   49,   49,   49,   49,
       49, -104,   49,   49,   49,   49,  145,   49,   49,   49,
       49,   49,   49,   49,   49,  146,   49,   49,   49,  147,
       49,   49,   49,   49,   49,   49, -104
    },

    {
        9, -105, -105, -105,   49, -105, -105, -105, -105,   49,
       49,   49, -105, -105,   49,   49,   49,   49,   49,   49,
       49, -105,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  148,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -105

    },

    {
        9, -106, -106, -106,   49, -106, -106, -106, -106,   49,
       49,   49, -106, -106,   49,   49,   49,   49,   49,   49,
       49, -106,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,  149,
       49,   49,   49,   49,   49,   49, -106
    },

    {
        9, -107, -107, -107,   49, -107, -107, -107, -107,   49,
       49,   49, -107, -107,   49,   49,   49,   49,   49,   49,
       49, -107,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  150,   49,   49,   49,   49, -107

    },

    {
        9, -108, -108, -108,   49, -108, -108, -108, -108,   49,
       49,   49, -108, -108,   49,   49,   49,   49,   49,   49,
       49, -108,   49,  151,   49,   49,   49,  152,   49,   49,
       49,   49,   49,   49,   49,   49,  153,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -108
    },

    {
        9, -109, -109, -109,   49, -109, -109, -109, -109,   49,
       49,   49, -109, -109,   49,   49,   49,   49,   49,   49,
       49, -109,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  154,   49,
       49,   49,   49,   49,   49,   49, -109

    },

    {
        9, -110, -110, -110,   49, -110, -110, -110, -110,   49,
       49,   49, -110, -110,   49,   49,   49,   49,   49,   49,
       49, -110,   49,   49,   49,   49,  155,   49,   49,  156,
      157,   49,   49,  158,  159,   49,   49,   49,  160,   49,
       49,  161,   49,   49,   49,   49, -110
    },

    {
        9, -111, -111, -111,   49, -111, -111, -111, -111,   49,
       49,   49, -111, -111,   49,   49,   49,   49,   49,   49,
       49, -111,   49,   49,   49,   49,  162,   49,   49,  163,
       49,   49,   49,  164,   49,   49,   49,   49,  165,   49,
       49,   49,   49,   49,   49,   49, -111

    },

    {
        9, -112, -112, -112,   49, -112, -112, -112, -112,   49,
       49,   49, -112, -112,   49,   49,   49,   49,   49,   49,
       49, -112,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  166,  167,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -112
    },

    {
        9, -113, -113, -113,   49, -113, -113, -113, -113,   49,
       49,   49, -113, -113,   49,   49,   49,   49,   49,   49,
       49, -113,   49,   49,   49,  168,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -113

    },

    {
        9, -114, -114, -114,   49, -114, -114, -114, -114,   49,
       49,   49, -114, -114,   49,   49,   49,   49,   49,   49,
       49, -114,   49,   49,   49,  169,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -114
    },

    {
        9, -115, -115, -115,   49, -115, -115, -115, -115,   49,
       49,   49, -115, -115,   49,   49,   49,   49,   49,   49,
       49, -115,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,  170,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -115

    },

    {
        9, -116, -116, -116,   49, -116, -116, -116, -116,   49,
       49,   49, -116, -116,   49,   49,   49,   49,   49,   49,
       49, -116,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  171,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -116
    },

    {
        9, -117, -117, -117,   49, -117, -117, -117, -117,   49,
       49,   49, -117, -117,   49,   49,   49,   49,   49,   49,
       49, -117,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      172,   49,   49,   49,   49,   49, -117

    },

    {
        9, -118, -118, -118,   49, -118, -118, -118, -118,   49,
       49,   49, -118, -118,   49,   49,   49,   49,   49,   49,
       49, -118,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      173,   49,   49,   49,   49,   49, -118
    },

    {
        9, -119, -119, -119,   49, -119, -119, -119, -119,   49,
       49,   49, -119, -119,   49,   49,   49,   49,   49,   49,
       49, -119,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  174,   49,
       49,   49,   49,   49,   49,   49, -119

    },

    {
        9, -120, -120, -120,   49, -120, -120, -120, -120,   49,
       49,   49, -120, -120,   49,   49,   49,   49,   49,   49,
       49, -120,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,  175,
       49,   49,   49,   49,   49,   49, -120
    },

    {
        9, -121, -121, -121,   49, -121, -121, -121, -121,   49,
       49,   49, -121, -121,   49,   49,   49,   49,   49,   49,
       49, -121,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -121

    },

    {
        9, -122, -122, -122,   49, -122, -122, -122, -122,   49,
       49,   49, -122, -122,   49,   49,   49,   49,   49,   49,
       49, -122,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -122
    },

    {
        9, -123, -123, -123,   49, -123, -123, -123, -123,   49,
       49,   49, -123, -123,   49,   49,   49,   49,   49,   49,
       49, -123,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -123

    },

    {
        9, -124, -124, -124,   49, -124, -124, -124, -124,   49,
       49,   49, -124, -124,   49,   49,   49,   49,   49,   49,
       49, -124,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -124
    },

    {
        9, -125, -125, -125,   49, -125, -125, -125, -125,   49,
       49,   49, -125, -125,   49,   49,   49,   49,   49,   49,
       49, -125,   49,   49,   49,   49,   49,   49,   49,   49,
      176,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -125

    },

    {
        9, -126, -126, -126,   49, -126, -126, -126, -126,   49,
       49,   49, -126, -126,   49,   49,   49,   49,   49,   49,
       49, -126,   49,   49,   49,   49,   49,  177,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -126
    },

    {
        9, -127, -127, -127,   49, -127, -127, -127, -127,   49,
       49,   49, -127, -127,   49,   49,   49,   49,   49,   49,
       49, -127,   49,  178,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -127

    },

    {
        9, -128, -128, -128,   49, -128, -128, -128, -128,   49,
       49,   49, -128, -128,   49,   49,   49,   49,   49,   49,
       49, -128,   49,   49,   49,   49,   49,  179,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -128
    },

    {
        9, -129, -129, -129,   49, -129, -129, -129, -129,  180,
       49,   49, -129, -129,   49,   49,   49,   49,   49,   49,
       49, -129,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -129

    },

    {
        9, -130, -130, -130,   49, -130, -130, -130, -130,   49,
       49,   49, -130, -130,   49,   49,   49,   49,   49,   49,
       49, -130,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  181,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -130
    },

    {
        9, -131, -131, -131,   49, -131, -131, -131, -131,   49,
       49,   49, -131, -131,   49,   49,   49,   49,   49,   49,
       49, -131,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  182,   49,
       49,   49,   49,   49,   49,   49, -131

    },

    {
        9, -132, -132, -132,   49, -132, -132, -132, -132,   49,
       49,   49, -132, -132,   49,   49,   49,   49,   49,   49,
       49, -132,   49,   49,   49,   49,   49,  183,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -132
    },

    {
        9, -133, -133, -133,   49, -133, -133, -133, -133,   49,
       49,   49, -133, -133,   49,   49,   49,   49,   49,   49,
       49, -133,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -133

    },

    {
        9, -134, -134, -134,   49, -134, -134, -134, -134,   49,
       49,   49, -134, -134,   49,   49,   49,   49,   49,   49,
       49, -134,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  184,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -134
    },

    {
        9, -135, -135, -135, -135, -135, -135, -135, -135, -135,
     -135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
     -135, -135, -135, -135, -135, -135, -135,  185, -135, -135,
     -135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
     -135, -135, -135, -135, -135, -135, -135

    },

    {
        9, -136, -136, -136, -136, -136, -136, -136, -136, -136,
     -136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
     -136, -136, -136, -136, -136, -136, -136, -136,  186, -136,
     -136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
     -136, -136, -136, -136, -136, -136, -136
    },

    {
        9, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137,  187, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137

    },

    {
        9, -138, -138, -138, -138, -138, -138, -138, -138,  188,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138
    },

    {
        9, -139, -139, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139, -139, -139, -139, -139, -139,  189, -139,
     -139, -139, -139, -139, -139, -139, -139

    },

    {
        9, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
      190, -140, -140, -140, -140, -140, -140
    },

    {
        9, -141, -141, -141,   49, -141, -141, -141, -141,   49,
       49,   49, -141, -141,   49,   49,   49,   49,   49,   49,
       49, -141,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,  191,   49, -141

    },

    {
        9, -142, -142, -142,   49, -142, -142, -142, -142,   49,
       49,   49, -142, -142,   49,   49,   49,   49,   49,   49,
       49, -142,   49,   49,   49,   49,   49,  192,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -142
    },

    {
        9, -143, -143, -143,   49, -143, -143, -143, -143,   49,
       49,   49, -143, -143,   49,   49,   49,   49,   49,   49,
       49, -143,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -143

    },

    {
        9, -144, -144, -144,   49, -144, -144, -144, -144,   49,
       49,   49, -144, -144,   49,   49,   49,   49,   49,   49,
       49, -144,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  193,   49,
       49,   49,   49,   49,   49,   49, -144
    },

    {
        9, -145, -145, -145,   49, -145, -145, -145, -145,   49,
       49,   49, -145, -145,   49,   49,   49,   49,   49,   49,
       49, -145,   49,   49,   49,   49,  194,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -145

    },

    {
        9, -146, -146, -146,   49, -146, -146, -146, -146,   49,
       49,   49, -146, -146,   49,   49,   49,   49,   49,   49,
       49, -146,   49,   49,   49,   49,  195,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -146
    },

    {
        9, -147, -147, -147,   49, -147, -147, -147, -147,   49,
       49,   49, -147, -147,   49,   49,   49,   49,   49,   49,
       49, -147,   49,   49,   49,   49,   49,   49,   49,   49,
      196,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -147

    },

    {
        9, -148, -148, -148,   49, -148, -148, -148, -148,   49,
       49,   49, -148, -148,   49,   49,   49,   49,   49,   49,
       49, -148,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,  197,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -148
    },

    {
        9, -149, -149, -149,   49, -149, -149, -149, -149,   49,
       49,   49, -149, -149,   49,   49,   49,   49,   49,   49,
       49, -149,   49,   49,   49,   49,   49,   49,   49,   49,
      198,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -149

    },

    {
        9, -150, -150, -150,   49, -150, -150, -150, -150,   49,
       49,   49, -150, -150,   49,   49,   49,   49,   49,   49,
       49, -150,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,  199,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -150
    },

    {
        9, -151, -151, -151,   49, -151, -151, -151, -151,   49,
       49,   49, -151, -151,   49,   49,   49,   49,   49,   49,
       49, -151,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  200,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -151

    },

    {
        9, -152, -152, -152,   49, -152, -152, -152, -152,   49,
       49,   49, -152, -152,   49,   49,   49,   49,   49,   49,
       49, -152,   49,   49,   49,   49,   49,   49,   49,  201,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -152
    },

    {
        9, -153, -153, -153,   49, -153, -153, -153, -153,   49,
       49,   49, -153, -153,   49,   49,   49,   49,   49,   49,
       49, -153,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  202,   49,
      203,   49,   49,   49,   49,   49, -153

    },

    {
        9, -154, -154, -154,   49, -154, -154, -154, -154,   49,
       49,   49, -154, -154,   49,   49,   49,   49,   49,   49,
       49, -154,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -154
    },

    {
        9, -155, -155, -155,   49, -155, -155, -155, -155,   49,
       49,   49, -155, -155,   49,   49,   49,   49,   49,   49,
       49, -155,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  204,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -155

    },

    {
        9, -156, -156, -156,   49, -156, -156, -156, -156,   49,
       49,   49, -156, -156,   49,   49,   49,   49,   49,   49,
       49, -156,   49,   49,   49,   49,   49,  205,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      206,   49,   49,   49,   49,   49, -156
    },

    {
        9, -157, -157, -157,   49, -157, -157, -157, -157,   49,
       49,   49, -157, -157,   49,   49,   49,   49,   49,   49,
       49, -157,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,  207,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -157

    },

    {
        9, -158, -158, -158,   49, -158, -158, -158, -158,   49,
       49,   49, -158, -158,   49,   49,   49,   49,   49,   49,
       49, -158,   49,   49,   49,   49,   49,  208,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      209,   49,   49,   49,   49,   49, -158
    },

    {
        9, -159, -159, -159,   49, -159, -159, -159, -159,   49,
       49,   49, -159, -159,   49,   49,   49,   49,   49,   49,
       49, -159,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  210,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -159

    },

    {
        9, -160, -160, -160,   49, -160, -160, -160, -160,   49,
       49,   49, -160, -160,   49,   49,   49,   49,   49,   49,
       49, -160,   49,   49,   49,   49,   49,  211,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -160
    },

    {
        9, -161, -161, -161,   49, -161, -161, -161, -161,   49,
       49,   49, -161, -161,   49,   49,   49,   49,   49,   49,
       49, -161,   49,   49,  212,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -161

    },

    {
        9, -162, -162, -162,   49, -162, -162, -162, -162,   49,
       49,   49, -162, -162,   49,   49,   49,   49,   49,   49,
       49, -162,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  213,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -162
    },

    {
        9, -163, -163, -163,   49, -163, -163, -163, -163,   49,
       49,   49, -163, -163,   49,   49,   49,   49,   49,   49,
       49, -163,   49,   49,   49,   49,   49,  214,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      215,   49,   49,   49,   49,   49, -163

    },

    {
        9, -164, -164, -164,   49, -164, -164, -164, -164,   49,
       49,   49, -164, -164,   49,   49,   49,   49,   49,   49,
       49, -164,   49,   49,   49,   49,   49,  216,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      217,   49,   49,   49,   49,   49, -164
    },

    {
        9, -165, -165, -165,   49, -165, -165, -165, -165,   49,
       49,   49, -165, -165,   49,   49,   49,   49,   49,   49,
       49, -165,   49,   49,   49,   49,   49,  218,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -165

    },

    {
        9, -166, -166, -166,   49, -166, -166, -166, -166,   49,
       49,   49, -166, -166,   49,   49,   49,   49,   49,   49,
       49, -166,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  219,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -166
    },

    {
        9, -167, -167, -167,   49, -167, -167, -167, -167,   49,
       49,   49, -167, -167,   49,   49,   49,   49,   49,   49,
       49, -167,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  220,   49,
       49,   49,   49,   49,   49,   49, -167

    },

    {
        9, -168, -168, -168,   49, -168, -168, -168, -168,   49,
       49,   49, -168, -168,   49,   49,   49,   49,   49,   49,
       49, -168,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,  221,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -168
    },

    {
        9, -169, -169, -169,   49, -169, -169, -169, -169,   49,
       49,   49, -169, -169,   49,   49,   49,   49,   49,   49,
       49, -169,   49,  222,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -169

    },

    {
        9, -170, -170, -170,   49, -170, -170, -170, -170,   49,
       49,   49, -170, -170,   49,   49,   49,   49,   49,   49,
       49, -170,   49,  223,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -170
    },

    {
        9, -171, -171, -171,   49, -171, -171, -171, -171,   49,
       49,   49, -171, -171,   49,   49,   49,   49,   49,   49,
       49, -171,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  224,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -171

    },

    {
        9, -172, -172, -172,   49, -172, -172, -172, -172,   49,
       49,   49, -172, -172,   49,   49,   49,   49,   49,   49,
       49, -172,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  225,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -172
    },

    {
        9, -173, -173, -173,   49, -173, -173, -173, -173,   49,
       49,   49, -173, -173,   49,   49,   49,   49,   49,   49,
       49, -173,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -173

    },

    {
        9, -174, -174, -174,   49, -174, -174, -174, -174,   49,
       49,   49, -174, -174,   49,   49,   49,   49,   49,   49,
       49, -174,   49,  226,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -174
    },

    {
        9, -175, -175, -175,   49, -175, -175, -175, -175,   49,
       49,   49, -175, -175,   49,   49,   49,   49,   49,   49,
       49, -175,   49,   49,   49,   49,   49,  227,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -175

    },

    {
        9, -176, -176, -176,   49, -176, -176, -176, -176,   49,
       49,   49, -176, -176,   49,   49,   49,   49,   49,   49,
       49, -176,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -176
    },

    {
        9, -177, -177, -177,   49, -177, -177, -177, -177,   49,
       49,   49, -177, -177,   49,   49,   49,   49,   49,   49,
       49, -177,   49,  228,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -177

    },

    {
        9, -178, -178, -178,   49, -178, -178, -178, -178,   49,
       49,   49, -178, -178,   49,   49,   49,   49,   49,   49,
       49, -178,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      229,   49,   49,   49,   49,   49, -178
    },

    {
        9, -179, -179, -179,   49, -179, -179, -179, -179,   49,
       49,   49, -179, -179,   49,   49,   49,   49,   49,   49,
       49, -179,   49,   49,   49,  230,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -179

    },

    {
        9, -180, -180, -180,   49, -180, -180, -180, -180,   49,
       49,   49, -180, -180,   49,   49,   49,   49,   49,   49,
       49, -180,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  231,   49,  232,   49,   49,  233,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -180
    },

    {
        9, -181, -181, -181,   49, -181, -181, -181, -181,   49,
       49,   49, -181, -181,   49,   49,   49,   49,   49,   49,
       49, -181,  234,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -181

    },

    {
        9, -182, -182, -182,   49, -182, -182, -182, -182,   49,
       49,   49, -182, -182,   49,   49,   49,   49,   49,   49,
       49, -182,   49,   49,   49,   49,   49,  235,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -182
    },

    {
        9, -183, -183, -183,   49, -183, -183, -183, -183,   49,
       49,   49, -183, -183,   49,   49,   49,   49,   49,   49,
       49, -183,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -183

    },

    {
        9, -184, -184, -184,   49, -184, -184, -184, -184,   49,
       49,   49, -184, -184,   49,   49,   49,   49,   49,   49,
       49, -184,  236,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -184
    },

    {
        9, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185, -185, -185, -185,  237,
     -185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185, -185

    },

    {
        9, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186,  238, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186, -186, -186, -186
    },

    {
        9, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187, -187, -187,
      239, -187, -187, -187, -187, -187, -187

    },

    {
        9, -188, -188, -188, -188, -188, -188, -188, -188, -188,
     -188, -188, -188, -188, -188, -188, -188, -188, -188, -188,
     -188, -188, -188, -188, -188, -188, -188, -188, -188, -188,
     -188, -188, -188,  240, -188, -188, -188, -188, -188, -188,
     -188, -188, -188, -188, -188, -188, -188
    },

    {
        9, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189,  241, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189

    },

    {
        9, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190,  242, -190, -190, -190, -190, -190
    },

    {
        9, -191, -191, -191,   49, -191, -191, -191, -191,   49,
       49,   49, -191, -191,   49,   49,   49,   49,   49,   49,
       49, -191,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -191

    },

    {
        9, -192, -192, -192,   49, -192, -192, -192, -192,   49,
       49,   49, -192, -192,   49,   49,   49,   49,   49,   49,
       49, -192,   49,   49,   49,  243,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -192
    },

    {
        9, -193, -193, -193,   49, -193, -193, -193, -193,   49,
       49,   49, -193, -193,   49,   49,   49,   49,   49,   49,
       49, -193,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      244,   49,   49,   49,   49,   49, -193

    },

    {
        9, -194, -194, -194,   49, -194, -194, -194, -194,   49,
       49,   49, -194, -194,   49,   49,   49,   49,   49,   49,
       49, -194,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -194
    },

    {
        9, -195, -195, -195,   49, -195, -195, -195, -195,   49,
       49,   49, -195, -195,   49,   49,   49,   49,   49,   49,
       49, -195,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -195

    },

    {
        9, -196, -196, -196,   49, -196, -196, -196, -196,   49,
       49,   49, -196, -196,   49,   49,   49,   49,   49,   49,
       49, -196,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  245,   49,
       49,   49,   49,   49,   49,   49, -196
    },

    {
        9, -197, -197, -197,   49, -197, -197, -197, -197,   49,
       49,   49, -197, -197,   49,   49,   49,   49,   49,   49,
       49, -197,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,  246,   49,   49,
       49,   49,   49,   49,   49,   49, -197

    },

    {
        9, -198, -198, -198,   49, -198, -198, -198, -198,   49,
       49,   49, -198, -198,   49,   49,   49,   49,   49,   49,
       49, -198,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  247,   49,
       49,   49,   49,   49,   49,   49, -198
    },

    {
        9, -199, -199, -199,   49, -199, -199, -199, -199,   49,
       49,   49, -199, -199,   49,   49,   49,   49,   49,   49,
       49, -199,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -199

    },

    {
        9, -200, -200, -200,   49, -200, -200, -200, -200,   49,
       49,   49, -200, -200,   49,   49,   49,   49,   49,   49,
       49, -200,   49,   49,   49,   49,  248,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -200
    },

    {
        9, -201, -201, -201,   49, -201, -201, -201, -201,   49,
       49,   49, -201, -201,   49,   49,   49,   49,   49,   49,
       49, -201,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -201

    },

    {
        9, -202, -202, -202,   49, -202, -202, -202, -202,   49,
       49,   49, -202, -202,   49,   49,   49,   49,   49,   49,
       49, -202,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -202
    },

    {
        9, -203, -203, -203,   49, -203, -203, -203, -203,   49,
       49,   49, -203, -203,   49,   49,   49,   49,   49,   49,
       49, -203,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -203

    },

    {
        9, -204, -204, -204,   49, -204, -204, -204, -204,   49,
       49,   49, -204, -204,   49,   49,   49,   49,   49,   49,
       49, -204,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,  249,   49,   49,   49, -204
    },

    {
        9, -205, -205, -205,   49, -205, -205, -205, -205,   49,
       49,   49, -205, -205,   49,   49,   49,   49,   49,   49,
       49, -205,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -205

    },

    {
        9, -206, -206, -206,   49, -206, -206, -206, -206,   49,
       49,   49, -206, -206,   49,   49,   49,   49,   49,   49,
       49, -206,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -206
    },

    {
        9, -207, -207, -207,   49, -207, -207, -207, -207,   49,
       49,   49, -207, -207,   49,   49,   49,   49,   49,   49,
       49, -207,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -207

    },

    {
        9, -208, -208, -208,   49, -208, -208, -208, -208,   49,
       49,   49, -208, -208,   49,   49,   49,   49,   49,   49,
       49, -208,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -208
    },

    {
        9, -209, -209, -209,   49, -209, -209, -209, -209,   49,
       49,   49, -209, -209,   49,   49,   49,   49,   49,   49,
       49, -209,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -209

    },

    {
        9, -210, -210, -210,   49, -210, -210, -210, -210,   49,
       49,   49, -210, -210,   49,   49,   49,   49,   49,   49,
       49, -210,   49,   49,   49,   49,  250,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -210
    },

    {
        9, -211, -211, -211,   49, -211, -211, -211, -211,   49,
       49,   49, -211, -211,   49,   49,   49,   49,   49,   49,
       49, -211,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,  251,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -211

    },

    {
        9, -212, -212, -212,   49, -212, -212, -212, -212,   49,
       49,   49, -212, -212,   49,   49,   49,   49,   49,   49,
       49, -212,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -212
    },

    {
        9, -213, -213, -213,   49, -213, -213, -213, -213,   49,
       49,   49, -213, -213,   49,   49,   49,   49,   49,   49,
       49, -213,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,  252,   49,   49,   49, -213

    },

    {
        9, -214, -214, -214,   49, -214, -214, -214, -214,   49,
       49,   49, -214, -214,   49,   49,   49,   49,   49,   49,
       49, -214,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -214
    },

    {
        9, -215, -215, -215,   49, -215, -215, -215, -215,   49,
       49,   49, -215, -215,   49,   49,   49,   49,   49,   49,
       49, -215,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -215

    },

    {
        9, -216, -216, -216,   49, -216, -216, -216, -216,   49,
       49,   49, -216, -216,   49,   49,   49,   49,   49,   49,
       49, -216,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -216
    },

    {
        9, -217, -217, -217,   49, -217, -217, -217, -217,   49,
       49,   49, -217, -217,   49,   49,   49,   49,   49,   49,
       49, -217,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -217

    },

    {
        9, -218, -218, -218,   49, -218, -218, -218, -218,   49,
       49,   49, -218, -218,   49,   49,   49,   49,   49,   49,
       49, -218,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,  253,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -218
    },

    {
        9, -219, -219, -219,   49, -219, -219, -219, -219,   49,
       49,   49, -219, -219,   49,   49,   49,   49,   49,   49,
       49, -219,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  254,   49,
       49,   49,   49,   49,   49,   49, -219

    },

    {
        9, -220, -220, -220,   49, -220, -220, -220, -220,   49,
       49,   49, -220, -220,   49,   49,   49,   49,   49,   49,
       49, -220,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -220
    },

    {
        9, -221, -221, -221,   49, -221, -221, -221, -221,  255,
       49,   49, -221, -221,   49,   49,   49,   49,   49,   49,
       49, -221,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -221

    },

    {
        9, -222, -222, -222,   49, -222, -222, -222, -222,   49,
       49,   49, -222, -222,   49,   49,   49,   49,   49,   49,
       49, -222,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      256,   49,   49,   49,   49,   49, -222
    },

    {
        9, -223, -223, -223,   49, -223, -223, -223, -223,   49,
       49,   49, -223, -223,   49,   49,   49,   49,   49,   49,
       49, -223,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  257,   49,
       49,   49,   49,   49,   49,   49, -223

    },

    {
        9, -224, -224, -224,   49, -224, -224, -224, -224,   49,
       49,   49, -224, -224,   49,   49,   49,   49,   49,   49,
       49, -224,   49,   49,   49,   49,   49,  258,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -224
    },

    {
        9, -225, -225, -225,   49, -225, -225, -225, -225,   49,
       49,   49, -225, -225,   49,   49,   49,   49,   49,   49,
       49, -225,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  259,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -225

    },

    {
        9, -226, -226, -226,   49, -226, -226, -226, -226,   49,
       49,   49, -226, -226,   49,   49,   49,   49,   49,   49,
       49, -226,   49,   49,   49,  260,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -226
    },

    {
        9, -227, -227, -227,   49, -227, -227, -227, -227,   49,
       49,   49, -227, -227,   49,   49,   49,   49,   49,   49,
       49, -227,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -227

    },

    {
        9, -228, -228, -228,   49, -228, -228, -228, -228,   49,
       49,   49, -228, -228,   49,   49,   49,   49,   49,   49,
       49, -228,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      261,   49,   49,   49,   49,   49, -228
    },

    {
        9, -229, -229, -229,   49, -229, -229, -229, -229,   49,
       49,   49, -229, -229,   49,   49,   49,   49,   49,   49,
       49, -229,   49,   49,   49,   49,   49,  262,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -229

    },

    {
        9, -230, -230, -230,   49, -230, -230, -230, -230,   49,
       49,   49, -230, -230,   49,   49,   49,   49,   49,   49,
       49, -230,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      263,   49,   49,   49,   49,   49, -230
    },

    {
        9, -231, -231, -231,   49, -231, -231, -231, -231,   49,
       49,   49, -231, -231,   49,   49,   49,   49,   49,   49,
       49, -231,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  264,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -231

    },

    {
        9, -232, -232, -232,   49, -232, -232, -232, -232,   49,
       49,   49, -232, -232,   49,   49,   49,   49,   49,   49,
       49, -232,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  265,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -232
    },

    {
        9, -233, -233, -233,   49, -233, -233, -233, -233,   49,
       49,   49, -233, -233,   49,   49,   49,   49,   49,   49,
       49, -233,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,  266,   49,   49,
       49,   49,   49,   49,   49,   49, -233

    },

    {
        9, -234, -234, -234,   49, -234, -234, -234, -234,   49,
       49,   49, -234, -234,   49,   49,   49,   49,   49,   49,
       49, -234,   49,   49,   49,   49,   49,  267,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -234
    },

    {
        9, -235, -235, -235,   49, -235, -235, -235, -235,   49,
       49,   49, -235, -235,   49,   49,   49,   49,   49,   49,
       49, -235,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -235

    },

    {
        9, -236, -236, -236,   49, -236, -236, -236, -236,   49,
       49,   49, -236, -236,   49,   49,   49,   49,   49,   49,
       49, -236,   49,   49,   49,   49,   49,  268,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -236
    },

    {
        9, -237, -237, -237, -237, -237, -237, -237, -237, -237,
     -237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
     -237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
     -237, -237, -237, -237, -237, -237,  269, -237, -237, -237,
     -237, -237, -237, -237, -237, -237, -237

    },

    {
        9, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238,  270, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238
    },

    {
        9, -239, -239, -239, -239, -239, -239, -239, -239,  271,
     -239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
     -239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
     -239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
     -239, -239, -239, -239, -239, -239, -239

    },

    {
        9, -240, -240, -240, -240, -240, -240, -240, -240, -240,
     -240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
     -240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
     -240,  272, -240, -240, -240, -240, -240, -240, -240, -240,
     -240, -240, -240, -240, -240, -240, -240
    },

    {
        9, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241,  273, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241

    },

    {
        9, -242, -242, -242, -242, -242, -242, -242, -242, -242,
     -242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
     -242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
     -242, -242, -242, -242, -242, -242, -242, -242, -242,  274,
     -242, -242, -242, -242, -242, -242, -242
    },

    {
        9, -243, -243, -243,   49, -243, -243, -243, -243,   49,
       49,   49, -243, -243,   49,   49,   49,   49,   49,   49,
       49, -243,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -243

    },

    {
        9, -244, -244, -244,   49, -244, -244, -244, -244,   49,
       49,   49, -244, -244,   49,   49,   49,   49,   49,   49,
       49, -244,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -244
    },

    {
        9, -245, -245, -245,   49, -245, -245, -245, -245,   49,
       49,   49, -245, -245,   49,   49,   49,   49,   49,   49,
       49, -245,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -245

    },

    {
        9, -246, -246, -246,   49, -246, -246, -246, -246,   49,
       49,   49, -246, -246,   49,   49,   49,   49,   49,   49,
       49, -246,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -246
    },

    {
        9, -247, -247, -247,   49, -247, -247, -247, -247,   49,
       49,   49, -247, -247,   49,   49,   49,   49,   49,   49,
       49, -247,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -247

    },

    {
        9, -248, -248, -248,   49, -248, -248, -248, -248,   49,
       49,   49, -248, -248,   49,   49,   49,   49,   49,   49,
       49, -248,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -248
    },

    {
        9, -249, -249, -249,   49, -249, -249, -249, -249,   49,
       49,   49, -249, -249,   49,   49,   49,   49,   49,   49,
       49, -249,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -249

    },

    {
        9, -250, -250, -250,   49, -250, -250, -250, -250,   49,
       49,   49, -250, -250,   49,   49,   49,   49,   49,   49,
       49, -250,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -250
    },

    {
        9, -251, -251, -251,   49, -251, -251, -251, -251,   49,
       49,   49, -251, -251,   49,   49,   49,   49,   49,   49,
       49, -251,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -251

    },

    {
        9, -252, -252, -252,   49, -252, -252, -252, -252,   49,
       49,   49, -252, -252,   49,   49,   49,   49,   49,   49,
       49, -252,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -252
    },

    {
        9, -253, -253, -253,   49, -253, -253, -253, -253,   49,
       49,   49, -253, -253,   49,   49,   49,   49,   49,   49,
       49, -253,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -253

    },

    {
        9, -254, -254, -254,   49, -254, -254, -254, -254,   49,
       49,   49, -254, -254,   49,   49,   49,   49,   49,   49,
       49, -254,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -254
    },

    {
        9, -255, -255, -255,   49, -255, -255, -255, -255,   49,
       49,   49, -255, -255,   49,   49,   49,   49,   49,   49,
       49, -255,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,  275,
       49,   49,   49,   49,   49,   49, -255

    },

    {
        9, -256, -256, -256,   49, -256, -256, -256, -256,   49,
       49,   49, -256, -256,   49,   49,   49,   49,   49,   49,
       49, -256,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -256
    },

    {
        9, -257, -257, -257,   49, -257, -257, -257, -257,   49,
       49,   49, -257, -257,   49,   49,   49,   49,   49,   49,
       49, -257,   49,   49,   49,   49,   49,  276,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -257

    },

    {
        9, -258, -258, -258,   49, -258, -258, -258, -258,  277,
       49,   49, -258, -258,   49,   49,   49,   49,   49,   49,
       49, -258,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -258
    },

    {
        9, -259, -259, -259,   49, -259, -259, -259, -259,   49,
       49,   49, -259, -259,   49,   49,   49,   49,   49,   49,
       49, -259,   49,   49,   49,  278,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -259

    },

    {
        9, -260, -260, -260,   49, -260, -260, -260, -260,   49,
       49,   49, -260, -260,   49,   49,   49,   49,   49,   49,
       49, -260,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      279,   49,   49,   49,   49,   49, -260
    },

    {
        9, -261, -261, -261,   49, -261, -261, -261, -261,   49,
       49,   49, -261, -261,   49,   49,   49,   49,   49,   49,
       49, -261,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -261

    },

    {
        9, -262, -262, -262,   49, -262, -262, -262, -262,   49,
       49,   49, -262, -262,   49,   49,   49,   49,   49,   49,
       49, -262,  280,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -262
    },

    {
        9, -263, -263, -263,   49, -263, -263, -263, -263,   49,
       49,   49, -263, -263,   49,   49,   49,   49,   49,   49,
       49, -263,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -263

    },

    {
        9, -264, -264, -264,   49, -264, -264, -264, -264,   49,
       49,   49, -264, -264,   49,   49,   49,   49,   49,   49,
       49, -264,   49,   49,   49,   49,   49,   49,  281,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -264
    },

    {
        9, -265, -265, -265,   49, -265, -265, -265, -265,   49,
       49,   49, -265, -265,   49,   49,   49,   49,   49,   49,
       49, -265,   49,   49,   49,   49,   49,   49,   49,  282,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -265

    },

    {
        9, -266, -266, -266,   49, -266, -266, -266, -266,   49,
       49,   49, -266, -266,   49,   49,   49,   49,   49,   49,
       49, -266,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      283,   49,   49,   49,   49,   49, -266
    },

    {
        9, -267, -267, -267,   49, -267, -267, -267, -267,   49,
       49,   49, -267, -267,   49,   49,   49,   49,   49,   49,
       49, -267,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,  284,   49,   49, -267

    },

    {
        9, -268, -268, -268,   49, -268, -268, -268, -268,   49,
       49,   49, -268, -268,   49,   49,   49,   49,   49,   49,
       49, -268,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,  285,   49,   49, -268
    },

    {
        9, -269, -269, -269, -269, -269, -269, -269, -269, -269,
     -269, -269, -269, -269, -269, -269, -269, -269, -269, -269,
     -269, -269, -269, -269, -269, -269, -269, -269, -269, -269,
     -269, -269, -269, -269, -269, -269, -269, -269,  286, -269,
     -269, -269, -269, -269, -269, -269, -269

    },

    {
        9, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270,  287, -270, -270, -270, -270, -270
    },

    {
        9, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271,  288,
     -271, -271, -271, -271, -271, -271, -271

    },

    {
        9, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272,  289, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272
    },

    {
        9, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273

    },

    {
        9, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274
    },

    {
        9, -275, -275, -275,   49, -275, -275, -275, -275,   49,
       49,   49, -275, -275,   49,   49,   49,   49,   49,   49,
       49, -275,   49,  290,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -275

    },

    {
        9, -276, -276, -276,   49, -276, -276, -276, -276,  291,
       49,   49, -276, -276,   49,   49,   49,   49,   49,   49,
       49, -276,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -276
    },

    {
        9, -277, -277, -277,   49, -277, -277, -277, -277,   49,
       49,   49, -277, -277,   49,   49,   49,   49,   49,   49,
       49, -277,   49,   49,   49,   49,   49,   49,  292,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -277

    },

    {
        9, -278, -278, -278,   49, -278, -278, -278, -278,   49,
       49,   49, -278, -278,   49,   49,   49,   49,   49,   49,
       49, -278,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      293,   49,   49,   49,   49,   49, -278
    },

    {
        9, -279, -279, -279,   49, -279, -279, -279, -279,   49,
       49,   49, -279, -279,   49,   49,   49,   49,   49,   49,
       49, -279,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -279

    },

    {
        9, -280, -280, -280,   49, -280, -280, -280, -280,   49,
       49,   49, -280, -280,   49,   49,   49,   49,   49,   49,
       49, -280,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,  294,   49,   49,   49,   49,  295,   49,
       49,   49,   49,   49,   49,   49, -280
    },

    {
        9, -281, -281, -281,   49, -281, -281, -281, -281,   49,
       49,   49, -281, -281,   49,   49,   49,   49,   49,   49,
       49, -281,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  296,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -281

    },

    {
        9, -282, -282, -282,   49, -282, -282, -282, -282,   49,
       49,   49, -282, -282,   49,   49,   49,   49,   49,   49,
       49, -282,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  297,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -282
    },

    {
        9, -283, -283, -283,   49, -283, -283, -283, -283,   49,
       49,   49, -283, -283,   49,   49,   49,   49,   49,   49,
       49, -283,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  298,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -283

    },

    {
        9, -284, -284, -284,   49, -284, -284, -284, -284,   49,
       49,   49, -284, -284,   49,   49,   49,   49,   49,   49,
       49, -284,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      299,   49,   49,   49,   49,   49, -284
    },

    {
        9, -285, -285, -285,   49, -285, -285, -285, -285,   49,
       49,   49, -285, -285,   49,   49,   49,   49,   49,   49,
       49, -285,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      300,   49,   49,   49,   49,   49, -285

    },

    {
        9, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286,  301, -286, -286
    },

    {
        9, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287,  302, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287

    },

    {
        9, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288,  303, -288, -288, -288, -288, -288
    },

    {
        9, -289, -289, -289, -289, -289, -289, -289, -289,  304,
     -289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289, -289, -289, -289

    },

    {
        9, -290, -290, -290,   49, -290, -290, -290, -290,   49,
       49,   49, -290, -290,   49,   49,   49,   49,   49,   49,
       49, -290,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      305,   49,   49,   49,   49,   49, -290
    },

    {
        9, -291, -291, -291,   49, -291, -291, -291, -291,   49,
       49,   49, -291, -291,   49,   49,   49,   49,   49,   49,
       49, -291,   49,   49,   49,   49,   49,   49,  306,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -291

    },

    {
        9, -292, -292, -292,   49, -292, -292, -292, -292,   49,
       49,   49, -292, -292,   49,   49,   49,   49,   49,   49,
       49, -292,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  307,   49,   49,   49,   49, -292
    },

    {
        9, -293, -293, -293,   49, -293, -293, -293, -293,   49,
       49,   49, -293, -293,   49,   49,   49,   49,   49,   49,
       49, -293,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -293

    },

    {
        9, -294, -294, -294,   49, -294, -294, -294, -294,   49,
       49,   49, -294, -294,   49,   49,   49,   49,   49,   49,
       49, -294,   49,   49,   49,   49,   49,  308,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -294
    },

    {
        9, -295, -295, -295,   49, -295, -295, -295, -295,   49,
       49,   49, -295, -295,   49,   49,   49,   49,   49,   49,
       49, -295,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  309,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -295

    },

    {
        9, -296, -296, -296,   49, -296, -296, -296, -296,   49,
       49,   49, -296, -296,   49,   49,   49,   49,   49,   49,
       49, -296,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -296
    },

    {
        9, -297, -297, -297,   49, -297, -297, -297, -297,   49,
       49,   49, -297, -297,   49,   49,   49,   49,   49,   49,
       49, -297,   49,   49,   49,  310,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -297

    },

    {
        9, -298, -298, -298,   49, -298, -298, -298, -298,   49,
       49,   49, -298, -298,   49,   49,   49,   49,   49,   49,
       49, -298,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  311,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -298
    },

    {
        9, -299, -299, -299,   49, -299, -299, -299, -299,   49,
       49,   49, -299, -299,   49,   49,   49,   49,   49,   49,
       49, -299,   49,   49,   49,   49,   49,  312,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -299

    },

    {
        9, -300, -300, -300,   49, -300, -300, -300, -300,   49,
       49,   49, -300, -300,   49,   49,   49,   49,   49,   49,
       49, -300,   49,   49,   49,   49,   49,  313,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -300
    },

    {
        9, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301

    },

    {
        9, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
      314, -302, -302, -302, -302, -302, -302
    },

    {
        9, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303,  315, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303

    },

    {
        9, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304,  316, -304, -304, -304, -304
    },

    {
        9, -305, -305, -305,   49, -305, -305, -305, -305,   49,
       49,   49, -305, -305,   49,   49,   49,   49,   49,   49,
       49, -305,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -305

    },

    {
        9, -306, -306, -306,   49, -306, -306, -306, -306,   49,
       49,   49, -306, -306,   49,   49,   49,   49,   49,   49,
       49, -306,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  317,   49,   49,   49,   49, -306
    },

    {
        9, -307, -307, -307,   49, -307, -307, -307, -307,   49,
       49,   49, -307, -307,   49,   49,   49,   49,   49,   49,
       49, -307,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  318,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -307

    },

    {
        9, -308, -308, -308,   49, -308, -308, -308, -308,   49,
       49,   49, -308, -308,   49,   49,   49,   49,   49,   49,
       49, -308,   49,   49,   49,   49,   49,   49,  319,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -308
    },

    {
        9, -309, -309, -309,   49, -309, -309, -309, -309,   49,
       49,   49, -309, -309,   49,   49,   49,   49,   49,   49,
       49, -309,   49,   49,   49,   49,   49,   49,   49,  320,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -309

    },

    {
        9, -310, -310, -310,   49, -310, -310, -310, -310,   49,
       49,   49, -310, -310,   49,   49,   49,   49,   49,   49,
       49, -310,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -310
    },

    {
        9, -311, -311, -311,   49, -311, -311, -311, -311,   49,
       49,   49, -311, -311,   49,   49,   49,   49,   49,   49,
       49, -311,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  321,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -311

    },

    {
        9, -312, -312, -312,   49, -312, -312, -312, -312,   49,
       49,   49, -312, -312,   49,   49,   49,   49,   49,   49,
       49, -312,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  322,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -312
    },

    {
        9, -313, -313, -313,   49, -313, -313, -313, -313,   49,
       49,   49, -313, -313,   49,   49,   49,   49,   49,   49,
       49, -313,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  323,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -313

    },

    {
        9, -314, -314, -314, -314, -314, -314, -314, -314, -314,
     -314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
     -314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
     -314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
     -314, -314, -314, -314,  324, -314, -314
    },

    {
        9, -315, -315, -315, -315, -315, -315, -315, -315, -315,
     -315, -315, -315, -315, -315, -315, -315, -315, -315, -315,
     -315, -315, -315, -315, -315,  325, -315, -315, -315, -315,
     -315, -315, -315, -315, -315, -315, -315, -315, -315, -315,
     -315, -315, -315, -315, -315, -315, -315

    },

    {
        9, -316, -316, -316, -316, -316, -316, -316, -316, -316,
     -316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
     -316, -316, -316, -316, -316, -316, -316,  326, -316, -316,
     -316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
     -316, -316, -316, -316, -316, -316, -316
    },

    {
        9, -317, -317, -317,   49, -317, -317, -317, -317,   49,
       49,   49, -317, -317,   49,   49,   49,   49,   49,   49,
       49, -317,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  327,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -317

    },

    {
        9, -318, -318, -318,   49, -318, -318, -318, -318,   49,
       49,   49, -318, -318,   49,   49,   49,   49,   49,   49,
       49, -318,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -318
    },

    {
        9, -319, -319, -319,   49, -319, -319, -319, -319,   49,
       49,   49, -319, -319,   49,   49,   49,   49,   49,   49,
       49, -319,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      328,   49,   49,   49,   49,   49, -319

    },

    {
        9, -320, -320, -320,   49, -320, -320, -320, -320,   49,
       49,   49, -320, -320,   49,   49,   49,   49,   49,   49,
       49, -320,   49,   49,   49,   49,   49,   49,   49,   49,
      329,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -320
    },

    {
        9, -321, -321, -321,   49, -321, -321, -321, -321,   49,
       49,   49, -321, -321,   49,   49,   49,   49,   49,   49,
       49, -321,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -321

    },

    {
        9, -322, -322, -322,   49, -322, -322, -322, -322,   49,
       49,   49, -322, -322,   49,   49,   49,   49,   49,   49,
       49, -322,   49,   49,   49,   49,  330,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -322
    },

    {
        9, -323, -323, -323,   49, -323, -323, -323, -323,   49,
       49,   49, -323, -323,   49,   49,   49,   49,   49,   49,
       49, -323,   49,   49,   49,   49,  331,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -323

    },

    {
        9, -324, -324, -324, -324, -324, -324, -324, -324, -324,
     -324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
     -324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
     -324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
     -324, -324, -324, -324, -324, -324, -324
    },

    {
        9, -325, -325, -325, -325, -325, -325, -325, -325, -325,
     -325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
     -325, -325, -325, -325, -325, -325, -325,  332, -325, -325,
     -325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
     -325, -325, -325, -325, -325, -325, -325

    },

    {
        9, -326, -326, -326, -326, -326, -326, -326, -326, -326,
     -326, -326, -326, -326, -326, -326, -326, -326, -326, -326,
     -326, -326, -326, -326, -326, -326, -326, -326, -326, -326,
     -326, -326, -326, -326, -326, -326, -326, -326,  333, -326,
     -326, -326, -326, -326, -326, -326, -326
    },

    {
        9, -327, -327, -327,   49, -327, -327, -327, -327,   49,
       49,   49, -327, -327,   49,   49,   49,   49,   49,   49,
       49, -327,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -327

    },

    {
        9, -328, -328, -328,   49, -328, -328, -328, -328,   49,
       49,   49, -328, -328,   49,   49,   49,   49,   49,   49,
       49, -328,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -328
    },

    {
        9, -329, -329, -329,   49, -329, -329, -329, -329,   49,
       49,   49, -329, -329,   49,   49,   49,   49,   49,   49,
       49, -329,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
      334,   49,   49,   49,   49,   49, -329

    },

    {
        9, -330, -330, -330,   49, -330, -330, -330, -330,   49,
       49,   49, -330, -330,   49,   49,   49,   49,   49,   49,
       49, -330,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -330
    },

    {
        9, -331, -331, -331,   49, -331, -331, -331, -331,   49,
       49,   49, -331, -331,   49,   49,   49,   49,   49,   49,
       49, -331,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -331

    },

    {
        9, -332, -332, -332, -332, -332, -332, -332, -332, -332,
     -332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
     -332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
     -332, -332, -332, -332, -332, -332, -332, -332, -332,  335,
     -332, -332, -332, -332, -332, -332, -332
    },

    {
        9, -333, -333, -333, -333, -333, -333, -333, -333, -333,
     -333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
     -333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
     -333, -333, -333, -333, -333, -333, -333, -333, -333,  336,
     -333, -333, -333, -333, -333, -333, -333

    },

    {
        9, -334, -334, -334,   49, -334, -334, -334, -334,   49,
       49,   49, -334, -334,   49,   49,   49,   49,   49,   49,
       49, -334,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, -334
    },

    {
        9, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335,  337,
     -335, -335, -335, -335, -335, -335, -335

    },

    {
        9, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336,  338, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336
    },

    {
        9, -337, -337, -337, -337, -337, -337, -337, -337, -337,
     -337, -337, -337, -337, -337, -337, -337, -337, -337, -337,
     -337, -337, -337, -337, -337, -337, -337, -337, -337, -337,
     -337, -337, -337, -337, -337, -337, -337, -337, -337, -337,
     -337, -337, -337, -337, -337, -337, -337

    },

    {
        9, -338, -338, -338, -338, -338, -338, -338, -338, -338,
     -338, -338, -338, -338, -338, -338, -338, -338, -338, -338,
     -338, -338, -338, -338, -338, -338, -338, -338, -338, -338,
     -338, -338, -338, -338, -338, -338,  339, -338, -338, -338,
     -338, -338, -338, -338, -338, -338, -338
    },

    {
        9, -339, -339, -339, -339, -339, -339, -339, -339, -339,
     -339, -339, -339, -339, -339, -339, -339, -339, -339, -339,
     -339, -339, -339, -339, -339, -339, -339, -339, -339, -339,
     -339, -339, -339, -339, -339,  340, -339, -339, -339, -339,
     -339, -339, -339, -339, -339, -339, -339

    },

    {
        9, -340, -340, -340, -340, -340, -340, -340, -340, -340,
     -340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
     -340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
     -340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
     -340, -340, -340, -340, -340, -340, -340
    },

    } ;

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up smt2text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	smt2leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[341] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   89,   87,
        1,    1,   85,   10,   87,   15,   16,    2,   87,    7,
       44,   85,   85,   17,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       87,    9,    8,   13,   14,   12,   13,   88,   85,    0,
        0,    0,    2,    0,    0,    0,    0,   45,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   41,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,    0,    0,   86,   11,    4,    5,
        6,    0,    0,    0,    0,    0,    0,   85,   85,   85,

       40,   85,    3,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       43,   47,   39,   30,   85,   85,   85,   85,   85,   85,
       85,   85,   42,   85,    0,    0,    0,    0,    0,    0,
       85,   85,   36,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   62,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   33,   85,   85,   29,   85,   85,   85,   85,
       85,   85,   37,   85,    0,    0,    0,    0,    0,    0,
       35,   85,   85,   51,   61,   85,   85,   85,   54,   85,

       60,   65,   53,   85,   76,   74,   48,   75,   73,   85,
       85,   52,   85,   72,   70,   71,   69,   85,   85,   63,
       85,   85,   85,   85,   85,   85,   38,   85,   85,   85,
       85,   85,   85,   85,   84,   85,    0,    0,    0,    0,
        0,    0,   34,   31,   50,   77,   49,   64,   56,   59,
       58,   55,   57,   66,   85,   67,   85,   85,   85,   85,
       80,   85,   83,   85,   85,   85,   85,   85,    0,    0,
        0,    0,   18,   22,   85,   85,   85,   85,   68,   85,
       85,   85,   85,   85,   85,    0,    0,    0,    0,   85,
       85,   85,   46,   85,   85,   25,   85,   85,   85,   85,

       19,    0,    0,    0,   32,   85,   85,   85,   85,   24,
       85,   85,   85,    0,    0,    0,   85,   28,   85,   85,
       26,   85,   85,   20,    0,    0,   27,   81,   85,   79,
       78,    0,    0,   82,    0,    0,   23,    0,    0,   21
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    4,    4,    4,    1,    7,
        8,    4,    4,    1,    9,   10,    4,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   13,    4,
       14,   15,    4,    4,   16,   17,   18,   18,   18,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   20,   19,   19,   19,   19,
        1,   21,    1,    4,   22,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   19,   32,   33,   34,   35,
       36,   37,   19,   38,   39,   40,   41,   42,   19,   43,
       44,   45,    1,   46,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[89] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int smt2_flex_debug;
int smt2_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *smt2text;
#line 1 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
#line 2 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
  /********************************************************************
   * AUTHORS:  Trevor Hansen
   *
   * BEGIN DATE: May, 2010
   *
   * This file is modified version of the STP's smtlib.lex file. Please
   * see CVCL license below
   ********************************************************************/

  /********************************************************************
   * AUTHORS: Trevor Hansen, Vijay Ganesh, David L. Dill
   *
   * BEGIN DATE: July, 2006
   *
   * This file is modified version of the CVCL's smtlib.lex file. Please
   * see CVCL license below
   ********************************************************************/
   
  /********************************************************************
   * \file smtlib.lex
   * 
   * Author: Sergey Berezin, Clark Barrett
   * 
   * Created: Apr 30 2005
   *
   * <hr>
   * Copyright (C) 2004 by the Board of Trustees of Leland Stanford
   * Junior University and by New York University. 
   *
   * License to use, copy, modify, sell and/or distribute this software
   * and its documentation for any purpose is hereby granted without
   * royalty, subject to the terms and conditions defined in the \ref
   * LICENSE file provided with this distribution.  In particular:
   *
   * - The above copyright notice and this permission notice must appear
   * in all copies of the software and related documentation.
   *
   * - THE SOFTWARE IS PROVIDED "AS-IS", WITHOUT ANY WARRANTIES,
   * EXPRESSED OR IMPLIED.  USE IT AT YOUR OWN RISK.
   * 
   * <hr>
   ********************************************************************/
#include "stp/Parser/parser.h"
#include "parsesmt2.hpp"
#include "stp/cpp_interface.h"

  extern char *smt2text;
  extern int smt2error (const char *msg);

#ifdef _MSC_VER
  #include <io.h>
  int isatty(int fd) { return _isatty(fd); }
#endif

  // File-static (local to this file) variables and functions
  static std::string _string_lit;  
  static char escapeChar(char c) {
    switch(c) {
    case 'n': return '\n';
    case 't': return '\t';
    default: return c;
    }
  }    
   
  static int lookup(const char* s)
  {
    std::string str(s);
  
    // The SMTLIB2 specifications sez that the outter bars aren't part of the
    // name. This means that we can create an empty string symbol name.
    if (s[0] == '|' && s[str.size()-1] == '|')
    	str = str.substr(1,str.length()-2);
    
    stp::ASTNode nptr;
    bool found = false;
    
    if (stp::GlobalParserInterface->isSymbolAlreadyDeclared(str)) // it's a symbol.
    {
    	nptr= stp::GlobalParserInterface->LookupOrCreateSymbol(str);
    	found = true;
    }
    else if (stp::GlobalParserInterface->letMgr->isLetDeclared(str)) // a let.
    {
    	nptr = stp::GlobalParserInterface->letMgr->resolveLet(str);
    	found = true;
    }
    else if (stp::GlobalParserInterface->isBitVectorFunction(str))
    {
		smt2lval.str = new std::string(str);
		return  BITVECTOR_FUNCTIONID_TOK;
    }
   else if (stp::GlobalParserInterface->isBooleanFunction(str))
   {
               smt2lval.str = new std::string(str);
               return  BOOLEAN_FUNCTIONID_TOK;
   }
    
    

	if (found)
	{
	  // Check valuesize to see if it's a prop var.  I don't like doing
	  // type determination in the lexer, but it's easier than rewriting
	  // the whole grammar to eliminate the term/formula distinction.  
	  smt2lval.node = stp::GlobalParserInterface->newNode(nptr);
	  if ((smt2lval.node)->GetType() == stp::BOOLEAN_TYPE)
	    return FORMID_TOK;
	  else 
	    return TERMID_TOK;
	   }
	else
	{
		// it has not been seen before.
		smt2lval.str = new std::string(str);
		return STRING_TOK;
	}
	}



#line 3536 "/home/klee/klee_build/stp/build/lib/Parser/lexsmt2.cpp"

#define INITIAL 0
#define COMMENT 1
#define STRING_LITERAL 2
#define SYMBOL 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int smt2lex_destroy (void );

int smt2get_debug (void );

void smt2set_debug (int debug_flag  );

YY_EXTRA_TYPE smt2get_extra (void );

void smt2set_extra (YY_EXTRA_TYPE user_defined  );

FILE *smt2get_in (void );

void smt2set_in  (FILE * in_str  );

FILE *smt2get_out (void );

void smt2set_out  (FILE * out_str  );

int smt2get_leng (void );

char *smt2get_text (void );

int smt2get_lineno (void );

void smt2set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int smt2wrap (void );
#else
extern int smt2wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( smt2text, smt2leng, 1, smt2out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( smt2in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( smt2in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, smt2in))==0 && ferror(smt2in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(smt2in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int smt2lex (void);

#define YY_DECL int smt2lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after smt2text and smt2leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 137 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"

#line 3726 "/home/klee/klee_build/stp/build/lib/Parser/lexsmt2.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! smt2in )
			smt2in = stdin;

		if ( ! smt2out )
			smt2out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			smt2ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				smt2_create_buffer(smt2in,YY_BUF_SIZE );
		}

		smt2_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of smt2text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		while ( (yy_current_state = yy_nxt[yy_current_state][ yy_ec[YY_SC_TO_UI(*yy_cp)]  ]) > 0 )
			{
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}

			++yy_cp;
			}

		yy_current_state = -yy_current_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < smt2leng; ++yyl )
				if ( smt2text[yyl] == '\n' )
					   
    smt2lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 138 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ /* sk'ip whitespace */ }
	YY_BREAK
/* We limit numerals to maxint, in the specification they are arbitary precision.*/
case 2:
YY_RULE_SETUP
#line 141 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ smt2lval.uintval = strtoul(smt2text, NULL, 10); return NUMERAL_TOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 143 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ smt2lval.str = new std::string(smt2text+2); return BVCONST_DECIMAL_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 144 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ smt2lval.str = new std::string(smt2text+2); return BVCONST_BINARY_TOK; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 145 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ smt2lval.str = new std::string(smt2text+2); return BVCONST_HEXIDECIMAL_TOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 147 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return DECIMAL_TOK;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 149 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ BEGIN COMMENT; }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 150 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ BEGIN INITIAL; /* return to normal mode */}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 151 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ /* stay in comment mode */ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 153 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ BEGIN STRING_LITERAL;
                          _string_lit.erase(_string_lit.begin(),
                                            _string_lit.end()); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 156 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ /* escape characters (like \n or \") */
                          _string_lit.insert(_string_lit.end(),
                                             escapeChar(smt2text[1])); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 159 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ BEGIN INITIAL; 
			  smt2lval.str = new std::string(_string_lit);
                          return STRING_TOK; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 162 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ _string_lit.insert(_string_lit.end(),*smt2text); }                           
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 163 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ _string_lit.insert(_string_lit.end(),*smt2text); }
	YY_BREAK
/* Valid character are: ~ ! @ # $ % ^ & * _ - + = | \ : ; " < > . ? / ( )     */
case 15:
YY_RULE_SETUP
#line 166 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return LPAREN_TOK; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 167 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return RPAREN_TOK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 168 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return UNDERSCORE_TOK; }
	YY_BREAK
/* Set info types */
/* This is a very restricted set of the possible keywords */
case 18:
YY_RULE_SETUP
#line 172 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return SOURCE_TOK;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 173 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return CATEGORY_TOK;} 
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 174 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return DIFFICULTY_TOK; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 175 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return VERSION_TOK; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 176 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return STATUS_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 177 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return PRINT_TOK; }
	YY_BREAK
/* COMMANDS */
case 24:
YY_RULE_SETUP
#line 181 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return LOGIC_TOK; }  
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 182 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return NOTES_TOK;  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 183 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return OPTION_TOK;  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 184 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return DECLARE_FUNCTION_TOK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 185 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return DEFINE_FUNCTION_TOK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 186 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return PUSH_TOK;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 187 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return POP_TOK;}
	YY_BREAK
/*
	"declare-sort" 
	"define-sort"  
*/ 
case 31:
YY_RULE_SETUP
#line 193 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return FORMULA_TOK; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 194 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return CHECK_SAT_TOK; }
	YY_BREAK
/*
	"get-assertions" 
	"get-proof" 
	"get-unsat-core" 
	"get-value"   
	"get-assignment" 
	"get-option" 
	"get-info" 
*/
case 33:
YY_RULE_SETUP
#line 204 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{return EXIT_TOK;}
	YY_BREAK
/* Types for QF_BV and QF_AUFBV. */
case 34:
YY_RULE_SETUP
#line 207 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BITVEC_TOK;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 208 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return ARRAY_TOK;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 209 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BOOL_TOK;}
	YY_BREAK
/* CORE THEORY pg. 29 of the SMT-LIB2 standard 30-March-2010. */
case 37:
YY_RULE_SETUP
#line 213 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return TRUE_TOK; } 
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 214 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return FALSE_TOK; } 
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 215 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return NOT_TOK; } 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 216 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return AND_TOK; } 
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 217 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return OR_TOK; } 
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 218 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return XOR_TOK;}  
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 219 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return ITE_TOK;} // PARAMETRIC 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 220 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return EQ_TOK;} 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 221 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return IMPLIES_TOK; } 
	YY_BREAK
/* CORE THEORY. But not on pg 29. */
case 46:
YY_RULE_SETUP
#line 224 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return DISTINCT_TOK; }  // variadic
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 225 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return LET_TOK; }
	YY_BREAK
/* Functions for QF_BV and QF_AUFBV.  */
case 48:
YY_RULE_SETUP
#line 228 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVLEFTSHIFT_1_TOK;} 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 229 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVRIGHTSHIFT_1_TOK;} 
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 230 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVARITHRIGHTSHIFT_TOK;} 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 231 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVPLUS_TOK;} 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 232 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVSUB_TOK;} 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 233 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVNOT_TOK;} 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 234 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVMULT_TOK;} 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 235 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVDIV_TOK;} 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 236 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return SBVDIV_TOK;} 
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 237 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVMOD_TOK;}  
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 238 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return SBVREM_TOK;} 
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 239 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return SBVMOD_TOK;} 
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 240 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVNEG_TOK;} 
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 241 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVAND_TOK;} 
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 242 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVOR_TOK;} 
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 243 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVXOR_TOK;} 
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 244 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVNAND_TOK;} 
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 245 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVNOR_TOK;} 
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 246 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVXNOR_TOK;} 
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 247 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVCONCAT_TOK;} 
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 248 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVEXTRACT_TOK;} 
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 249 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVLT_TOK;} 
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 250 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVGT_TOK;} 
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 251 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVLE_TOK;} 
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 252 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVGE_TOK;} 
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 253 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVSLT_TOK;} 
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 254 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVSGT_TOK;} 
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 255 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVSLE_TOK;} 
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 256 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVSGE_TOK;} 
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 257 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVCOMP_TOK;} 
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 258 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVZX_TOK;} 
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 259 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVSX_TOK;}  
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 260 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVREPEAT_TOK;}  
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 261 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVROTATE_LEFT_TOK;} 
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 262 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return BVROTATE_RIGHT_TOK;}  
	YY_BREAK
/* Functions for QF_AUFBV. */
case 83:
YY_RULE_SETUP
#line 265 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return SELECT_TOK; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 266 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ return STORE_TOK; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 268 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{return lookup(smt2text);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 269 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{return lookup(smt2text);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 271 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
{ smt2error("Illegal input character."); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 272 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"
ECHO;
	YY_BREAK
#line 4280 "/home/klee/klee_build/stp/build/lib/Parser/lexsmt2.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STRING_LITERAL):
case YY_STATE_EOF(SYMBOL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed smt2in at a new source and called
			 * smt2lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = smt2in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( smt2wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * smt2text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of smt2lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					smt2realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			smt2restart(smt2in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) smt2realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state = yy_nxt[yy_current_state][(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)];
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	yy_current_state = yy_nxt[yy_current_state][1];
	yy_is_jam = (yy_current_state <= 0);

	if ( ! yy_is_jam )
		{
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					smt2restart(smt2in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( smt2wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve smt2text */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    smt2lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void smt2restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        smt2ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            smt2_create_buffer(smt2in,YY_BUF_SIZE );
	}

	smt2_init_buffer(YY_CURRENT_BUFFER,input_file );
	smt2_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void smt2_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		smt2pop_buffer_state();
	 *		smt2push_buffer_state(new_buffer);
     */
	smt2ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	smt2_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (smt2wrap()) processing, but the only time this flag
	 * is looked at is after smt2wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void smt2_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	smt2in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE smt2_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) smt2alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) smt2alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_create_buffer()" );

	b->yy_is_our_buffer = 1;

	smt2_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with smt2_create_buffer()
 * 
 */
    void smt2_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		smt2free((void *) b->yy_ch_buf  );

	smt2free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a smt2restart() or at EOF.
 */
    static void smt2_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	smt2_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then smt2_init_buffer was _probably_
     * called from smt2restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void smt2_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		smt2_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void smt2push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	smt2ensure_buffer_stack();

	/* This block is copied from smt2_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from smt2_switch_to_buffer. */
	smt2_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void smt2pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	smt2_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		smt2_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void smt2ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)smt2alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in smt2ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)smt2realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in smt2ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE smt2_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) smt2alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	smt2_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to smt2lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       smt2_scan_bytes() instead.
 */
YY_BUFFER_STATE smt2_scan_string (yyconst char * yystr )
{
    
	return smt2_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to smt2lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE smt2_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) smt2alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = smt2_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in smt2_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up smt2text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		smt2text[smt2leng] = (yy_hold_char); \
		(yy_c_buf_p) = smt2text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		smt2leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int smt2get_lineno  (void)
{
        
    return smt2lineno;
}

/** Get the input stream.
 * 
 */
FILE *smt2get_in  (void)
{
        return smt2in;
}

/** Get the output stream.
 * 
 */
FILE *smt2get_out  (void)
{
        return smt2out;
}

/** Get the length of the current token.
 * 
 */
int smt2get_leng  (void)
{
        return smt2leng;
}

/** Get the current token.
 * 
 */

char *smt2get_text  (void)
{
        return smt2text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void smt2set_lineno (int  line_number )
{
    
    smt2lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see smt2_switch_to_buffer
 */
void smt2set_in (FILE *  in_str )
{
        smt2in = in_str ;
}

void smt2set_out (FILE *  out_str )
{
        smt2out = out_str ;
}

int smt2get_debug  (void)
{
        return smt2_flex_debug;
}

void smt2set_debug (int  bdebug )
{
        smt2_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from smt2lex_destroy(), so don't allocate here.
     */

    /* We do not touch smt2lineno unless the option is enabled. */
    smt2lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    smt2in = stdin;
    smt2out = stdout;
#else
    smt2in = (FILE *) 0;
    smt2out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * smt2lex_init()
     */
    return 0;
}

/* smt2lex_destroy is for both reentrant and non-reentrant scanners. */
int smt2lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		smt2_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		smt2pop_buffer_state();
	}

	/* Destroy the stack itself. */
	smt2free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * smt2lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *smt2alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *smt2realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void smt2free (void * ptr )
{
	free( (char *) ptr );	/* see smt2realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 272 "/home/klee/klee_build/stp/src/lib/Parser/smt2.lex"



